var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCreditCardDto.html",[0,0.111,1,3.522]],["body/classes/AddCreditCardDto.html",[0,0.185,1,6.376,2,1.906,3,0.081,4,0.081,5,0.081,6,5.538,7,6.864,8,5.016,9,5.098,10,0.41,11,1.477,12,6.376,13,0.41,14,0.007,15,1.423,16,1.264,17,3.163,18,0.513,19,5.556,20,0.182,21,3.69,22,3.69,23,2.626,24,0.112,25,1.287,26,0.006,27,0.006]],["title/entities/Address.html",[28,1.773,29,3.007]],["body/entities/Address.html",[0,0.114,3,0.061,4,0.061,5,0.061,10,0.313,11,1.24,13,0.542,14,0.007,15,1.57,16,1.669,18,0.678,20,0.189,24,0.069,25,0.983,26,0.005,27,0.005,28,1.828,29,4.782,30,2.415,31,4.242,32,3.95,33,6.543,34,6.543,35,2.382,36,6.543,37,1.047,38,3.26,39,4.848,40,4.773,41,4.773,42,1.977,43,4.096,44,4.773,45,4.773,46,4.242,47,6.483,48,4.773,49,5.762,50,1.788,51,4.773,52,2.569,53,4.773]],["title/controllers/AppController.html",[54,1.235,55,3.522]],["body/controllers/AppController.html",[0,0.148,3,0.079,4,0.079,5,0.079,10,0.404,14,0.007,15,1.409,16,1.243,18,0.505,20,0.222,24,0.089,26,0.006,27,0.006,54,2.039,55,5.817,56,1.671,57,5.467,58,1.517,59,7.736,60,6.151,61,1.198,62,0.689,63,5.663,64,5.467,65,2.648,66,1.703,67,1.29,68,6.151]],["title/modules/AppModule.html",[69,1.007,70,3.522]],["body/modules/AppModule.html",[0,0.046,3,0.025,4,0.025,5,0.025,8,1.239,13,0.125,14,0.007,18,0.157,20,0.263,24,0.028,26,0.002,27,0.002,37,0.308,55,3.16,56,0.872,58,0.379,61,0.372,62,0.214,63,4.007,64,1.695,69,0.698,70,7.137,71,0.656,72,1.286,73,1.695,74,1.695,75,1.695,76,3.823,77,4.221,78,4.221,79,4.221,80,4.221,81,4.221,82,4.221,83,4.007,84,3.823,85,4.221,86,4.007,87,4.221,88,4.221,89,4.221,90,4.221,91,4.221,92,4.221,93,4.221,94,4.221,95,4.007,96,4.221,97,4.221,98,4.221,99,4.221,100,3.392,101,1.348,102,0.801,103,0.801,104,1.907,105,1.257,106,1.825,107,1.907,108,3.209,109,4.871,110,1.907,111,0.358,112,0.263,113,3.209,114,1.298,115,2.236,116,2.695,117,0.699,118,2.852,119,1.907,120,1.907,121,1.298,122,1.555,123,1.907,124,1.695,125,1.907,126,1.451,127,1.451,128,1.907,129,1.907,130,1.027,131,1.368,132,1.907,133,1.907,134,1.555,135,1.907,136,1.555,137,1.202,138,1.368,139,1.907,140,1.907,141,1.907,142,1.239,143,1.451,144,1.368,145,3.209,146,1.907,147,1.695,148,1.695,149,1.368,150,1.695,151,2.978,152,1.907,153,1.907,154,1.695,155,1.451,156,1.907,157,1.451,158,1.907,159,1.907,160,1.298,161,1.368,162,1.907,163,1.239,164,1.695,165,1.695,166,1.368,167,1.368,168,1.907,169,1.907,170,1.907,171,1.907,172,1.451,173,1.907,174,1.451,175,1.907,176,1.907,177,1.907,178,2.393,179,1.239,180,1.907,181,1.907,182,1.907,183,8.316,184,1.907,185,1.907,186,1.907,187,1.907,188,3.209,189,1.907,190,1.907,191,1.907,192,1.907,193,1.907,194,1.907,195,1.907,196,1.907,197,1.907,198,1.907,199,1.907,200,7.853,201,1.907,202,3.209,203,1.907,204,1.907,205,1.907,206,1.907,207,1.907,208,1.907,209,1.907,210,1.907,211,1.907,212,1.907,213,1.907,214,1.907,215,1.907,216,1.907,217,1.907,218,1.907,219,1.907,220,1.907,221,1.907,222,1.907,223,1.907,224,1.907,225,1.907,226,1.907,227,1.907,228,1.907,229,1.907,230,1.907,231,1.785,232,2.084,233,1.907,234,1.907,235,1.907,236,1.695,237,1.907,238,1.907,239,1.907,240,1.907,241,1.907,242,0.481,243,1.368,244,1.298,245,1.555,246,1.298,247,1.907,248,1.555,249,1.695,250,1.061,251,1.555,252,1.907,253,1.907,254,1.907]],["title/injectables/AppService.html",[63,3.151,255,0.748]],["body/injectables/AppService.html",[0,0.154,3,0.083,4,0.083,5,0.083,10,0.422,14,0.007,15,1.449,18,0.529,20,0.187,24,0.093,26,0.006,27,0.006,58,1.56,59,7.858,61,1.254,62,0.721,63,5.351,67,1.349,255,1.27,256,2.001,257,5.719,258,6.435,259,6.435,260,5.719]],["title/controllers/AuthenticationController.html",[54,1.235,261,3.522]],["body/controllers/AuthenticationController.html",[0,0.071,3,0.038,4,0.038,5,0.038,10,0.194,13,0.447,14,0.007,16,1.376,18,0.559,20,0.241,24,0.043,26,0.003,27,0.003,37,1.099,38,2.258,54,0.788,56,0.803,58,0.907,61,1.326,62,0.331,66,1.743,67,1.574,111,1.278,112,0.94,137,1.712,163,1.919,178,2.246,242,2.007,261,3.477,262,2.625,263,1.272,264,1.919,265,3.477,266,4.063,267,4.571,268,3.111,269,3.728,270,2.625,271,4.185,272,2.954,273,2.954,274,3.512,275,2.954,276,2.954,277,2.954,278,1.341,279,2.954,280,2.954,281,2.954,282,2.954,283,2.954,284,2.954,285,2.625,286,4.513,287,4.571,288,2.954,289,4.063,290,1.411,291,1.702,292,2.409,293,1.016,294,1.54,295,4.254,296,1.373,297,1.59,298,4.675,299,1.54,300,3.222,301,2.011,302,2.625,303,2.247,304,2.954,305,2.184,306,2.409,307,1.59,308,1.304,309,4.063,310,2.468,311,1.54,312,2.247,313,2.954,314,3.632,315,2.409,316,3.632,317,2.954,318,2.954,319,1.702,320,0.866,321,1.882,322,2.954,323,1.958,324,2.294,325,2.954,326,2.954,327,2.954,328,2.625,329,2.954,330,2.625,331,2.247,332,2.954,333,2.954,334,2.954,335,3.728,336,2.954,337,2.954,338,2.954,339,4.571,340,4.97,341,4.788,342,2.625,343,4.876,344,3.728,345,1.644,346,2.247,347,2.625,348,2.625,349,2.247,350,4.56,351,4.571,352,2.954,353,2.954,354,2.118,355,2.625,356,2.954,357,2.954,358,2.954,359,2.625,360,2.184,361,2.954,362,2.954,363,4.571,364,2.954,365,2.954,366,2.954,367,2.954]],["title/modules/AuthenticationModule.html",[69,1.007,76,3.007]],["body/modules/AuthenticationModule.html",[0,0.091,3,0.049,4,0.049,5,0.049,14,0.007,20,0.265,24,0.055,26,0.004,27,0.004,56,1.502,62,0.426,69,1.202,71,1.308,72,2.215,76,6.12,83,5.389,95,5.389,100,4.562,101,2.322,102,1.598,103,1.598,105,2.164,106,2.438,115,2.974,116,3.076,117,1.394,121,2.589,137,1.425,163,2.47,164,3.38,165,3.38,231,2.116,232,2.47,242,0.959,261,4.951,268,2.589,300,5.115,301,3.761,368,3.38,369,3.38,370,3.38,371,3.803,372,5.677,373,5.677,374,5.677,375,5.677,376,5.389,377,3.803,378,4.951,379,3.305,380,3.803,381,3.803,382,4.911,383,5.526,384,2.116,385,3.101,386,2.47,387,5.526,388,3.803,389,4.43,390,4.204,391,3.589,392,3.803,393,3.803,394,2.727,395,3.101,396,3.803,397,3.101,398,3.803]],["title/injectables/AuthenticationService.html",[255,0.748,300,2.668]],["body/injectables/AuthenticationService.html",[0,0.058,3,0.031,4,0.031,5,0.031,10,0.16,13,0.457,14,0.007,15,1.571,18,0.595,20,0.203,24,0.035,25,0.501,26,0.003,27,0.003,32,3.612,37,1.125,38,1.407,42,2.019,58,0.778,61,1.357,62,0.273,66,1.364,67,1.389,111,1.308,112,0.962,116,2.999,117,0.892,137,1.469,144,4.052,242,2.017,250,1.354,255,0.634,256,0.757,264,1.581,268,1.657,269,3.199,278,1.445,285,3.486,286,4.052,289,3.486,300,2.26,302,2.163,310,2.924,311,1.269,320,1.15,321,1.98,323,2.21,324,2.088,343,3.2,345,3.448,386,1.581,394,3.533,397,3.199,399,2.163,400,3.923,401,5.651,402,3.923,403,3.923,404,3.923,405,3.923,406,1.852,407,5.681,408,2.434,409,3.923,410,6.197,411,2.434,412,2.434,413,3.923,414,5.022,415,2.434,416,1.402,417,4.052,418,2.813,419,3.923,420,2.434,421,3.923,422,2.434,423,2.434,424,3.923,425,6.624,426,2.434,427,1.852,428,1.852,429,3.199,430,3.67,431,1.852,432,1.745,433,3.354,434,3.486,435,3.923,436,2.434,437,2.434,438,5.651,439,5.022,440,2.434,441,2.434,442,2.434,443,2.434,444,2.434,445,3.923,446,2.434,447,1.985,448,2.346,449,3.923,450,2.434,451,2.434,452,1.657,453,2.346,454,2.346,455,2.163,456,2.163,457,1.985,458,2.163,459,2.627,460,2.117,461,2.163,462,1.745,463,2.434,464,4.927,465,2.434,466,2.434,467,2.434,468,2.434,469,1.985,470,2.434,471,2.434,472,3.923,473,3.199,474,3.486,475,2.163,476,2.163,477,2.434,478,3.923,479,2.163]],["title/classes/Author.html",[0,0.111,480,2.414]],["body/classes/Author.html",[0,0.136,2,1.723,3,0.073,4,0.073,5,0.073,10,0.371,11,1.386,13,0.525,14,0.007,15,1.646,16,1.618,18,0.657,20,0.211,24,0.082,26,0.005,27,0.005,35,2.589,38,2.028,42,2.21,112,1.105,137,2.998,142,3.671,480,3.78,481,5.024,482,7.112,483,5.652,484,5.652,485,5.652,486,7.502,487,7.249,488,7.249,489,3.042]],["title/interfaces/BookProperties.html",[490,2.153,491,3.522]],["body/interfaces/BookProperties.html",[3,0.084,4,0.084,5,0.084,10,0.426,11,1.511,13,0.518,14,0.007,15,1.704,24,0.094,26,0.006,27,0.006,490,3.017,491,6.011,492,3.881,493,5.767,494,5.292,495,8.868,496,8.868]],["title/interfaces/CarProperties.html",[490,2.153,497,3.522]],["body/interfaces/CarProperties.html",[3,0.081,4,0.081,5,0.081,10,0.414,11,1.485,13,0.576,14,0.007,15,1.618,24,0.091,26,0.006,27,0.006,42,1.921,490,2.93,492,3.769,494,5.14,497,5.905,498,5.601,499,8.779,500,8.779,501,6.33,502,6.302,503,6.302]],["title/controllers/CategoriesController.html",[54,1.235,504,3.522]],["body/controllers/CategoriesController.html",[0,0.091,3,0.049,4,0.049,5,0.049,10,0.25,13,0.469,14,0.007,16,1.534,18,0.623,20,0.23,24,0.055,26,0.004,27,0.004,35,2.106,37,1.154,54,1.014,56,1.033,58,1.097,61,1.478,62,0.426,65,1.637,66,1.053,67,1.591,111,1.341,112,0.987,242,2.151,263,1.637,278,1.909,290,2.64,291,2.191,293,1.901,296,1.768,297,2.047,305,1.817,308,1.679,319,2.191,360,3.11,504,4.204,505,3.38,506,2.589,507,4.911,508,4.911,509,6.349,510,4.911,511,4.911,512,3.38,513,5.122,514,2.727,515,3.803,516,4.562,517,3.803,518,5.899,519,3.38,520,3.803,521,3.803,522,3.803,523,4.911,524,3.803,525,3.803,526,5.122,527,3.803,528,3.803,529,3.101,530,2.727,531,3.803,532,4.43,533,2.893,534,3.101,535,2.727,536,2.893,537,1.924,538,4.204,539,1.924,540,2.893,541,3.803,542,3.803,543,3.803,544,3.803,545,3.803,546,3.803,547,3.803,548,3.803,549,3.803,550,3.38,551,3.803,552,3.803]],["title/modules/CategoriesModule.html",[69,1.007,77,3.32]],["body/modules/CategoriesModule.html",[0,0.14,3,0.075,4,0.075,5,0.075,14,0.007,20,0.256,24,0.084,26,0.005,27,0.005,56,2.012,62,0.655,69,1.611,71,2.011,72,2.968,77,6.46,101,3.112,102,2.456,103,2.456,105,2.901,106,2.19,504,6.184,516,3.369,532,6.132,533,4.447,553,5.196,554,5.196,555,5.846,556,5.196,557,3.253,558,2.343,559,5.196,560,5.846]],["title/injectables/CategoriesService.html",[255,0.748,532,3.151]],["body/injectables/CategoriesService.html",[0,0.066,3,0.035,4,0.035,5,0.056,10,0.18,11,0.826,13,0.432,14,0.007,18,0.574,20,0.213,24,0.04,26,0.003,27,0.003,35,2.629,37,1.063,42,2.518,50,1.029,58,0.857,61,1.424,62,0.308,67,1.38,111,1.235,112,0.909,242,2.161,255,0.698,256,0.854,278,1.566,321,0.821,323,2.102,324,2.624,354,3.098,459,2.482,460,2,506,4.119,507,3.84,508,5.379,509,5.379,510,3.84,511,3.84,512,3.84,513,4.34,516,5.134,526,5.24,530,1.97,532,2.941,537,1.39,538,3.287,540,2.09,558,1.101,559,2.442,561,2.442,562,4.32,563,2.748,564,4.32,565,2.748,566,5.697,567,4.32,568,6.208,569,2.09,570,3.523,571,4.32,572,4.32,573,2.748,574,4.34,575,2.748,576,6.052,577,6.052,578,4.32,579,2.748,580,4.32,581,6.052,582,5.339,583,4.32,584,2.748,585,6.052,586,4.32,587,4.32,588,1.529,589,2.253,590,2.09,591,2.748,592,2.442,593,2.748,594,2.442,595,2.748,596,2.748,597,2.748,598,2.748,599,3.634,600,4.32,601,3.098,602,5.339,603,4.32,604,2.748,605,2.748,606,2.748,607,2.748,608,5.339,609,2.442,610,2.748,611,2.442,612,2.748,613,2.748]],["title/entities/Category.html",[28,1.773,516,2.668]],["body/entities/Category.html",[0,0.128,3,0.069,4,0.069,5,0.069,10,0.35,11,1.336,13,0.511,14,0.007,15,1.287,16,1.574,18,0.639,20,0.203,24,0.077,25,1.099,26,0.005,27,0.005,28,2.044,30,2.701,32,3.861,35,2.519,39,4.332,42,2.129,43,4.332,50,2,52,2.873,112,1.075,293,3.082,506,3.633,516,4.486,599,5.299,614,4.744,615,5.338,616,5.338,617,4.744,618,6.985,619,5.338,620,6.208,621,4.353]],["title/classes/CategoryNotFoundException.html",[0,0.111,590,3.522]],["body/classes/CategoryNotFoundException.html",[0,0.149,2,1.89,3,0.08,4,0.08,5,0.08,13,0.407,14,0.007,18,0.509,20,0.18,24,0.09,25,1.277,26,0.006,27,0.006,35,2.006,37,1.001,42,2.546,62,0.694,111,1.164,112,0.856,320,1.818,590,6.353,622,6.83,623,5.056,624,3.671,625,5.988,626,6.266,627,5.511,628,5.51,629,6.201,630,5.056]],["title/controllers/ChargeController.html",[54,1.235,631,3.522]],["body/controllers/ChargeController.html",[0,0.128,3,0.069,4,0.069,5,0.069,10,0.349,13,0.349,14,0.007,16,1.075,18,0.437,20,0.249,24,0.077,26,0.005,27,0.005,37,0.859,54,1.418,56,1.445,58,1.383,61,1.036,62,0.596,65,2.29,66,1.473,67,1.116,111,0.999,112,0.735,242,1.96,263,2.29,271,4.053,274,3.52,278,1.56,290,2.541,293,2.397,294,3.634,296,2.473,305,2.541,307,2.863,308,2.348,360,2.541,514,3.814,537,2.691,539,2.691,631,5.302,632,4.728,633,6.908,634,6.969,635,5.319,636,6.275,637,5.319,638,4.479,639,3.814,640,5.319,641,3.065,642,5.319,643,5.319,644,5.319,645,5.319,646,4.728]],["title/modules/ChargeModule.html",[69,1.007,78,3.32]],["body/modules/ChargeModule.html",[0,0.146,3,0.078,4,0.078,5,0.078,14,0.007,20,0.241,24,0.088,26,0.006,27,0.006,56,2.062,62,0.681,69,1.651,71,2.091,72,3.042,78,6.524,101,3.189,102,2.554,103,2.554,106,2.843,631,6.296,647,5.402,648,5.402,649,5.441,650,6.078,651,6.078,652,4.358]],["title/classes/ChatGateway.html",[0,0.111,653,3.522]],["body/classes/ChatGateway.html",[0,0.097,2,1.233,3,0.052,4,0.052,5,0.052,10,0.265,11,1.105,13,0.51,14,0.007,15,1.242,16,1.362,18,0.638,20,0.196,24,0.058,26,0.004,27,0.004,37,1.187,58,1.146,61,1.313,65,1.741,66,1.12,111,1.38,112,1.015,242,2.184,320,1.186,323,1.938,324,2.619,480,3.012,653,4.394,654,3.594,655,3.454,656,6.737,657,6.592,658,5.775,659,5.775,660,5.775,661,4.044,662,5.502,663,5.775,664,6.737,665,5.775,666,8.209,667,4.044,668,4.044,669,5.775,670,4.044,671,3.328,672,4.044,673,5.775,674,4.044,675,5.775,676,4.044,677,4.044,678,5.775,679,3.298,680,3.298,681,3.594,682,6.737,683,4.044,684,3.109,685,4.044,686,4.044,687,4.044,688,5.133,689,4.044,690,4.044]],["title/modules/ChatModule.html",[69,1.007,79,3.32]],["body/modules/ChatModule.html",[0,0.137,3,0.073,4,0.073,5,0.073,14,0.007,20,0.26,24,0.082,26,0.005,27,0.005,62,0.638,69,1.585,71,1.959,72,2.919,76,5.811,79,6.604,101,3.06,102,2.392,103,2.392,105,2.853,106,2.728,122,4.644,557,3.168,558,2.282,653,5.541,662,6.09,681,5.061,684,3.065,691,5.061,692,5.694,693,5.061,694,5.694,695,5.061,696,5.694,697,5.694]],["title/injectables/ChatService.html",[255,0.748,662,3.151]],["body/injectables/ChatService.html",[0,0.097,3,0.052,4,0.052,5,0.052,10,0.265,13,0.441,14,0.007,15,1.24,18,0.603,20,0.252,24,0.058,26,0.004,27,0.004,37,1.087,38,2.983,50,1.511,58,1.144,61,1.311,62,0.452,66,1.117,67,1.411,111,1.263,112,0.929,242,2.182,255,0.931,256,1.254,264,2.619,278,1.973,300,4.654,320,1.691,321,1.724,323,2.112,324,2.267,343,3.744,459,1.875,460,1.511,473,3.289,480,4.049,489,2.171,558,1.616,588,2.244,589,3.828,601,2.892,662,3.924,666,6.901,671,3.322,679,3.289,680,3.289,684,2.171,695,3.584,698,3.584,699,7.34,700,5.765,701,5.765,702,3.584,703,6.727,704,4.033,705,4.033,706,5.765,707,4.033,708,5.765,709,4.033,710,3.584,711,3.289,712,4.033,713,4.033,714,5.765,715,4.033,716,4.033,717,4.033,718,4.033,719,4.033,720,4.033,721,4.033,722,4.033,723,4.033]],["title/classes/CheckVerificationCodeDto.html",[0,0.111,724,3.522]],["body/classes/CheckVerificationCodeDto.html",[0,0.185,2,1.906,3,0.081,4,0.081,5,0.081,10,0.41,11,1.477,13,0.41,14,0.007,15,1.423,16,1.264,17,3.163,18,0.513,20,0.182,21,3.69,22,3.69,23,2.626,24,0.112,25,1.287,26,0.006,27,0.006,724,6.376,725,6.864,726,6.298,727,5.098,728,6.376,729,5.556]],["title/entities/Comment.html",[28,1.773,730,2.769]],["body/entities/Comment.html",[0,0.116,3,0.062,4,0.062,5,0.062,10,0.317,11,1.25,13,0.521,14,0.007,15,1.205,16,1.605,18,0.652,20,0.215,24,0.07,25,0.995,26,0.005,27,0.005,28,1.851,30,2.445,32,3.891,35,2.397,38,2.975,39,4.123,42,1.993,43,4.123,50,1.811,52,2.602,293,3.133,480,4.325,489,2.602,621,3.942,671,4.27,730,4.431,731,4.296,732,4.974,733,5.811,734,4.833,735,4.833,736,4.833,737,6.538,738,4.833,739,5.313,740,3.942]],["title/controllers/CommentsController.html",[54,1.235,741,3.522]],["body/controllers/CommentsController.html",[0,0.105,3,0.056,4,0.056,5,0.056,10,0.286,13,0.4,14,0.007,16,1.232,18,0.501,20,0.252,24,0.063,26,0.004,27,0.004,37,0.985,38,2.187,54,1.164,56,1.186,58,1.21,61,1.188,62,0.489,65,1.88,67,1.279,111,1.145,112,0.842,242,2.09,263,1.88,271,3.737,278,1.788,290,2.086,291,2.516,293,2.097,294,4.172,296,2.03,297,2.35,305,2.086,307,2.35,308,1.927,319,2.516,321,1.305,323,1.256,360,2.086,460,2.284,514,3.13,537,2.209,539,2.209,628,3.13,641,2.516,730,3.646,740,3.56,741,4.638,742,3.88,743,6.097,744,6.097,745,4.366,746,5.452,747,4.366,748,4.366,749,5.785,750,4.366,751,3.13,752,7.025,753,7.025,754,3.13,755,3.88,756,3.13,757,4.366,758,3.88,759,4.366,760,4.366,761,3.13,762,4.366,763,3.88,764,4.366,765,4.366,766,3.88,767,6.097,768,4.972,769,4.366,770,4.366,771,4.366,772,4.366,773,4.366]],["title/modules/CommentsModule.html",[69,1.007,80,3.32]],["body/modules/CommentsModule.html",[0,0.146,3,0.079,4,0.079,5,0.079,14,0.007,20,0.269,24,0.088,26,0.006,27,0.006,56,2.067,62,0.683,69,1.655,71,2.099,80,5.455,105,2.39,106,2.286,557,3.395,558,2.445,730,3.649,741,6.307,754,4.375,774,6.102,775,6.102,776,7.608,777,5.788,778,6.102,779,6.102,780,4.976,781,5.788,782,6.102,783,6.102,784,6.102]],["title/classes/ConfirmEmailDto.html",[0,0.111,785,3.522]],["body/classes/ConfirmEmailDto.html",[0,0.185,2,1.906,3,0.081,4,0.081,5,0.081,10,0.41,11,1.477,13,0.41,14,0.007,15,1.423,16,1.264,17,3.163,18,0.513,20,0.182,21,3.69,22,3.69,23,2.626,24,0.112,25,1.287,26,0.006,27,0.006,345,4.663,785,6.376,786,4.297,787,6.864,788,5.556,789,6.251]],["title/classes/CreateCategoryDto.html",[0,0.111,513,3.32]],["body/classes/CreateCategoryDto.html",[0,0.188,2,1.945,3,0.082,4,0.082,5,0.082,10,0.419,11,1.496,13,0.419,14,0.007,15,1.441,16,1.29,17,3.228,18,0.524,20,0.186,21,3.737,22,3.737,23,2.681,24,0.092,25,1.314,26,0.006,27,0.006,112,1.168,513,6.065,790,6.951,791,4.854,792,5.204]],["title/classes/CreateChargeDto.html",[0,0.111,636,3.522]],["body/classes/CreateChargeDto.html",[0,0.18,2,1.824,3,0.077,4,0.077,5,0.077,10,0.393,11,1.437,12,6.251,13,0.493,14,0.007,15,1.385,16,1.519,17,3.027,18,0.617,20,0.174,21,3.591,22,3.591,23,2.514,24,0.109,25,1.232,26,0.006,27,0.006,42,2.291,636,6.251,793,7.302,794,5.317,795,7.302,796,5.891,797,5.983,798,5.983]],["title/classes/CreateCommentCommand.html",[0,0.111,756,3.32]],["body/classes/CreateCommentCommand.html",[0,0.132,2,1.68,3,0.071,4,0.071,5,0.071,10,0.362,11,1.364,13,0.519,14,0.007,18,0.649,20,0.207,24,0.08,26,0.005,27,0.005,32,3.727,37,0.89,38,3.106,66,2.456,111,1.034,112,0.761,320,2.091,480,4.515,489,2.966,537,2.788,730,5,746,6.209,755,4.897,756,5.113,799,7.43,800,4.897,801,5.51,802,5.51,803,5.51,804,5.51]],["title/classes/CreateCommentDto.html",[0,0.111,746,3.32]],["body/classes/CreateCommentDto.html",[0,0.193,2,1.749,3,0.074,4,0.074,5,0.074,10,0.376,11,1.4,13,0.557,14,0.007,15,1.349,16,1.479,17,2.902,18,0.601,20,0.234,21,3.496,22,3.496,23,2.41,24,0.106,25,1.181,26,0.005,27,0.005,35,1.856,293,2.772,671,4.643,746,5.778,805,7.162,806,5.099,807,5.737,808,6.086,809,5.099,810,5.737,811,6.504,812,3.726,813,5.099]],["title/classes/CreateCommentHandler.html",[0,0.111,777,3.522]],["body/classes/CreateCommentHandler.html",[0,0.124,2,1.578,3,0.067,4,0.067,5,0.067,10,0.34,13,0.449,14,0.007,18,0.562,20,0.247,24,0.075,26,0.005,27,0.005,37,1.105,50,1.939,58,1.358,61,1.008,67,1.085,111,1.285,112,0.945,242,1.934,278,1.518,320,1.518,321,1.547,323,1.489,324,2.306,480,2.699,558,2.074,588,2.88,589,4.255,655,4.093,730,3.095,754,3.711,756,5.851,758,4.6,777,5.207,780,4.221,814,6.816,815,4.6,816,7.669,817,6.083,818,4.6,819,5.176,820,6.083,821,6.845,822,5.176,823,5.176,824,5.176,825,5.176,826,5.176,827,4.6,828,5.582,829,5.176,830,5.176,831,5.176,832,5.176]],["title/classes/CreateLogDto.html",[0,0.111,833,3.522]],["body/classes/CreateLogDto.html",[0,0.146,2,1.86,3,0.079,4,0.079,5,0.079,10,0.4,11,1.455,13,0.544,14,0.007,15,1.678,18,0.681,24,0.11,25,1.256,26,0.006,27,0.006,684,4.462,833,6.307,834,7.714,835,5.423,836,5.159,837,6.307,838,6.102,839,6.102,840,6.102]],["title/classes/CreatePostDto.html",[0,0.111,841,3.32]],["body/classes/CreatePostDto.html",[0,0.173,2,1.717,3,0.073,4,0.073,5,0.073,10,0.37,11,1.383,13,0.524,14,0.007,15,1.553,16,1.615,17,3.659,18,0.656,20,0.164,21,3.817,22,3.817,23,2.366,24,0.081,25,1.16,26,0.005,27,0.005,37,1.168,506,5.437,671,4.603,841,5.728,842,7.491,843,4.592,844,6.077,845,5.897,846,5.437,847,5.632,848,5.005,849,5.632]],["title/classes/CreatePostInput.html",[0,0.111,850,3.522]],["body/classes/CreatePostInput.html",[0,0.138,2,1.749,3,0.074,4,0.074,5,0.074,10,0.376,11,1.4,13,0.529,14,0.007,15,1.616,16,1.629,18,0.662,20,0.167,24,0.083,26,0.005,27,0.005,37,1.182,142,3.726,178,3.596,482,5.099,486,7.543,671,4.643,844,6.13,850,5.567,851,5.099,852,7.162,853,5.737,854,4.753,855,7.318,856,5.737,857,5.737,858,7.318]],["title/classes/CreateProductCategoryDto.html",[0,0.111,859,3.32]],["body/classes/CreateProductCategoryDto.html",[0,0.184,2,1.89,3,0.08,4,0.08,5,0.08,10,0.407,11,1.47,13,0.407,14,0.007,15,1.416,16,1.253,17,3.137,18,0.509,20,0.18,21,3.671,22,3.671,23,2.605,24,0.111,25,1.277,26,0.006,27,0.006,112,1.153,130,4.136,791,4.717,792,5.056,859,5.988,860,5.23,861,6.83]],["title/classes/CreateProductDto.html",[0,0.111,862,3.32]],["body/classes/CreateProductDto.html",[0,0.193,2,1.749,3,0.074,4,0.074,5,0.074,10,0.376,11,1.4,13,0.557,14,0.007,15,1.349,16,1.479,17,2.902,18,0.601,20,0.234,21,3.496,22,3.496,23,2.41,24,0.106,25,1.181,26,0.005,27,0.005,35,1.856,112,1.113,516,4.643,808,6.086,809,5.099,811,6.504,812,3.726,813,5.099,862,5.778,863,7.162,864,5.099,865,5.737,866,5.737]],["title/classes/CreateSubscriberDto.html",[0,0.111,867,3.151]],["body/classes/CreateSubscriberDto.html",[0,0.152,2,1.937,3,0.082,4,0.082,5,0.082,10,0.417,11,1.492,13,0.512,14,0.007,15,1.622,18,0.641,24,0.113,25,1.308,26,0.006,27,0.006,112,1.166,137,3.163,867,5.746,868,7.503,869,5.648,870,6.355,871,6.355]],["title/classes/CreateUserDto.html",[0,0.111,872,3.522]],["body/classes/CreateUserDto.html",[0,0.146,2,1.86,3,0.079,4,0.079,5,0.079,10,0.4,11,1.455,13,0.544,14,0.007,15,1.678,18,0.681,24,0.11,25,1.256,26,0.006,27,0.006,112,1.145,137,3.106,250,4.613,872,6.307,873,7.714,874,5.423,875,6.102,876,6.102,877,6.102]],["title/controllers/CreditCardsController.html",[54,1.235,878,3.522]],["body/controllers/CreditCardsController.html",[0,0.097,1,5.584,3,0.052,4,0.052,5,0.052,6,5.263,8,4.369,10,0.265,13,0.441,14,0.007,16,1.36,18,0.553,20,0.242,24,0.058,25,0.83,26,0.004,27,0.004,37,1.087,54,1.075,56,1.096,58,1.144,61,1.311,62,0.452,65,1.736,66,1.117,67,1.209,111,1.263,112,0.929,137,1.511,157,5.584,242,2.182,263,1.736,271,4.315,274,3.851,278,1.691,290,1.927,292,3.289,293,1.983,294,3.508,296,1.875,305,1.927,307,2.171,308,1.78,324,1.359,335,3.289,360,3.214,539,2.04,638,3.876,639,2.892,641,2.324,646,5.123,878,4.385,879,3.584,880,5.765,881,5.765,882,5.765,883,5.765,884,4.033,885,3.289,886,4.033,887,7.34,888,4.033,889,3.584,890,4.033,891,4.033,892,5.584,893,4.033,894,4.033,895,4.033,896,5.765,897,4.033,898,2.619,899,2.745,900,3.068,901,4.033,902,3.068,903,4.033,904,4.033,905,4.033,906,4.033,907,4.033,908,4.033,909,4.033]],["title/modules/CreditCardsModule.html",[69,1.007,81,3.32]],["body/modules/CreditCardsModule.html",[0,0.144,3,0.077,4,0.077,5,0.077,6,4.307,8,3.901,14,0.007,20,0.239,24,0.087,26,0.006,27,0.006,56,2.047,62,0.673,69,1.639,71,2.066,72,3.019,81,6.504,101,3.165,102,2.524,103,2.524,106,2.822,157,4.569,649,5.425,652,4.307,878,6.262,910,6.006,911,6.006,912,6.006,913,6.006]],["title/injectables/CustomLogger.html",[255,0.748,914,3.32]],["body/injectables/CustomLogger.html",[0,0.069,3,0.037,4,0.037,5,0.037,10,0.188,11,0.855,13,0.487,14,0.007,15,1.74,18,0.61,20,0.195,24,0.041,25,0.591,26,0.003,27,0.003,37,1.149,58,0.887,61,1.309,62,0.322,66,1.521,111,1.336,112,0.983,114,4.573,116,3.198,117,1.052,255,0.722,256,0.893,320,1.311,321,1.642,323,0.826,454,4.255,624,2.136,684,4.656,836,5.895,837,5.111,914,3.938,915,6.828,916,2.552,917,5.492,918,5.76,919,4.471,920,3.857,921,4.471,922,3.974,923,2.871,924,4.445,925,6.199,926,4.471,927,4.471,928,2.871,929,5.413,930,4.471,931,6.199,932,2.871,933,4.471,934,2.871,935,4.471,936,2.871,937,4.471,938,2.871,939,2.871,940,2.871,941,2.341,942,2.871,943,2.871,944,2.552,945,2.871,946,2.871,947,2.059,948,2.871,949,2.871,950,2.552,951,2.871,952,2.871,953,6.718,954,6.718,955,2.871,956,2.871,957,4.471]],["title/classes/DatabaseLogger.html",[0,0.111,958,3.522]],["body/classes/DatabaseLogger.html",[0,0.069,2,0.874,3,0.086,4,0.037,5,0.037,10,0.188,11,0.854,13,0.487,14,0.007,15,1.662,18,0.631,20,0.13,24,0.041,25,0.919,26,0.003,27,0.003,37,1.199,42,1.672,50,1.073,58,0.886,61,1.446,62,0.321,66,1.519,67,1.654,111,1.684,112,1.025,114,4.569,278,1.816,321,2.126,416,1.651,448,1.714,453,1.714,454,2.67,460,1.672,655,2.67,684,3.613,751,5.506,837,4.711,920,4.424,922,5.504,929,5.841,958,4.173,959,2.547,960,5.485,961,4.813,962,4.465,963,4.465,964,4.465,965,4.465,966,4.465,967,4.465,968,4.465,969,2.866,970,4.465,971,7.482,972,2.866,973,4.465,974,2.866,975,4.465,976,2.866,977,4.465,978,2.866,979,4.465,980,2.866,981,3.968,982,4.465,983,2.866,984,4.465,985,2.866,986,2.866,987,6.193,988,2.866,989,5.485,990,2.866,991,2.866,992,4.875,993,2.866,994,2.547,995,2.866]],["title/modules/DatabaseModule.html",[69,1.007,82,3.32]],["body/modules/DatabaseModule.html",[0,0.131,3,0.07,4,0.07,5,0.07,13,0.358,14,0.007,20,0.251,24,0.079,26,0.005,27,0.005,30,3.583,50,2.042,62,0.611,69,1.541,71,1.875,82,5.078,106,2.653,115,3.812,116,3.585,117,1.998,178,3.48,231,3.033,232,3.541,244,3.711,246,3.711,248,4.446,250,3.033,460,2.653,557,3.033,558,2.185,568,4.845,958,5.387,961,3.909,996,5.452,997,7.082,998,4.845,999,4.845,1000,5.452,1001,5.452,1002,5.452,1003,5.452,1004,5.452,1005,5.452,1006,5.452,1007,5.452,1008,7.082,1009,7.082,1010,5.452,1011,5.452,1012,5.452,1013,5.452]],["title/injectables/ElasticsearchHealthIndicator.html",[255,0.748,1014,3.32]],["body/injectables/ElasticsearchHealthIndicator.html",[0,0.122,3,0.065,4,0.065,5,0.065,10,0.333,13,0.443,14,0.007,15,1.399,18,0.555,20,0.221,24,0.073,26,0.005,27,0.005,37,1.091,58,1.34,61,0.988,62,0.568,65,2.184,66,1.405,67,1.064,111,1.268,112,0.933,178,2.493,242,1.914,255,1.091,256,1.577,320,1.488,324,1.709,418,3.638,448,3.034,453,3.034,454,3.034,459,2.359,460,1.9,574,4.843,624,3.227,947,3.638,1014,5.444,1015,6.748,1016,5.776,1017,4.509,1018,7.593,1019,6.754,1020,5.073,1021,8.67,1022,5.073,1023,6.754,1024,5.073,1025,3.638,1026,5.073,1027,6.754,1028,3.859,1029,4.509,1030,5.073,1031,6.754,1032,5.073]],["title/controllers/EmailConfirmationController.html",[54,1.235,1033,3.522]],["body/controllers/EmailConfirmationController.html",[0,0.113,3,0.061,4,0.061,5,0.061,10,0.309,13,0.422,14,0.007,16,1.3,18,0.528,20,0.239,24,0.068,26,0.005,27,0.005,37,1.038,54,1.257,56,1.281,58,1.276,61,1.252,62,0.528,65,2.03,66,1.306,111,1.207,112,0.888,137,2.74,163,4.751,242,2.14,263,2.03,271,3.861,274,2.911,290,2.253,293,1.622,294,2.459,296,2.192,305,2.253,307,2.538,308,2.081,314,4.751,315,3.845,323,1.356,324,2.465,331,4.891,360,2.253,539,2.385,641,2.717,785,5.977,786,4.07,1033,4.891,1034,4.19,1035,6.983,1036,5.714,1037,4.715,1038,6.429,1039,4.715,1040,6.429,1041,4.715,1042,6.429,1043,4.715,1044,4.715,1045,4.715,1046,4.715,1047,4.19,1048,4.715,1049,4.715,1050,4.715,1051,4.715,1052,4.715,1053,4.715]],["title/guards/EmailConfirmationGuard.html",[898,3.007,1054,3.775]],["body/guards/EmailConfirmationGuard.html",[0,0.136,3,0.073,4,0.073,5,0.073,10,0.371,13,0.371,14,0.007,18,0.464,20,0.211,24,0.082,26,0.005,27,0.005,37,0.913,58,1.439,61,1.101,62,0.633,67,1.185,111,1.061,112,0.781,137,2.117,178,2.778,255,1.171,271,3.562,274,2.56,307,3.042,323,1.626,459,2.628,460,2.117,641,3.257,655,3.38,786,4.033,836,3.517,898,4.708,899,4.934,1055,5.652,1056,5.024,1057,8.441,1058,7.249,1059,6.421,1060,5.652,1061,4.3,1062,4.3,1063,5.024,1064,5.652,1065,5.652,1066,5.652]],["title/modules/EmailConfirmationModule.html",[69,1.007,83,3.151]],["body/modules/EmailConfirmationModule.html",[0,0.122,3,0.065,4,0.065,5,0.065,14,0.007,20,0.257,24,0.073,26,0.005,27,0.005,56,1.835,62,0.568,69,1.469,71,1.745,72,2.707,83,6.308,84,5.631,100,4.996,101,2.838,102,2.131,103,2.131,105,2.646,106,2.53,115,3.635,117,1.859,121,3.453,134,4.137,137,2.53,163,3.295,314,6.06,315,4.137,379,4.039,385,4.137,386,3.295,786,2.823,1033,5.776,1067,4.509,1068,4.509,1069,5.073,1070,4.509,1071,5.073,1072,5.073,1073,4.509]],["title/injectables/EmailConfirmationService.html",[255,0.748,314,3.007]],["body/injectables/EmailConfirmationService.html",[0,0.072,3,0.038,4,0.038,5,0.038,10,0.196,13,0.449,14,0.007,15,1.472,18,0.562,20,0.21,24,0.043,26,0.003,27,0.003,29,1.941,32,3.542,37,1.105,38,1.655,42,1.717,58,0.915,61,1.234,62,0.335,66,1.754,67,0.967,111,1.285,112,0.945,116,3.245,117,1.095,137,2.916,163,4.697,242,2.014,255,0.745,256,0.929,278,0.876,310,3.327,311,1.558,314,2.996,320,1.353,321,1.894,323,2.24,324,2.306,328,2.656,331,3.509,345,3.808,386,1.941,394,3.307,397,2.437,407,5.898,417,2.143,432,2.143,433,4.311,434,2.656,448,1.787,453,1.787,454,1.787,459,3.182,460,2.564,462,3.307,469,2.437,475,2.656,786,4.024,845,2.437,1035,5.006,1036,4.099,1074,2.656,1075,4.612,1076,4.612,1077,4.612,1078,2.988,1079,4.896,1080,2.988,1081,4.612,1082,2.988,1083,4.612,1084,2.988,1085,4.612,1086,2.988,1087,4.612,1088,2.988,1089,2.996,1090,3.509,1091,2.988,1092,2.656,1093,4.612,1094,2.988,1095,3.307,1096,2.988,1097,2.988,1098,2.988,1099,4.612,1100,2.988,1101,2.988,1102,2.656,1103,2.656,1104,2.437,1105,2.988,1106,4.612,1107,5.633,1108,4.099,1109,2.988,1110,2.988,1111,2.988,1112,2.988,1113,2.988,1114,2.988,1115,2.988,1116,2.988]],["title/modules/EmailModule.html",[69,1.007,84,3.007]],["body/modules/EmailModule.html",[0,0.141,3,0.076,4,0.076,5,0.076,14,0.007,20,0.237,24,0.085,26,0.005,27,0.005,62,0.657,69,1.615,71,2.019,72,2.975,84,5.948,101,3.119,102,2.466,103,2.466,105,2.908,106,2.198,115,3.996,117,2.151,379,4.44,1079,6.189,1117,5.216,1118,5.216,1119,5.216,1120,5.869,1121,5.869]],["title/classes/EmailScheduleDto.html",[0,0.111,1122,3.32]],["body/classes/EmailScheduleDto.html",[0,0.165,2,1.594,3,0.067,4,0.067,5,0.067,10,0.343,11,1.318,13,0.538,14,0.007,15,1.667,16,1.656,17,3.486,18,0.673,20,0.152,21,3.682,22,3.682,23,2.197,24,0.1,25,1.077,26,0.005,27,0.005,671,4.441,786,4.738,854,5.006,1104,6.285,1122,5.527,1123,7.567,1124,4.647,1125,7.707,1126,5.229,1127,7.707,1128,5.229,1129,6.85,1130,5.229,1131,5.229]],["title/controllers/EmailSchedulingController.html",[54,1.235,1132,3.522]],["body/controllers/EmailSchedulingController.html",[0,0.132,3,0.071,4,0.071,5,0.071,10,0.36,13,0.36,14,0.007,16,1.11,18,0.451,20,0.243,24,0.079,26,0.005,27,0.005,37,0.887,54,1.464,56,1.492,58,1.412,61,1.07,62,0.615,65,2.364,66,1.52,111,1.031,112,0.758,137,2.665,138,5.101,242,1.99,263,2.364,290,2.623,293,1.889,296,2.553,305,2.623,308,2.424,360,2.623,539,2.778,786,3.958,1047,4.88,1122,5.986,1132,5.412,1133,4.88,1134,7.114,1135,6.323,1136,4.88,1137,5.491,1138,5.491,1139,6.323,1140,5.372,1141,4.88,1142,4.88,1143,4.88,1144,5.491,1145,5.491,1146,5.491]],["title/modules/EmailSchedulingModule.html",[69,1.007,85,3.32]],["body/modules/EmailSchedulingModule.html",[0,0.135,3,0.073,4,0.073,5,0.073,14,0.007,20,0.245,24,0.081,26,0.005,27,0.005,56,1.965,62,0.631,69,1.573,71,1.937,72,2.898,84,5.795,85,6.59,101,3.038,102,2.366,103,2.366,105,2.833,106,2.709,134,4.592,137,2.709,138,4.038,786,3.133,1132,6.077,1140,6.073,1141,5.005,1147,5.005,1148,5.632,1149,5.005,1150,5.632,1151,5.632]],["title/injectables/EmailSchedulingService.html",[255,0.748,1140,3.151]],["body/injectables/EmailSchedulingService.html",[0,0.095,3,0.051,4,0.051,5,0.051,10,0.261,13,0.375,14,0.007,16,1.35,18,0.635,20,0.225,24,0.058,26,0.004,27,0.004,37,0.922,58,1.133,61,1.422,62,0.446,66,1.581,111,1.072,112,0.789,114,4.967,136,3.246,138,5.766,255,0.922,256,1.238,260,3.538,320,1.675,321,1.708,323,1.643,460,2.139,786,4.474,854,2.585,1079,5.223,1092,3.538,1103,3.538,1104,3.246,1122,5.232,1135,5.076,1136,5.076,1139,3.538,1140,3.887,1142,3.538,1143,3.538,1152,3.538,1153,7.297,1154,7.297,1155,7.297,1156,3.981,1157,8.282,1158,3.981,1159,7.297,1160,3.981,1161,5.711,1162,3.981,1163,5.711,1164,3.981,1165,3.981,1166,3.981,1167,3.981,1168,3.981,1169,3.981,1170,5.711,1171,5.711,1172,3.981,1173,3.981,1174,4.657,1175,3.981,1176,3.981,1177,5.711,1178,3.538,1179,3.981,1180,3.981,1181,3.981]],["title/injectables/EmailService.html",[255,0.748,1079,3.007]],["body/injectables/EmailService.html",[0,0.12,3,0.065,4,0.065,5,0.065,10,0.33,11,1.283,13,0.496,14,0.007,18,0.621,20,0.234,24,0.073,26,0.005,27,0.005,37,1.084,38,1.802,58,1.332,61,0.979,62,0.563,65,2.163,66,1.391,67,1.053,111,1.26,112,0.927,116,3.722,117,1.841,178,2.468,244,3.419,246,3.419,255,1.084,256,1.562,320,1.473,321,2.259,418,3.602,768,4.096,924,3.602,1079,4.358,1182,4.464,1183,7.556,1184,6.71,1185,3.419,1186,6.71,1187,6.71,1188,7.556,1189,5.023,1190,7.556,1191,6.71,1192,4.464,1193,5.023,1194,5.023,1195,5.023,1196,5.023,1197,5.023,1198,5.023,1199,5.023,1200,4.464,1201,5.023,1202,5.023,1203,5.023,1204,5.023]],["title/injectables/ExcludeNullInterceptor.html",[255,0.748,1205,3.775]],["body/injectables/ExcludeNullInterceptor.html",[0,0.132,3,0.071,4,0.071,5,0.071,10,0.36,13,0.36,14,0.007,18,0.451,20,0.243,24,0.079,26,0.005,27,0.005,37,0.887,58,1.412,61,1.07,62,0.615,67,1.151,111,1.031,112,0.758,255,1.149,256,1.707,655,3.283,836,3.416,1059,6.351,1205,5.802,1206,6.323,1207,4.88,1208,7.114,1209,7.114,1210,7.42,1211,8.349,1212,5.491,1213,7.892,1214,7.114,1215,4.88,1216,5.491,1217,5.491,1218,4.477,1219,5.491,1220,4.477,1221,3.566,1222,5.491,1223,4.88,1224,5.491,1225,4.88]],["title/modules/FilesModule.html",[69,1.007,86,3.151]],["body/modules/FilesModule.html",[0,0.135,3,0.073,4,0.073,5,0.073,14,0.007,20,0.254,24,0.081,26,0.005,27,0.005,62,0.631,69,1.573,71,1.937,72,2.898,86,6.176,101,3.038,102,2.366,103,2.366,105,2.833,106,2.11,379,4.325,557,3.133,558,2.257,1226,5.005,1227,5.005,1228,5.005,1229,6.449,1230,5.632,1231,5.632,1232,3.833,1233,5.005,1234,5.897,1235,4.922,1236,5.005,1237,5.632]],["title/injectables/FilesService.html",[255,0.748,1229,3.151]],["body/injectables/FilesService.html",[0,0.06,3,0.051,4,0.032,5,0.064,10,0.163,11,0.762,13,0.461,14,0.007,15,1.388,18,0.6,20,0.212,24,0.036,26,0.003,27,0.003,32,2.95,35,1.289,37,1.134,42,2.452,50,0.929,58,0.791,61,1.302,62,0.278,66,1.582,67,1.198,111,1.318,112,0.97,116,3.023,117,0.909,242,2.176,255,0.643,256,0.771,278,1.676,290,1.903,320,1.168,321,2.099,323,2.167,324,2.71,459,1.154,460,1.87,558,0.994,574,4.097,588,1.38,589,3.661,601,1.779,625,2.856,971,5.725,1025,5.541,1095,1.779,1229,2.712,1232,1.689,1233,2.205,1234,3.249,1235,1.689,1236,2.205,1238,2.205,1239,7.021,1240,3.984,1241,3.984,1242,3.984,1243,3.249,1244,3.984,1245,3.984,1246,2.481,1247,4.991,1248,3.984,1249,3.984,1250,3.984,1251,2.481,1252,6.24,1253,3.984,1254,2.481,1255,3.984,1256,2.481,1257,3.984,1258,2.481,1259,3.984,1260,5.083,1261,5.714,1262,6.487,1263,2.481,1264,5.714,1265,3.984,1266,2.481,1267,2.481,1268,5.078,1269,2.205,1270,2.481,1271,2.481,1272,2.481,1273,2.481,1274,2.481,1275,2.481,1276,2.481,1277,2.481,1278,2.481,1279,2.481,1280,2.481,1281,2.481,1282,3.984,1283,3.984,1284,6.681,1285,6.681,1286,3.984,1287,2.205,1288,5.714,1289,2.481,1290,3.984,1291,2.481,1292,2.481,1293,2.481,1294,2.481,1295,3.984,1296,2.481,1297,2.481,1298,2.481,1299,2.481,1300,2.481,1301,3.541,1302,2.481,1303,4.991,1304,2.481,1305,3.249,1306,2.481,1307,2.481,1308,2.481,1309,2.481,1310,2.481,1311,3.984,1312,2.481]],["title/classes/FindOneParams.html",[0,0.111,518,3.151]],["body/classes/FindOneParams.html",[0,0.187,2,1.929,3,0.082,4,0.082,5,0.082,10,0.415,11,1.488,13,0.415,14,0.007,15,1.434,16,1.279,18,0.52,20,0.184,23,2.659,24,0.091,25,1.303,26,0.006,27,0.006,35,2.727,518,5.736,535,5.58,1313,6.916,1314,5.161,1315,8.427,1316,6.328]],["title/classes/GetCommentsDto.html",[0,0.111,749,3.522]],["body/classes/GetCommentsDto.html",[0,0.2,2,1.89,3,0.08,4,0.08,5,0.08,10,0.407,11,1.47,13,0.548,14,0.007,16,1.253,18,0.509,20,0.223,23,2.605,24,0.09,25,1.277,26,0.006,27,0.006,37,1.241,42,2.546,628,5.988,749,6.353,812,4.027,846,5.23,1317,6.83,1318,5.511,1319,6.201,1320,6.201]],["title/classes/GetCommentsHandler.html",[0,0.111,781,3.522]],["body/classes/GetCommentsHandler.html",[0,0.124,2,1.578,3,0.067,4,0.067,5,0.067,10,0.34,13,0.449,14,0.007,18,0.562,20,0.247,24,0.075,26,0.005,27,0.005,35,1.675,37,1.105,50,1.939,58,1.358,61,1.008,67,1.435,111,1.285,112,0.945,242,1.934,278,1.518,293,1.78,320,1.518,321,1.547,558,2.074,588,2.88,589,4.255,655,4.093,730,3.095,751,3.711,754,3.711,761,5.851,763,4.6,780,4.221,781,5.207,817,6.083,818,4.6,820,6.083,827,4.6,1321,6.816,1322,4.6,1323,7.669,1324,5.176,1325,6.845,1326,5.176,1327,5.176,1328,5.176,1329,5.176,1330,6.845,1331,6.845]],["title/classes/GetCommentsQuery.html",[0,0.111,761,3.32]],["body/classes/GetCommentsQuery.html",[0,0.146,2,1.86,3,0.079,4,0.079,5,0.079,10,0.4,11,1.455,13,0.499,14,0.007,18,0.625,24,0.088,26,0.006,27,0.006,32,3.196,37,1.339,42,2.646,66,2.296,111,1.146,112,0.843,320,1.789,626,4.976,628,6.224,761,5.455,929,4.642,1332,7.368,1333,5.423,1334,6.102,1335,6.102,1336,6.102]],["title/controllers/GoogleAuthenticationController.html",[54,1.235,1337,3.522]],["body/controllers/GoogleAuthenticationController.html",[0,0.112,3,0.06,4,0.06,5,0.06,10,0.307,13,0.307,14,0.007,16,0.944,18,0.384,20,0.238,24,0.067,26,0.005,27,0.005,37,0.754,38,2.612,54,1.246,56,1.269,58,1.268,61,0.91,62,0.523,66,1.769,67,0.98,111,0.877,112,0.645,166,4.581,167,4.581,242,1.836,263,2.011,264,4.149,265,4.86,274,3.923,278,1.37,290,2.232,291,2.692,293,2.504,294,3.332,297,2.514,299,2.436,301,3.18,319,2.692,320,1.37,321,1.91,323,2.094,324,2.153,341,5.539,343,3.034,344,5.937,350,3.81,386,3.034,407,5.937,473,3.81,1337,4.86,1338,4.581,1339,3.81,1340,4.672,1341,5.954,1342,4.672,1343,6.389,1344,4.956,1345,4.672,1346,4.672,1347,4.672,1348,4.672,1349,4.672,1350,4.672,1351,4.672,1352,4.672,1353,4.672]],["title/modules/GoogleAuthenticationModule.html",[69,1.007,87,3.32]],["body/modules/GoogleAuthenticationModule.html",[0,0.126,3,0.068,4,0.068,5,0.068,14,0.007,20,0.26,24,0.076,26,0.005,27,0.005,56,1.881,62,0.59,69,1.506,71,1.811,72,2.774,76,5.69,87,6.634,100,5.048,101,2.908,102,2.212,103,2.212,105,2.711,106,2.593,115,3.726,117,1.93,121,3.583,122,4.293,166,4.963,167,3.775,301,3.583,382,4.679,385,4.293,386,3.419,1073,4.679,1337,5.883,1338,3.775,1344,5.963,1354,4.679,1355,4.679,1356,5.265,1357,5.265]],["title/injectables/GoogleAuthenticationService.html",[255,0.748,1344,3.151]],["body/injectables/GoogleAuthenticationService.html",[0,0.054,3,0.029,4,0.029,5,0.029,10,0.149,11,0.709,13,0.479,14,0.007,15,1.627,18,0.6,20,0.186,24,0.033,26,0.003,27,0.003,37,1.14,38,3.067,58,0.735,61,1.318,62,0.254,66,1.3,67,1.531,111,1.325,112,1.102,116,2.912,117,0.831,137,2.938,166,3.367,167,5.384,242,2.187,250,2.061,255,0.598,256,0.705,265,2.818,266,2.016,278,1.984,298,1.473,300,3.898,310,2.83,311,1.183,320,1.086,321,1.404,323,2.362,324,2.46,341,4.124,342,2.016,343,1.473,344,4.421,345,3.325,346,1.726,347,2.016,348,2.016,349,1.726,406,1.726,448,2.215,453,2.215,454,3.242,459,2.183,460,2.238,469,3.021,489,1.221,630,1.85,710,2.016,1062,1.726,1200,3.293,1223,2.016,1338,5.384,1344,2.522,1358,1.85,1359,4.696,1360,3.705,1361,3.705,1362,3.705,1363,3.705,1364,3.705,1365,3.705,1366,3.293,1367,3.705,1368,2.268,1369,3.705,1370,2.268,1371,3.705,1372,2.268,1373,3.705,1374,2.268,1375,3.705,1376,2.268,1377,3.705,1378,2.268,1379,3.705,1380,2.268,1381,3.705,1382,2.016,1383,3.705,1384,2.268,1385,3.705,1386,2.268,1387,3.705,1388,2.268,1389,2.268,1390,2.268,1391,2.268,1392,2.268,1393,2.268,1394,2.268,1395,2.268,1396,2.268,1397,2.268,1398,5.421,1399,2.268,1400,2.016,1401,2.268,1402,2.268,1403,3.705,1404,5.421,1405,2.268,1406,2.268,1407,2.268,1408,3.705,1409,3.705,1410,2.268,1411,1.726,1412,4.696,1413,2.016,1414,2.268,1415,2.268,1416,2.268,1417,2.016,1418,2.016,1419,2.268]],["title/injectables/GraphqlJwtAuthGuard.html",[255,0.748,1420,3.522]],["body/injectables/GraphqlJwtAuthGuard.html",[0,0.142,3,0.076,4,0.076,5,0.076,10,0.388,13,0.388,14,0.007,18,0.486,20,0.238,24,0.085,26,0.005,27,0.005,37,0.955,58,1.48,61,1.152,62,0.662,67,1.24,111,1.11,112,0.817,142,3.841,255,1.205,256,1.839,323,1.701,384,3.29,624,2.826,836,3.68,1059,6.529,1420,5.675,1421,6.63,1422,4.845,1423,5.256,1424,7.46,1425,7.46,1426,5.914,1427,4.24,1428,5.914,1429,4.499,1430,5.914,1431,5.914,1432,5.914]],["title/controllers/HealthController.html",[54,1.235,1433,3.522]],["body/controllers/HealthController.html",[0,0.11,3,0.059,4,0.059,5,0.059,10,0.3,14,0.007,16,0.925,18,0.376,20,0.209,24,0.066,26,0.005,27,0.005,54,1.22,56,1.243,58,1.25,61,0.891,62,0.512,67,1.321,144,3.28,263,1.969,320,1.341,321,2.432,354,3.28,1014,5.163,1016,5.478,1028,3.48,1433,4.79,1434,4.065,1435,7.758,1436,4.574,1437,4.574,1438,7.201,1439,6.297,1440,7.201,1441,7.201,1442,7.201,1443,4.065,1444,4.065,1445,4.574,1446,6.297,1447,4.574,1448,6.297,1449,5.596,1450,6.297,1451,6.297,1452,4.574,1453,4.574,1454,6.297,1455,7.758,1456,6.297,1457,4.574,1458,4.574,1459,4.574,1460,4.574,1461,4.574,1462,4.574,1463,4.574,1464,4.065,1465,4.574,1466,4.574,1467,4.574,1468,4.574,1469,4.574,1470,4.574,1471,4.574,1472,4.574]],["title/modules/HealthModule.html",[69,1.007,88,3.32]],["body/modules/HealthModule.html",[0,0.152,3,0.082,4,0.082,5,0.082,14,0.007,20,0.256,24,0.092,26,0.006,27,0.006,56,2.12,62,0.712,69,1.697,71,2.186,88,5.594,105,2.489,106,2.38,1014,5.594,1016,4.834,1028,4.834,1433,6.423,1443,5.648,1444,5.648,1473,6.355,1474,6.355,1475,7.802]],["title/injectables/HttpCacheInterceptor.html",[255,0.748,1476,3.522]],["body/injectables/HttpCacheInterceptor.html",[0,0.131,3,0.07,4,0.07,5,0.07,10,0.358,13,0.358,14,0.007,15,1.305,18,0.448,20,0.159,24,0.079,26,0.005,27,0.005,37,0.88,58,1.405,61,1.062,62,0.611,67,1.485,111,1.023,112,0.753,255,1.144,256,1.695,274,2.469,323,2.037,354,5.078,452,4.82,624,3.383,836,3.392,1059,6.334,1063,4.845,1476,5.387,1477,6.294,1478,4.845,1479,6.99,1480,7.082,1481,7.082,1482,5.452,1483,7.082,1484,7.4,1485,5.452,1486,5.452,1487,5.452,1488,5.452,1489,7.082,1490,5.452]],["title/injectables/HttpLogsMiddleware.html",[172,3.522,255,0.748]],["body/injectables/HttpLogsMiddleware.html",[0,0.111,3,0.06,4,0.06,5,0.06,10,0.305,11,1.217,13,0.305,14,0.007,18,0.523,20,0.185,24,0.067,25,1.31,26,0.005,27,0.005,37,0.75,58,1.263,61,0.905,62,0.52,66,2.01,67,1.522,111,0.872,112,0.641,114,3.16,172,5.521,174,5.521,255,1.028,256,1.444,274,3.825,298,5.72,299,2.421,321,2.17,323,2.088,354,4.562,416,2.676,460,2.383,566,5.188,655,2.777,684,2.499,961,5.598,992,4.127,994,4.127,1210,6.939,1491,6.45,1492,4.127,1493,6.362,1494,7.807,1495,4.643,1496,6.362,1497,4.643,1498,6.362,1499,4.643,1500,6.362,1501,7.807,1502,6.362,1503,4.643,1504,4.643,1505,4.643]],["title/injectables/JwtAuthenticationGuard.html",[255,0.748,308,2.044]],["body/injectables/JwtAuthenticationGuard.html",[0,0.161,3,0.087,4,0.087,5,0.087,14,0.007,20,0.235,24,0.097,25,1.383,26,0.006,27,0.006,62,0.752,255,1.303,256,2.088,308,3.561,384,3.737,624,3.209,1427,4.816,1429,5.109,1506,5.109,1507,5.477]],["title/injectables/JwtRefreshGuard.html",[255,0.748,312,3.522]],["body/injectables/JwtRefreshGuard.html",[0,0.16,3,0.086,4,0.086,5,0.086,14,0.007,20,0.233,24,0.096,25,1.371,26,0.006,27,0.006,62,0.746,255,1.296,256,2.07,268,4.532,312,6.106,345,3.705,384,3.705,624,3.181,1427,4.774,1429,5.065,1506,5.065,1508,5.917]],["title/injectables/JwtRefreshTokenStrategy.html",[255,0.748,372,3.32]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.111,3,0.06,4,0.06,5,0.06,10,0.304,13,0.417,14,0.007,18,0.521,20,0.251,24,0.067,26,0.005,27,0.005,37,1.025,58,1.26,61,0.902,62,0.518,66,1.758,67,1.332,111,1.192,112,0.877,116,3.633,117,1.697,178,2.275,242,1.827,255,1.025,256,1.439,268,5.307,274,3.822,278,1.358,299,2.414,310,3.442,311,2.414,320,1.862,321,1.898,323,1.332,345,2.576,346,3.522,372,4.552,384,2.576,430,5.064,431,3.522,432,3.319,433,4.932,476,4.114,624,2.212,947,3.319,1185,3.151,1422,4.124,1509,5.909,1510,4.114,1511,4.83,1512,5.909,1513,4.629,1514,6.349,1515,4.629,1516,3.775,1517,3.319,1518,3.319,1519,3.522,1520,3.522,1521,3.775,1522,3.775,1523,4.629,1524,3.775,1525,4.629,1526,4.629,1527,4.629,1528,4.629]],["title/injectables/JwtStrategy.html",[255,0.748,373,3.32]],["body/injectables/JwtStrategy.html",[0,0.114,3,0.061,4,0.061,5,0.061,10,0.313,13,0.425,14,0.007,18,0.533,20,0.253,24,0.069,26,0.005,27,0.005,37,1.047,58,1.287,61,0.93,62,0.535,66,1.795,67,1.36,111,1.217,112,0.895,116,3.667,117,1.75,242,1.856,255,1.047,256,1.484,274,2.936,278,1.4,299,2.489,310,3.486,311,2.489,320,1.901,321,1.938,373,4.649,384,2.656,395,3.892,430,5.13,431,3.631,432,3.423,433,3.249,624,2.281,947,3.423,1185,3.249,1422,3.1,1511,4.932,1512,6.004,1516,3.892,1517,3.423,1518,3.423,1519,3.631,1520,3.631,1521,3.892,1522,3.892,1524,3.892,1529,4.242,1530,4.773,1531,5.762,1532,4.773,1533,4.242,1534,4.242]],["title/injectables/JwtTwoFactorGuard.html",[255,0.748,1535,3.522]],["body/injectables/JwtTwoFactorGuard.html",[0,0.161,3,0.087,4,0.087,5,0.087,14,0.007,20,0.235,24,0.097,25,1.383,26,0.006,27,0.006,62,0.752,255,1.303,256,2.088,384,3.737,389,5.492,391,4.362,624,3.209,1427,4.816,1429,5.109,1506,5.109,1535,6.138,1536,5.969]],["title/injectables/JwtTwoFactorStrategy.html",[255,0.748,374,3.32]],["body/injectables/JwtTwoFactorStrategy.html",[0,0.111,3,0.06,4,0.06,5,0.06,10,0.304,13,0.417,14,0.007,18,0.521,20,0.251,24,0.067,26,0.005,27,0.005,37,1.025,38,2.6,58,1.26,61,0.902,62,0.518,66,1.758,67,1.52,111,1.192,112,0.877,116,3.633,117,1.697,242,1.827,255,1.025,256,1.439,274,2.875,278,1.358,299,2.414,310,3.442,311,2.414,320,1.862,321,1.898,323,1.332,324,1.56,355,4.114,374,4.552,384,2.576,389,5.307,391,3.007,395,3.775,430,5.064,431,3.522,432,3.319,433,3.151,624,2.212,947,3.319,1185,3.151,1422,4.124,1509,5.909,1511,4.83,1512,5.909,1516,3.775,1517,3.319,1518,3.319,1519,3.522,1520,3.522,1521,3.775,1522,3.775,1524,3.775,1531,5.643,1533,4.114,1534,4.114,1537,4.114,1538,4.629,1539,4.629,1540,4.629]],["title/injectables/LocalAuthenticationGuard.html",[255,0.748,303,3.522]],["body/injectables/LocalAuthenticationGuard.html",[0,0.162,3,0.087,4,0.087,5,0.087,14,0.007,20,0.235,24,0.097,26,0.006,27,0.006,62,0.755,255,1.307,256,2.097,303,6.154,384,3.753,624,3.223,1427,4.837,1507,5.501,1541,5.995,1542,6.746]],["title/injectables/LocalStrategy.html",[255,0.748,375,3.32]],["body/injectables/LocalStrategy.html",[0,0.124,3,0.067,4,0.067,5,0.067,10,0.34,13,0.449,14,0.007,15,1.607,18,0.562,20,0.247,24,0.075,26,0.005,27,0.005,37,1.105,38,1.857,58,1.358,61,1.008,62,0.58,65,2.228,67,1.085,111,1.285,112,0.945,137,2.564,242,1.934,250,4.54,255,1.105,256,1.609,300,5.024,301,3.523,320,1.518,375,4.908,384,2.88,489,2.786,574,4.908,624,2.473,702,4.6,1511,5.207,1517,3.711,1518,3.711,1519,3.937,1520,3.937,1543,4.6,1544,5.176,1545,6.845,1546,5.176,1547,4.6,1548,5.176,1549,5.176]],["title/entities/Log.html",[28,1.773,920,2.881]],["body/entities/Log.html",[0,0.12,3,0.064,4,0.064,5,0.064,10,0.329,11,1.28,13,0.551,14,0.007,15,1.592,16,1.697,18,0.689,20,0.146,24,0.072,25,1.031,26,0.005,27,0.005,28,1.918,30,2.533,32,3.912,35,2.441,39,4.67,42,2.041,43,4.197,50,1.876,52,2.695,174,3.809,684,4.06,836,4.694,837,5.738,854,4.349,920,4.694,1178,5.95,1550,4.45,1551,7.543,1552,5.007,1553,6.151,1554,5.007,1555,5.007,1556,5.007,1557,5.46,1558,5.007]],["title/modules/LoggerModule.html",[69,1.007,89,3.32]],["body/modules/LoggerModule.html",[0,0.132,3,0.071,4,0.071,5,0.071,14,0.007,20,0.258,24,0.08,26,0.005,27,0.005,62,0.617,69,1.551,71,1.895,72,2.858,89,6.63,101,2.996,102,2.315,103,2.315,105,2.793,106,2.064,115,3.838,117,2.02,379,4.264,557,3.066,558,2.208,914,6.773,918,6.037,920,3.429,944,4.897,961,3.951,1559,4.897,1560,4.897,1561,4.897,1562,5.51,1563,5.51,1564,4.897,1565,5.51]],["title/injectables/LogsService.html",[255,0.748,918,3.151]],["body/injectables/LogsService.html",[0,0.126,3,0.068,4,0.068,5,0.068,10,0.344,13,0.453,14,0.007,18,0.567,20,0.248,24,0.076,25,1.08,26,0.005,27,0.005,37,1.115,50,1.965,58,1.371,61,1.022,62,0.588,67,1.1,111,1.297,112,0.954,178,2.578,242,1.947,255,1.115,256,1.631,278,1.539,320,1.539,321,1.569,323,1.509,324,2.327,537,2.654,558,2.103,588,2.919,589,4.278,833,6.241,918,4.701,920,4.297,1564,4.663,1566,4.663,1567,6.906,1568,5.247,1569,5.247,1570,6.906,1571,6.906,1572,5.247,1573,5.247,1574,5.247,1575,6.906,1576,5.247,1577,5.247,1578,4.663,1579,5.247]],["title/entities/Message.html",[28,1.773,684,2.492]],["body/entities/Message.html",[0,0.13,3,0.07,4,0.07,5,0.07,10,0.356,11,1.351,13,0.515,14,0.007,15,1.302,16,1.587,18,0.645,20,0.205,24,0.078,25,1.118,26,0.005,27,0.005,28,2.08,30,2.748,32,3.874,35,2.541,38,2.983,39,4.369,42,2.154,43,4.369,50,2.035,52,2.924,480,4.095,489,2.924,671,4.524,684,4.226,688,4.828,732,4.133,739,5.066,1580,4.828,1581,5.432,1582,5.432,1583,5.432]],["title/classes/ObjectWithId.html",[0,0.111,808,3.32]],["body/classes/ObjectWithId.html",[0,0.188,2,1.945,3,0.082,4,0.082,5,0.082,10,0.419,11,1.496,13,0.419,14,0.007,16,1.29,18,0.524,20,0.186,23,2.681,24,0.092,25,1.314,26,0.006,27,0.006,35,2.737,42,2.385,796,6.065,808,6.065,1584,6.951,1585,5.671,1586,6.381]],["title/controllers/OptimizeController.html",[54,1.235,1587,3.522]],["body/controllers/OptimizeController.html",[0,0.103,3,0.055,4,0.055,5,0.055,10,0.281,13,0.395,14,0.007,15,1.281,16,1.216,18,0.494,20,0.239,24,0.062,26,0.004,27,0.004,35,2.249,37,0.971,54,1.141,56,1.163,58,1.193,61,1.171,62,0.479,66,1.185,67,1.458,111,1.129,112,0.83,155,3.256,242,2.076,263,1.843,278,1.763,293,1.472,295,3.256,297,2.304,298,5.349,299,3.625,321,1.28,323,2.285,324,2.342,530,3.069,1174,5.668,1305,4.904,1587,4.574,1588,3.804,1589,3.804,1590,6.013,1591,6.013,1592,4.281,1593,6.013,1594,4.281,1595,4.281,1596,6.178,1597,4.281,1598,4.281,1599,5.668,1600,4.281,1601,4.281,1602,3.491,1603,4.281,1604,4.281,1605,5.344,1606,3.804,1607,4.281,1608,4.281,1609,4.281,1610,4.281,1611,4.281,1612,4.281,1613,4.281,1614,4.281,1615,4.281,1616,4.281,1617,4.281,1618,4.281,1619,4.281,1620,6.013,1621,4.281,1622,4.281,1623,3.804,1624,4.281,1625,4.281,1626,4.281]],["title/modules/OptimizeModule.html",[69,1.007,90,3.32]],["body/modules/OptimizeModule.html",[0,0.145,3,0.078,4,0.078,5,0.078,14,0.007,20,0.251,24,0.087,26,0.006,27,0.006,56,2.052,62,0.675,69,1.643,71,2.074,90,5.415,105,2.362,106,2.259,112,1.043,143,4.587,144,5.415,154,5.359,155,4.587,1587,6.273,1589,5.359,1627,6.03,1628,6.03,1629,6.03,1630,6.03,1631,6.03,1632,6.03,1633,6.03]],["title/classes/PaginationParams.html",[0,0.111,1634,3.522]],["body/classes/PaginationParams.html",[0,0.185,2,1.605,3,0.068,4,0.068,5,0.068,10,0.345,11,1.324,13,0.586,14,0.007,16,1.563,18,0.635,20,0.201,23,2.212,24,0.076,26,0.005,27,0.005,37,1.415,42,2.794,796,5.89,812,3.419,846,5.591,1314,4.293,1634,5.266,1635,7.301,1636,6.306,1637,6.306,1638,6.306,1639,7.733,1640,5.265,1641,5.265,1642,5.265,1643,5.265,1644,7.733]],["title/entities/Post.html",[28,1.773,293,1.593]],["body/entities/Post.html",[0,0.114,3,0.04,4,0.04,5,0.04,10,0.312,11,0.909,13,0.541,14,0.007,15,1.354,16,1.667,18,0.677,20,0.203,24,0.045,25,0.64,26,0.004,27,0.004,28,1.191,30,1.573,32,3.881,35,2.255,37,1.274,38,2.5,39,3.877,42,1.971,43,3.213,50,1.165,52,1.674,67,0.652,112,0.797,151,4.637,178,2.837,293,2.224,416,2.74,452,3.237,480,3.634,489,1.674,506,3.93,516,4.752,599,2.117,617,2.764,620,4.226,671,3.327,730,4.572,733,2.764,739,3.41,740,4.708,812,2.02,844,4.392,852,5.132,854,4.2,1221,2.02,1553,2.536,1557,3.878,1645,2.764,1646,5.774,1647,5.774,1648,3.11,1649,3.11,1650,4.755,1651,3.11,1652,3.11,1653,4.226,1654,3.11,1655,3.11,1656,4.755,1657,5.132,1658,4.755,1659,3.11,1660,4.226,1661,3.11,1662,3.11,1663,2.536,1664,4.755,1665,3.11,1666,3.11,1667,4.755,1668,3.11,1669,3.11,1670,4.226,1671,3.11,1672,3.11,1673,4.755,1674,3.878,1675,3.11,1676,3.11,1677,3.11,1678,3.11,1679,3.11,1680,3.11,1681,2.764,1682,3.11,1683,3.11,1684,3.11,1685,4.755,1686,3.11]],["title/injectables/PostLoader.html",[255,0.748,1687,3.775]],["body/injectables/PostLoader.html",[0,0.116,3,0.062,4,0.062,5,0.062,10,0.317,11,1.25,13,0.317,14,0.007,18,0.537,20,0.215,24,0.07,25,1.346,26,0.005,27,0.005,32,3.113,37,0.781,38,2.346,42,1.993,62,0.541,65,2.081,66,2.052,67,1.371,111,0.907,112,0.667,255,1.056,256,1.503,310,3.773,311,2.521,320,1.417,323,2.284,324,2.203,349,4.974,406,3.677,416,2.785,460,2.974,1687,5.332,1688,4.296,1689,7.41,1690,4.833,1691,6.538,1692,6.538,1693,5.332,1694,6.538,1695,6.538,1696,6.538,1697,6.538,1698,6.538,1699,4.833,1700,6.538,1701,5.811,1702,4.833]],["title/classes/PostNotFoundException.html",[0,0.111,1703,3.522]],["body/classes/PostNotFoundException.html",[0,0.149,2,1.89,3,0.08,4,0.08,5,0.08,13,0.407,14,0.007,18,0.509,20,0.18,24,0.09,25,1.277,26,0.006,27,0.006,35,2.006,37,1.001,42,2.546,62,0.694,111,1.164,112,0.856,320,1.818,623,5.056,624,3.671,625,5.988,626,6.266,627,5.511,628,5.51,630,5.056,1703,6.353,1704,6.83,1705,6.201]],["title/controllers/PostsController.html",[54,1.235,1706,3.522]],["body/controllers/PostsController.html",[0,0.076,3,0.041,4,0.041,5,0.041,10,0.209,13,0.462,14,0.007,15,1.079,16,1.423,18,0.578,20,0.249,24,0.046,25,0.655,26,0.004,27,0.004,35,1.894,37,1.137,54,0.848,56,0.864,58,0.96,61,1.371,62,0.356,65,1.369,66,0.881,67,1.555,111,1.321,112,0.972,137,1.191,179,2.066,242,2.051,263,1.369,271,3.215,278,1.717,290,2.311,291,1.833,293,2.732,294,3.67,296,1.479,297,1.712,305,1.52,307,1.712,308,1.404,319,1.833,360,2.311,389,2.165,452,2.165,518,5.647,519,2.827,523,4.3,529,2.594,530,2.28,534,2.594,535,2.28,536,3.68,537,1.609,539,2.448,540,2.419,550,2.827,599,2.165,641,1.833,751,3.469,766,2.827,841,4.691,898,2.066,899,2.165,900,2.419,902,2.419,1476,2.419,1479,2.827,1484,2.827,1535,2.419,1634,4.977,1636,4.774,1637,3.945,1638,4.774,1706,3.68,1707,2.827,1708,3.469,1709,4.3,1710,4.3,1711,5.203,1712,4.3,1713,2.827,1714,3.18,1715,3.18,1716,3.18,1717,3.18,1718,3.18,1719,3.18,1720,3.18,1721,3.18,1722,3.18,1723,5.855,1724,3.18,1725,4.691,1726,3.18,1727,3.18,1728,3.18,1729,3.18,1730,3.803,1731,2.594,1732,4.3,1733,3.18,1734,2.419,1735,2.827,1736,2.827,1737,3.18,1738,3.18,1739,3.18,1740,3.18,1741,3.18,1742,3.18,1743,3.18,1744,3.18,1745,3.18,1746,3.18,1747,3.18,1748,3.18,1749,3.18,1750,3.18,1751,2.594,1752,3.18,1753,3.18,1754,3.18,1755,3.18,1756,3.18,1757,3.18]],["title/modules/PostsModule.html",[69,1.007,91,3.32]],["body/modules/PostsModule.html",[0,0.122,3,0.065,4,0.065,5,0.065,14,0.007,20,0.261,24,0.073,26,0.005,27,0.005,56,1.835,62,0.568,69,1.469,71,1.745,72,2.707,91,6.216,101,2.838,102,2.131,103,2.131,105,2.646,106,2.53,115,3.635,116,3.485,117,1.859,179,3.295,231,2.823,232,3.295,243,3.638,244,3.453,245,4.137,246,3.453,251,4.137,293,1.745,439,4.509,557,2.823,558,2.033,1706,5.776,1730,5.631,1731,4.137,1758,4.509,1759,4.509,1760,5.073,1761,5.073,1762,5.073,1763,4.509,1764,6.754,1765,4.137,1766,6.003,1767,5.138,1768,5.073,1769,5.073,1770,6.754,1771,5.073,1772,5.073,1773,5.073,1774,4.509,1775,5.073,1776,5.073,1777,5.073]],["title/classes/PostsResolver.html",[0,0.111,1767,3.522]],["body/classes/PostsResolver.html",[0,0.085,2,1.077,3,0.095,4,0.045,5,0.045,10,0.232,13,0.483,14,0.007,16,1.26,18,0.566,20,0.251,24,0.051,26,0.004,27,0.004,37,1.007,58,1.039,61,1.215,62,0.396,65,1.52,67,1.308,111,1.171,112,0.861,142,2.294,148,3.139,149,2.532,150,3.139,231,1.965,242,1.944,243,2.532,271,2.572,278,1.535,293,2.533,294,1.842,296,1.642,307,1.901,320,1.036,321,1.056,323,2.118,324,2.101,480,1.842,501,4.268,599,4.244,641,2.035,711,2.88,751,3.753,828,5.085,836,4.581,850,5.866,1420,2.687,1422,2.294,1708,4.471,1730,5.008,1731,2.88,1767,3.982,1778,2.88,1779,6.853,1780,3.532,1781,6.235,1782,6.128,1783,3.532,1784,3.532,1785,3.532,1786,3.532,1787,3.532,1788,3.532,1789,3.532,1790,6.895,1791,3.532,1792,3.532,1793,3.532,1794,5.234,1795,3.532,1796,3.532,1797,5.234,1798,5.234,1799,3.532,1800,3.532,1801,3.532,1802,3.532,1803,4.744,1804,3.532,1805,5.234,1806,5.234,1807,3.139,1808,2.532,1809,2.687,1810,2.88,1811,3.532,1812,3.532,1813,5.234,1814,3.532,1815,3.532,1816,3.532,1817,3.532,1818,3.532,1819,3.532,1820,3.532,1821,3.532,1822,3.532,1823,3.532,1824,3.532,1825,3.532,1826,3.532]],["title/injectables/PostsService.html",[255,0.748,1730,3.007]],["body/injectables/PostsService.html",[0,0.055,3,0.029,4,0.029,5,0.029,10,0.15,11,0.712,13,0.445,14,0.007,15,0.42,18,0.601,20,0.219,24,0.033,25,0.971,26,0.003,27,0.003,35,1.76,37,1.095,38,2.537,42,2.733,50,0.855,58,0.739,61,1.321,62,0.256,66,1.306,67,1.257,111,1.273,112,0.937,179,4.176,231,1.27,242,2.19,255,0.601,256,0.709,278,1.758,293,2.649,320,1.092,321,1.792,323,2.034,324,2.648,416,2.145,427,1.736,428,1.736,447,3.036,459,2.192,460,2.245,480,3.126,489,1.228,537,1.154,540,1.736,558,0.914,570,1.861,588,1.27,589,2.837,592,2.028,601,3.901,609,2.028,611,2.028,828,3.036,841,3.901,924,3.381,929,4.56,961,3.901,1411,3.587,1636,6.135,1637,3.036,1638,5.966,1703,1.736,1708,2.669,1709,3.309,1710,3.309,1711,3.309,1712,3.309,1713,3.309,1725,3.901,1730,2.418,1732,3.309,1734,1.736,1735,2.028,1736,2.028,1763,2.028,1765,1.861,1827,2.028,1828,5.441,1829,3.723,1830,2.282,1831,4.715,1832,3.723,1833,3.723,1834,2.282,1835,2.282,1836,3.723,1837,2.282,1838,3.723,1839,2.282,1840,3.723,1841,5.441,1842,2.282,1843,3.723,1844,2.282,1845,4.715,1846,3.723,1847,2.282,1848,3.723,1849,2.282,1850,2.282,1851,2.282,1852,2.282,1853,2.282,1854,2.282,1855,2.282,1856,2.282,1857,2.282,1858,2.282,1859,2.282,1860,5.441,1861,2.028,1862,2.282,1863,2.282,1864,2.282,1865,3.309,1866,4.715,1867,2.282,1868,2.282,1869,2.282,1870,2.282,1871,2.282,1872,2.282,1873,2.282,1874,2.282,1875,2.282,1876,2.282,1877,2.282,1878,2.282,1879,2.282,1880,3.723,1881,2.282,1882,2.282,1883,4.715,1884,2.282,1885,2.282,1886,4.715,1887,2.282,1888,4.715,1889,2.282]],["title/entities/PrivateFile.html",[28,1.773,1235,3.151]],["body/entities/PrivateFile.html",[0,0.125,3,0.067,4,0.067,5,0.067,10,0.343,11,1.318,13,0.506,14,0.007,15,1.27,16,1.558,18,0.633,20,0.2,24,0.076,25,1.077,26,0.005,27,0.005,28,2.002,30,2.645,32,3.846,35,2.494,38,3.055,39,4.288,42,2.101,43,4.288,50,1.959,52,2.814,489,2.814,732,3.978,739,4.941,1025,5.527,1235,5.246,1301,7.567,1890,7.281,1891,4.264,1892,5.229,1893,5.229,1894,6.891,1895,5.229,1896,5.229]],["title/entities/Product.html",[28,1.773,130,2.492]],["body/entities/Product.html",[0,0.112,3,0.06,4,0.06,5,0.06,10,0.307,11,1.569,13,0.538,14,0.007,15,1.18,16,1.584,18,0.644,20,0.228,24,0.068,25,0.965,26,0.005,27,0.005,28,1.795,30,2.371,32,3.871,35,2.359,39,4.361,42,1.952,43,4.057,50,1.755,52,2.522,112,1.007,130,4.218,491,5.548,497,5.548,516,4.728,732,3.565,739,4.59,1557,3.821,1897,4.165,1898,5.329,1899,6.402,1900,4.686,1901,4.686,1902,4.686,1903,6.402,1904,4.686,1905,3.821,1906,3.821,1907,4.686,1908,6.402,1909,4.686,1910,3.821]],["title/controllers/ProductCategoriesController.html",[54,1.235,1911,3.522]],["body/controllers/ProductCategoriesController.html",[0,0.12,3,0.064,4,0.064,5,0.064,10,0.327,13,0.327,14,0.007,16,1.35,18,0.549,20,0.244,24,0.072,26,0.005,27,0.005,37,0.806,54,1.331,56,1.356,58,1.326,61,1.302,62,0.559,65,2.148,66,1.382,67,1.401,111,0.937,112,0.689,130,4.053,131,5.4,137,1.869,242,1.899,263,2.148,278,1.464,290,2.384,291,2.876,293,2.298,296,2.32,297,2.686,305,2.384,308,2.203,319,2.876,360,2.384,506,4.547,533,3.797,537,2.525,538,3.797,539,2.525,859,5.767,860,5.126,885,4.07,898,3.241,899,3.397,900,3.797,902,3.797,1898,4.339,1911,5.082,1912,4.435,1913,5.448,1914,6.559,1915,4.991,1916,4.991,1917,4.991,1918,4.547,1919,4.991,1920,3.241,1921,4.991,1922,4.435,1923,4.991]],["title/modules/ProductCategoriesModule.html",[69,1.007,92,3.32]],["body/modules/ProductCategoriesModule.html",[0,0.138,3,0.074,4,0.074,5,0.074,14,0.007,20,0.255,24,0.083,26,0.005,27,0.005,56,1.988,62,0.642,69,1.592,71,1.973,72,2.933,92,6.428,101,3.075,102,2.41,103,2.41,105,2.866,106,2.149,130,3.939,131,4.114,533,4.364,556,5.099,557,3.192,558,2.299,860,3.905,1898,3.726,1906,4.678,1911,6.13,1918,6.102,1924,5.099,1925,5.099,1926,5.737,1927,5.099,1928,5.737]],["title/injectables/ProductCategoriesService.html",[255,0.748,1918,3.151]],["body/injectables/ProductCategoriesService.html",[0,0.119,3,0.064,4,0.064,5,0.064,10,0.326,13,0.437,14,0.007,18,0.618,20,0.244,24,0.072,26,0.005,27,0.005,37,1.077,50,1.863,58,1.323,61,1.299,62,0.557,67,1.398,111,1.252,112,0.921,130,2.677,131,5.759,242,1.896,255,1.077,256,1.547,278,1.459,320,1.955,321,1.487,323,1.431,324,2.246,516,2.866,537,2.517,538,3.784,558,1.994,588,2.768,589,4.189,859,5.759,860,5.467,1898,3.231,1906,4.057,1918,4.537,1927,4.421,1929,4.421,1930,6.666,1931,8.032,1932,4.974,1933,4.974,1934,6.666,1935,6.666,1936,4.974,1937,4.974,1938,4.974,1939,4.974,1940,6.666,1941,4.974,1942,4.974]],["title/entities/ProductCategory.html",[28,1.773,1898,3.007]],["body/entities/ProductCategory.html",[0,0.124,3,0.066,4,0.066,5,0.066,10,0.338,11,1.306,13,0.502,14,0.007,15,1.259,16,1.548,18,0.629,20,0.199,24,0.075,25,1.062,26,0.005,27,0.005,28,1.976,30,2.61,32,3.836,35,2.477,39,4.26,42,2.082,43,4.26,50,1.932,52,2.776,112,1.057,130,4.783,860,5.547,1663,4.207,1674,5.569,1898,4.973,1905,6.646,1910,6.243,1943,4.585,1944,5.158,1945,5.158,1946,6.829,1947,5.158,1948,5.158,1949,5.158]],["title/controllers/ProductsController.html",[54,1.235,1950,3.522]],["body/controllers/ProductsController.html",[0,0.123,3,0.066,4,0.066,5,0.066,10,0.336,13,0.336,14,0.007,16,1.374,18,0.558,20,0.246,24,0.074,26,0.005,27,0.005,37,0.828,54,1.366,56,1.392,58,1.349,61,1.325,62,0.574,66,1.419,67,1.426,111,0.962,112,0.708,130,3.66,137,1.919,242,1.924,263,2.206,278,1.503,290,2.448,291,2.952,293,2.339,296,2.382,297,2.758,305,2.448,308,2.262,319,2.952,320,1.503,321,1.532,360,2.448,537,2.592,539,2.592,862,5.828,885,4.178,898,3.328,899,3.488,900,3.898,902,3.898,1910,4.178,1913,5.545,1914,6.628,1920,4.956,1922,4.554,1950,5.172,1951,4.554,1952,4.554,1953,5.124,1954,5.124,1955,4.554,1956,4.554,1957,5.124,1958,5.124,1959,5.124]],["title/modules/ProductsModule.html",[69,1.007,93,3.32]],["body/modules/ProductsModule.html",[0,0.14,3,0.075,4,0.075,5,0.075,14,0.007,20,0.256,24,0.084,26,0.005,27,0.005,56,2.012,62,0.655,69,1.611,71,2.011,72,2.968,93,6.46,101,3.112,102,2.456,103,2.456,105,2.901,106,2.19,130,3.147,557,3.253,558,2.343,1920,5.851,1950,6.184,1955,5.196,1960,5.196,1961,5.196,1962,5.846,1963,5.846,1964,5.196,1965,5.846]],["title/injectables/ProductsService.html",[255,0.748,1920,3.007]],["body/injectables/ProductsService.html",[0,0.123,3,0.066,4,0.066,5,0.066,10,0.337,13,0.447,14,0.007,18,0.628,20,0.246,24,0.074,26,0.005,27,0.005,37,1.101,50,1.926,58,1.352,61,1.328,62,0.576,67,1.429,111,1.279,112,0.941,130,3.668,242,1.927,255,1.101,256,1.598,278,1.508,320,1.998,321,1.537,323,1.479,324,2.296,537,2.601,558,2.06,588,2.861,589,4.244,862,5.836,1913,5.557,1914,6.637,1920,4.426,1952,6.056,1956,4.569,1964,4.569,1966,4.569,1967,5.141,1968,5.141,1969,6.814,1970,5.141,1971,5.141,1972,5.141,1973,5.141,1974,6.814,1975,5.141,1976,5.141]],["title/modules/PubSubModule.html",[69,1.007,94,3.32]],["body/modules/PubSubModule.html",[0,0.137,3,0.074,4,0.074,5,0.074,14,0.007,20,0.234,24,0.105,26,0.005,27,0.005,62,0.64,69,1.588,71,1.966,94,5.235,105,2.239,106,2.141,115,3.929,116,3.649,117,2.095,149,4.098,231,3.18,232,3.712,243,4.098,244,3.89,245,4.661,246,3.89,248,4.661,249,5.08,250,3.18,251,4.661,323,1.644,379,3.418,460,2.141,1774,5.08,1782,6.488,1803,4.348,1808,4.098,1809,6.448,1977,4.661,1978,4.661,1979,7.301,1980,4.661,1981,4.661]],["title/entities/PublicFile.html",[28,1.773,1232,3.151]],["body/entities/PublicFile.html",[0,0.131,3,0.07,4,0.07,5,0.07,10,0.359,11,1.357,13,0.517,14,0.007,15,1.536,16,1.593,18,0.647,20,0.159,24,0.079,25,1.126,26,0.005,27,0.005,28,2.095,30,2.768,32,3.879,35,2.549,39,4.807,42,2.164,43,4.384,50,2.049,52,2.945,1025,5.649,1095,5.649,1232,5.363,1891,4.461,1982,7.41,1983,5.471,1984,5.471,1985,5.471,1986,5.471]],["title/classes/RegisterDto.html",[0,0.111,286,3.32]],["body/classes/RegisterDto.html",[0,0.162,2,1.547,3,0.065,4,0.065,5,0.065,10,0.333,11,1.292,13,0.553,14,0.007,15,1.694,16,1.704,17,2.567,18,0.692,20,0.148,21,4.028,22,3.868,23,2.131,24,0.098,25,1.045,26,0.005,27,0.005,112,1.049,137,2.844,250,4.225,286,5.444,846,4.597,1129,6.748,1987,4.509,1988,7.593,1989,6.192,1990,5.073,1991,5.073,1992,5.073,1993,5.073,1994,5.073,1995,5.073,1996,5.073,1997,6.754,1998,5.073,1999,5.073,2000,5.073,2001,5.073,2002,5.073]],["title/interfaces/RequestWithRawBody.html",[490,2.153,2003,3.522]],["body/interfaces/RequestWithRawBody.html",[3,0.083,4,0.083,5,0.083,10,0.422,11,1.504,13,0.422,14,0.007,20,0.187,24,0.093,25,1.325,26,0.006,27,0.006,274,3.844,299,3.356,490,2.992,492,3.848,624,3.756,1260,6.458,2003,6.458,2004,4.38,2005,5.719,2006,5.247,2007,5.719,2008,8.842]],["title/interfaces/RequestWithUser.html",[271,2.275,490,2.153]],["body/interfaces/RequestWithUser.html",[3,0.082,4,0.082,5,0.082,10,0.417,11,1.492,13,0.417,14,0.007,20,0.227,24,0.092,25,1.308,26,0.006,27,0.006,38,3.375,271,4.149,274,3.823,299,3.314,489,3.42,490,2.955,492,3.8,624,3.727,2009,5.648,2010,5.648]],["title/classes/SetDefaultCreditCardDto.html",[0,0.111,892,3.522]],["body/classes/SetDefaultCreditCardDto.html",[0,0.183,2,1.875,3,0.079,4,0.079,5,0.079,6,5.483,8,4.966,9,5.016,10,0.404,11,1.462,12,6.33,13,0.404,14,0.007,15,1.409,16,1.243,17,3.112,18,0.505,19,5.467,20,0.179,21,3.653,22,3.653,23,2.584,24,0.11,25,1.713,26,0.006,27,0.006,892,6.33,2011,6.796]],["title/controllers/SmsController.html",[54,1.235,2012,3.522]],["body/controllers/SmsController.html",[0,0.107,3,0.058,4,0.058,5,0.058,10,0.293,13,0.406,14,0.007,16,1.252,18,0.509,20,0.235,24,0.065,26,0.005,27,0.005,37,1.001,42,1.889,54,1.191,56,1.214,58,1.229,61,1.207,62,0.5,65,1.923,66,1.237,111,1.163,112,0.856,242,2.105,263,1.923,271,4.206,274,3.478,290,2.96,293,1.537,294,2.33,296,2.077,305,2.134,307,2.405,308,1.972,316,4.619,324,2.088,360,2.96,459,2.881,460,2.321,462,4.442,539,2.26,641,2.574,724,5.843,726,6.263,728,3.399,1089,2.902,1108,5.506,2012,4.713,2013,3.971,2014,3.971,2015,6.195,2016,5.506,2017,4.468,2018,7.112,2019,6.195,2020,4.468,2021,4.468,2022,4.468,2023,6.195,2024,4.468,2025,4.468,2026,3.971,2027,4.468,2028,3.971,2029,4.468,2030,4.468,2031,6.195,2032,6.195,2033,4.468,2034,4.468,2035,4.468,2036,4.468,2037,4.468]],["title/modules/SmsModule.html",[69,1.007,95,3.151]],["body/modules/SmsModule.html",[0,0.134,3,0.072,4,0.072,5,0.072,14,0.007,20,0.244,24,0.081,26,0.005,27,0.005,56,1.956,62,0.626,69,1.566,71,1.923,72,2.885,95,6.31,100,5.131,101,3.024,102,2.349,103,2.349,105,2.819,106,2.696,121,3.805,316,6.148,379,4.304,2012,6.056,2026,4.969,2038,4.969,2039,4.969,2040,5.591,2041,4.969,2042,5.591,2043,5.591]],["title/injectables/SmsService.html",[255,0.748,316,3.007]],["body/injectables/SmsService.html",[0,0.089,3,0.048,4,0.048,5,0.048,10,0.242,11,1.034,13,0.492,14,0.007,15,1.669,18,0.616,20,0.205,24,0.053,26,0.004,27,0.004,37,1.138,42,1.951,58,1.073,61,1.247,62,0.414,65,1.59,66,1.498,67,1.134,111,1.323,112,0.973,116,3.373,117,1.354,242,1.976,255,0.874,256,1.148,278,1.083,310,3.573,311,1.926,316,3.513,320,1.083,321,2.107,323,2.254,324,1.823,417,2.648,459,1.717,460,2.026,474,3.282,684,3.792,728,4.115,1089,2.399,1185,2.514,1623,3.282,1989,6.39,2014,3.282,2016,4.807,2044,3.282,2045,6.4,2046,5.409,2047,5.409,2048,5.409,2049,5.409,2050,7.046,2051,3.693,2052,5.409,2053,3.693,2054,5.409,2055,3.693,2056,5.409,2057,6.262,2058,3.693,2059,3.693,2060,5.409,2061,3.693,2062,3.693,2063,3.693,2064,5.409,2065,5.409,2066,5.409,2067,3.693,2068,5.409,2069,3.693,2070,3.693,2071,3.693,2072,3.693,2073,3.693,2074,3.282,2075,3.693,2076,5.409,2077,3.693,2078,3.693,2079,3.693]],["title/entities/StripeEvent.html",[28,1.773,2080,3.32]],["body/entities/StripeEvent.html",[0,0.15,3,0.081,4,0.081,5,0.081,10,0.41,11,1.477,13,0.41,14,0.007,15,1.423,16,1.264,18,0.513,20,0.182,24,0.09,25,1.287,26,0.006,27,0.006,28,2.394,30,3.163,32,3.521,35,2.712,50,2.342,52,3.365,2004,5.257,2080,6.009,2081,6.864,2082,5.556,2083,8.381,2084,6.251,2085,6.251]],["title/modules/StripeModule.html",[69,1.007,649,2.769]],["body/modules/StripeModule.html",[0,0.141,3,0.076,4,0.076,5,0.076,14,0.007,20,0.237,24,0.085,26,0.005,27,0.005,62,0.657,69,1.615,71,2.019,72,2.975,101,3.119,102,2.466,103,2.466,105,2.908,106,2.198,115,3.996,117,2.151,379,4.44,638,5.491,649,5.477,2086,5.216,2087,5.216,2088,5.216,2089,5.869,2090,5.869]],["title/injectables/StripeService.html",[255,0.748,638,2.668]],["body/injectables/StripeService.html",[0,0.057,3,0.03,4,0.03,5,0.03,8,1.537,10,0.155,11,0.733,12,5.456,13,0.511,14,0.007,15,1.727,18,0.625,20,0.162,24,0.034,26,0.003,27,0.003,32,3.735,37,1.197,42,1.474,58,0.761,61,1.397,62,0.265,65,1.019,67,1.504,111,1.391,112,1.075,116,2.815,117,0.867,137,2.082,160,4.687,178,1.884,242,2.242,255,0.619,256,0.736,278,2.103,320,0.694,321,1.445,323,0.681,324,1.292,331,1.8,433,3.784,448,2.293,453,2.293,454,2.293,457,1.93,459,2.585,460,2.288,633,3.408,638,2.209,795,3.408,1089,1.537,1185,1.611,1260,3.678,1418,2.103,1865,2.103,2074,2.103,2091,2.103,2092,3.834,2093,3.834,2094,3.834,2095,3.834,2096,3.834,2097,3.834,2098,3.834,2099,3.834,2100,3.834,2101,7.128,2102,2.366,2103,3.834,2104,2.366,2105,3.834,2106,2.366,2107,3.408,2108,3.834,2109,2.366,2110,3.834,2111,2.366,2112,4.94,2113,3.834,2114,2.366,2115,3.834,2116,2.366,2117,3.834,2118,2.366,2119,4.296,2120,2.103,2121,2.366,2122,2.366,2123,2.366,2124,2.366,2125,2.366,2126,2.366,2127,2.366,2128,2.103,2129,3.834,2130,2.366,2131,2.366,2132,2.366,2133,2.366,2134,6.108,2135,3.834,2136,2.366,2137,2.366,2138,2.366,2139,2.366,2140,2.366,2141,4.834,2142,2.366,2143,2.366,2144,2.366,2145,2.366,2146,2.366,2147,2.366,2148,2.366,2149,3.834,2150,2.366,2151,2.366,2152,2.366,2153,2.366,2154,2.366,2155,2.366,2156,2.366]],["title/controllers/StripeWebhookController.html",[54,1.235,2157,3.522]],["body/controllers/StripeWebhookController.html",[0,0.112,3,0.06,4,0.06,5,0.06,10,0.307,13,0.307,14,0.007,15,1.342,16,0.944,18,0.384,20,0.238,24,0.067,26,0.005,27,0.005,37,0.754,54,1.246,56,1.269,58,1.268,61,0.91,62,0.523,66,2.016,67,0.98,111,0.877,112,0.645,160,4.956,161,4.581,242,1.836,263,2.011,274,3.297,278,1.37,293,2.504,294,3.332,306,3.81,310,3.214,311,2.436,320,1.37,321,2.177,323,1.344,324,1.574,459,2.172,460,1.75,638,4.195,639,3.35,1089,3.034,2003,5.954,2004,4.348,2006,3.81,2107,7.284,2157,4.86,2158,4.152,2159,6.389,2160,7.281,2161,4.672,2162,4.672,2163,4.672,2164,4.672,2165,4.956,2166,4.152,2167,4.672,2168,4.672,2169,4.672,2170,4.672,2171,4.152,2172,4.672,2173,4.672,2174,6.389,2175,4.672,2176,4.672,2177,4.672]],["title/modules/StripeWebhookModule.html",[69,1.007,96,3.32]],["body/modules/StripeWebhookModule.html",[0,0.127,3,0.068,4,0.068,5,0.068,14,0.007,20,0.26,24,0.077,26,0.005,27,0.005,56,1.889,62,0.594,69,1.513,71,1.823,72,2.787,96,6.642,100,5.057,101,2.921,102,2.227,103,2.227,105,2.723,106,2.605,121,3.608,160,4.733,161,3.801,557,2.949,558,2.124,649,5.249,652,3.801,2004,3.608,2080,3.801,2157,5.903,2165,5.974,2166,4.711,2178,4.711,2179,5.301,2180,4.711,2181,5.301,2182,5.301,2183,4.711,2184,4.711,2185,5.301]],["title/injectables/StripeWebhookService.html",[255,0.748,2165,3.151]],["body/injectables/StripeWebhookService.html",[0,0.102,3,0.055,4,0.055,5,0.055,10,0.279,13,0.454,14,0.007,15,1.459,18,0.568,20,0.239,24,0.061,25,0.874,26,0.004,27,0.004,35,1.373,37,1.118,50,1.59,58,1.186,61,1.165,62,0.475,66,1.176,67,0.89,111,1.299,112,0.956,160,4.069,161,5.386,242,1.745,255,0.965,256,1.32,310,3.725,311,2.214,320,1.753,321,1.787,323,1.991,324,2.014,427,3.229,428,3.229,448,2.539,453,2.539,454,2.539,455,3.773,456,3.773,457,3.462,458,3.773,459,1.974,460,1.59,462,3.044,558,1.701,588,2.362,589,3.917,1089,2.757,1578,3.773,2004,5.113,2080,3.044,2101,3.462,2165,4.069,2171,5.313,2183,3.773,2184,3.773,2186,3.773,2187,5.978,2188,5.978,2189,4.245,2190,4.245,2191,5.978,2192,5.978,2193,4.245,2194,5.978,2195,6.92,2196,4.245,2197,4.245,2198,4.245,2199,4.245,2200,4.245,2201,4.245,2202,4.245,2203,4.245,2204,4.245,2205,5.978,2206,4.245,2207,4.245]],["title/interfaces/SubscriberGrpc.html",[490,2.153,2208,3.522]],["body/interfaces/SubscriberGrpc.html",[3,0.079,4,0.079,5,0.079,10,0.404,11,1.462,13,0.546,14,0.007,15,1.682,24,0.11,25,1.266,26,0.006,27,0.006,35,2.816,42,2.537,112,1.202,137,3.261,490,2.86,492,3.678,2208,6.33,2209,4.41,2210,5.467,2211,5.467]],["title/controllers/SubscribersController.html",[54,1.235,2212,3.522]],["body/controllers/SubscribersController.html",[0,0.119,3,0.064,4,0.064,5,0.064,10,0.325,13,0.325,14,0.007,16,1.345,18,0.546,20,0.233,24,0.072,26,0.005,27,0.005,37,0.801,54,1.322,56,1.347,58,1.32,61,1.296,62,0.555,67,1.395,111,0.931,112,0.685,126,5.06,231,2.759,242,2.172,263,2.135,278,1.951,290,2.369,291,2.857,293,2.288,296,2.305,297,2.669,305,2.369,308,2.189,319,2.857,321,1.482,360,3.178,514,3.555,537,2.509,539,2.509,867,5.46,889,4.407,1708,4.77,1751,4.043,2212,5.06,2213,4.407,2214,7.129,2215,4.407,2216,4.958,2217,6.541,2218,4.958,2219,6.652,2220,3.555,2221,4.043,2222,4.407,2223,4.958,2224,4.407,2225,6.652,2226,6.652,2227,4.958]],["title/controllers/SubscribersGrpcController.html",[54,1.235,2228,3.522]],["body/controllers/SubscribersGrpcController.html",[0,0.107,3,0.057,4,0.057,5,0.08,10,0.292,13,0.292,14,0.007,16,1.25,18,0.583,20,0.234,24,0.064,26,0.005,27,0.005,37,0.719,54,1.188,56,1.21,58,1.227,61,1.383,62,0.499,67,1.297,111,0.836,112,0.854,114,3.032,126,3.389,127,5.835,231,2.479,242,2.103,263,1.918,278,1.813,290,2.128,291,2.567,293,2.127,296,2.071,297,2.398,305,2.128,308,1.966,319,2.567,321,1.849,360,2.128,514,3.194,539,2.254,566,3.633,655,2.664,768,5.042,867,5.221,1708,4.433,1751,3.633,2209,5.5,2214,6.817,2215,3.959,2217,5.042,2220,3.194,2221,3.633,2222,3.959,2224,3.959,2228,4.703,2229,3.959,2230,6.183,2231,8.34,2232,4.455,2233,4.455,2234,4.455,2235,4.703,2236,4.455,2237,4.455,2238,6.183,2239,3.959,2240,4.455,2241,4.455,2242,4.455,2243,4.455,2244,4.455,2245,4.455,2246,4.455,2247,4.455,2248,4.455,2249,4.455,2250,4.455,2251,4.455]],["title/modules/SubscribersGrpcModule.html",[69,1.007,97,3.32]],["body/modules/SubscribersGrpcModule.html",[0,0.135,3,0.072,4,0.072,5,0.072,14,0.007,20,0.253,24,0.081,26,0.005,27,0.005,56,1.96,62,0.628,67,1.177,69,1.57,71,1.93,97,5.173,105,2.198,116,3.624,117,2.057,126,5.489,127,4.269,143,4.269,144,4.023,231,3.122,232,3.644,236,4.987,924,4.023,1095,4.023,1980,4.576,2209,5.173,2220,4.023,2228,6.066,2252,5.611,2253,5.611,2254,4.987,2255,6.412,2256,5.611,2257,4.987,2258,5.611,2259,4.576,2260,5.611,2261,5.611,2262,5.611]],["title/interfaces/SubscribersGrpcService.html",[490,2.153,2235,3.522]],["body/interfaces/SubscribersGrpcService.html",[3,0.072,4,0.072,5,0.072,10,0.368,13,0.552,14,0.007,18,0.593,20,0.21,24,0.081,25,1.155,26,0.005,27,0.005,37,1.165,58,1.432,61,1.406,111,1.354,112,0.996,490,2.609,492,3.355,501,5.883,536,4.269,574,6.036,867,5.73,2208,4.269,2209,5.718,2217,5.883,2221,4.576,2235,6.066,2239,4.987,2263,7.087,2264,4.987,2265,7.215,2266,7.215,2267,7.215,2268,5.611,2269,7.215,2270,5.611,2271,5.611]],["title/modules/SubscribersModule.html",[69,1.007,98,3.32]],["body/modules/SubscribersModule.html",[0,0.122,3,0.066,4,0.066,5,0.066,14,0.007,20,0.236,24,0.074,26,0.005,27,0.005,38,1.832,56,1.843,62,0.572,67,1.423,69,1.476,71,1.757,98,4.864,105,2,106,1.913,115,3.652,116,3.494,117,1.872,178,2.51,231,2.841,232,3.317,244,4.618,246,3.476,250,2.841,323,2.335,924,4.864,1605,4.539,1980,4.165,2212,5.795,2220,3.662,2254,4.539,2255,7.214,2257,6.029,2272,5.107,2273,5.107,2274,5.107,2275,5.107,2276,5.107,2277,5.107,2278,6.784,2279,5.107,2280,5.107,2281,5.107,2282,5.107,2283,5.107,2284,5.107,2285,5.107,2286,5.107,2287,5.107,2288,5.107]],["title/modules/SubscriptionModule.html",[69,1.007,99,3.32]],["body/modules/SubscriptionModule.html",[0,0.135,3,0.073,4,0.073,5,0.073,14,0.007,20,0.254,24,0.081,26,0.005,27,0.005,56,1.965,62,0.631,69,1.573,71,1.937,72,2.898,99,6.59,101,3.038,102,2.366,103,2.366,105,2.833,106,2.709,115,3.892,117,2.064,649,5.335,652,4.038,2289,5.005,2290,5.005,2291,5.632,2292,6.073,2293,5.632,2294,6.077,2295,5.632,2296,5.005]],["title/controllers/SubscriptionsController.html",[54,1.235,2294,3.522]],["body/controllers/SubscriptionsController.html",[0,0.121,3,0.065,4,0.065,5,0.065,10,0.331,13,0.441,14,0.007,16,1.359,18,0.552,20,0.235,24,0.073,26,0.005,27,0.005,37,1.086,54,1.344,56,1.369,58,1.335,61,1.31,62,0.564,65,2.17,66,1.396,67,1.41,111,1.262,112,0.929,242,2.182,263,2.17,271,4.341,274,3.657,278,1.972,293,1.734,294,2.628,296,2.343,305,2.408,307,2.713,308,2.225,360,3.213,539,2.55,641,2.904,1808,3.614,2292,5.151,2294,5.116,2296,4.479,2297,4.479,2298,5.977,2299,5.977,2300,5.04,2301,5.04,2302,5.04,2303,5.04,2304,5.04,2305,5.04,2306,5.04,2307,5.04,2308,5.04,2309,5.04,2310,5.04,2311,5.04,2312,5.04]],["title/injectables/SubscriptionsService.html",[255,0.748,2292,3.151]],["body/injectables/SubscriptionsService.html",[0,0.105,3,0.057,4,0.057,5,0.057,10,0.288,13,0.462,14,0.007,15,1.53,18,0.579,20,0.205,24,0.063,26,0.005,27,0.005,32,3.488,37,1.138,58,1.215,61,1.193,62,0.492,66,1.695,67,1.478,111,1.323,112,0.973,116,3.667,117,1.609,242,2.093,255,0.989,256,1.365,278,1.795,320,1.795,321,1.83,323,2.193,324,2.063,459,2.042,460,2.293,462,3.148,625,3.148,638,4.784,639,3.148,1089,2.852,1808,4.389,2101,6.537,2112,5.44,2292,4.166,2298,5.44,2299,5.44,2313,3.902,2314,4.391,2315,4.391,2316,6.121,2317,4.391,2318,6.121,2319,4.391,2320,6.121,2321,6.121,2322,6.121,2323,4.391,2324,6.121,2325,4.391,2326,4.391,2327,4.391]],["title/classes/Timestamp.html",[0,0.111,151,3.32]],["body/classes/Timestamp.html",[0,0.093,2,1.183,3,0.05,4,0.05,5,0.05,10,0.255,11,1.072,13,0.552,14,0.007,15,1.329,18,0.592,20,0.163,24,0.056,25,0.799,26,0.004,27,0.004,37,1.063,42,2.506,58,1.113,61,1.283,67,1.672,111,1.236,112,0.909,142,2.52,151,4.02,323,1.613,416,4.407,448,3.353,453,3.353,460,2.1,569,5.008,655,3.353,854,5.569,981,4.983,1221,5.569,1803,2.952,2328,3.448,2329,6.583,2330,5.607,2331,5.607,2332,5.607,2333,5.607,2334,5.607,2335,5.607,2336,4.983,2337,5.607,2338,5.607,2339,3.88,2340,5.607,2341,7.649,2342,3.88,2343,5.607,2344,3.88,2345,5.607,2346,3.88,2347,3.88,2348,3.88,2349,3.88,2350,3.88,2351,3.88,2352,3.88,2353,5.607,2354,5.607,2355,3.88,2356,3.88,2357,3.88]],["title/interfaces/TokenPayload.html",[430,3.007,490,2.153]],["body/interfaces/TokenPayload.html",[3,0.082,4,0.082,5,0.082,10,0.419,11,1.496,13,0.513,14,0.007,24,0.092,25,1.314,26,0.006,27,0.006,37,1.263,42,2.579,414,7.836,417,6.322,430,5.493,490,2.967,492,3.816,1061,6.434,2358,5.671,2359,5.204]],["title/classes/TokenVerificationDto.html",[0,0.111,1341,3.522]],["body/classes/TokenVerificationDto.html",[0,0.186,2,1.921,3,0.081,4,0.081,5,0.081,10,0.414,11,1.485,13,0.414,14,0.007,15,1.43,16,1.274,17,3.189,18,0.518,20,0.183,21,3.709,22,3.709,23,2.648,24,0.112,25,1.298,26,0.006,27,0.006,345,4.68,1338,5.566,1341,6.399,2360,6.899,2361,5.601,2362,6.302]],["title/classes/TwoFactorAuthenticationCodeDto.html",[0,0.111,2363,3.522]],["body/classes/TwoFactorAuthenticationCodeDto.html",[0,0.185,2,1.898,3,0.08,4,0.08,5,0.08,10,0.409,11,1.473,13,0.409,14,0.007,15,1.42,16,1.258,17,3.15,18,0.511,20,0.181,21,3.681,22,3.681,23,2.616,24,0.09,26,0.006,27,0.006,264,5.004,391,5.004,727,5.077,729,5.533,2363,5.861,2364,5.861,2365,6.847,2366,6.822]],["title/controllers/TwoFactorAuthenticationController.html",[54,1.235,378,3.522]],["body/controllers/TwoFactorAuthenticationController.html",[0,0.081,3,0.044,4,0.044,5,0.044,10,0.222,13,0.399,14,0.007,16,1.229,18,0.499,20,0.235,24,0.049,26,0.004,27,0.004,37,0.982,54,0.902,56,0.919,58,1.006,61,1.184,62,0.379,66,1.683,67,1.063,111,1.141,112,0.839,178,1.663,242,2.087,263,1.457,264,3.948,265,4.624,269,4.134,270,3.007,271,4.142,274,3.564,278,1.487,290,2.904,291,1.95,292,2.759,293,1.164,294,3.521,295,2.574,296,1.573,297,1.821,298,4.93,299,1.765,300,3.503,301,3.451,305,1.617,306,2.759,307,1.821,308,1.494,309,3.007,310,2.683,311,1.765,319,1.95,320,0.992,321,1.818,323,1.942,324,1.708,335,4.134,340,5.403,341,3.857,343,2.198,350,2.759,359,3.007,360,2.904,376,4.138,378,3.857,389,2.303,390,5.136,391,4.93,452,3.451,459,2.357,460,1.899,728,3.857,1062,2.574,1339,2.759,2028,3.007,2363,5.987,2364,5.136,2366,5.505,2367,3.384,2368,5.403,2369,3.384,2370,3.384,2371,3.384,2372,3.384,2373,3.384,2374,3.384,2375,5.069,2376,3.384,2377,3.384,2378,3.384,2379,3.384,2380,3.384,2381,3.384,2382,4.506,2383,3.384,2384,3.384,2385,6.751,2386,5.069,2387,5.069,2388,3.384,2389,3.384]],["title/injectables/TwoFactorAuthenticationService.html",[255,0.748,376,3.151]],["body/injectables/TwoFactorAuthenticationService.html",[0,0.093,3,0.05,4,0.05,5,0.05,10,0.254,13,0.473,14,0.007,15,1.468,18,0.592,20,0.239,24,0.056,26,0.004,27,0.004,32,3.6,37,1.163,38,3.161,58,1.111,61,1.281,62,0.433,66,1.55,67,1.379,111,1.352,112,0.995,116,3.536,117,1.419,242,2.008,255,0.904,256,1.203,278,1.641,298,4.678,299,2.018,310,3.516,311,2.018,320,1.641,321,1.673,323,1.61,324,1.304,345,2.153,349,2.944,376,3.809,390,5.813,391,4.963,394,5.165,406,2.944,489,2.083,1305,3.156,1358,3.156,1366,3.44,2364,5.813,2366,4.564,2382,7.079,2390,5.596,2391,5.596,2392,5.596,2393,5.596,2394,3.87,2395,5.596,2396,3.87,2397,5.596,2398,3.87,2399,3.87,2400,3.44,2401,3.87,2402,3.44,2403,3.87,2404,3.87,2405,3.87,2406,3.87,2407,3.87,2408,3.87,2409,3.87]],["title/classes/UpdateCategoryDto.html",[0,0.111,526,3.32]],["body/classes/UpdateCategoryDto.html",[0,0.179,2,1.81,3,0.076,4,0.076,5,0.076,10,0.39,11,1.43,13,0.491,14,0.007,15,1.378,16,1.512,18,0.614,20,0.173,21,3.573,22,3.573,23,2.494,24,0.086,25,1.222,26,0.006,27,0.006,35,2.649,42,2.28,112,1.131,526,5.871,791,4.516,792,4.841,796,5.362,846,5.573,2410,7.276,2411,5.276,2412,5.276,2413,5.937]],["title/classes/UpdatePostDto.html",[0,0.111,1725,3.32]],["body/classes/UpdatePostDto.html",[0,0.172,2,1.692,3,0.071,4,0.071,5,0.071,10,0.364,11,1.37,13,0.521,14,0.007,15,1.545,16,1.604,18,0.652,20,0.161,21,3.79,22,3.79,23,2.332,24,0.08,25,1.143,26,0.005,27,0.005,35,2.567,42,2.184,671,4.571,796,5.137,843,4.526,844,6.035,846,5.706,848,4.933,1725,5.688,2411,4.933,2412,4.933,2414,7.451,2415,5.55,2416,5.55,2417,5.55,2418,5.55,2419,5.55]],["title/entities/User.html",[28,1.773,38,1.661]],["body/entities/User.html",[0,0.091,3,0.03,4,0.03,5,0.062,10,0.153,11,0.725,13,0.564,14,0.007,15,1.541,16,1.738,18,0.706,20,0.189,24,0.034,25,0.481,26,0.003,27,0.003,28,0.894,29,4.447,30,1.181,32,3.984,35,1.549,37,1.399,38,1.718,39,2.665,42,1.156,43,2.665,46,2.074,49,4.256,50,0.874,52,1.256,112,0.661,137,1.794,178,4.224,250,2.665,293,2.355,418,5.115,599,3.26,621,1.903,812,1.516,854,3.581,1061,5.427,1232,3.753,1234,3.092,1235,4.128,1517,1.673,1553,1.903,1599,3.905,1653,3.37,1657,3.37,1660,6.736,1663,3.092,1670,4.9,1674,3.905,1681,2.074,1693,1.903,1989,3.905,2420,2.074,2421,4.256,2422,5.39,2423,4.256,2424,3.905,2425,3.905,2426,3.905,2427,3.905,2428,4.256,2429,4.256,2430,4.256,2431,5.39,2432,5.514,2433,3.792,2434,2.334,2435,4.789,2436,2.334,2437,2.334,2438,2.334,2439,3.792,2440,2.334,2441,3.792,2442,2.334,2443,3.792,2444,2.334,2445,3.792,2446,2.334,2447,2.334,2448,7.134,2449,2.334,2450,2.334,2451,2.334,2452,2.334,2453,2.334,2454,2.334,2455,2.334,2456,3.792,2457,3.792,2458,2.334,2459,2.334,2460,2.334,2461,2.334,2462,3.792,2463,2.334,2464,2.334,2465,4.789,2466,2.334,2467,2.334,2468,2.334,2469,2.334,2470,2.334,2471,2.334,2472,2.334,2473,2.334,2474,2.334,2475,2.334]],["title/controllers/UsersController.html",[54,1.235,2476,3.522]],["body/controllers/UsersController.html",[0,0.081,3,0.043,4,0.043,5,0.104,10,0.221,13,0.474,14,0.007,16,1.459,18,0.593,20,0.229,24,0.049,26,0.004,27,0.004,35,1.09,37,1.166,54,0.898,56,0.915,58,1.003,61,1.406,62,0.377,65,1.45,66,0.933,67,1.413,111,1.355,112,0.997,242,2.248,263,1.45,271,4.413,274,3.813,278,1.975,293,1.159,294,1.757,295,5.49,296,1.566,297,1.813,298,4.375,299,3.162,305,1.61,307,1.813,308,1.487,310,2.676,323,0.969,324,1.135,360,3.448,452,2.293,518,4.585,529,2.747,530,3.623,534,2.747,535,2.416,536,2.563,539,1.704,641,1.941,1243,4.12,1596,6.735,1602,2.747,1693,2.747,2476,3.844,2477,2.994,2478,4.491,2479,4.491,2480,4.491,2481,4.491,2482,3.369,2483,3.369,2484,3.369,2485,3.369,2486,3.369,2487,3.369,2488,3.369,2489,3.369,2490,3.369,2491,3.369,2492,3.369,2493,3.369,2494,3.369,2495,3.369,2496,3.369,2497,6.063,2498,2.994,2499,3.369,2500,3.369,2501,3.369,2502,5.053,2503,3.369,2504,3.369,2505,5.053,2506,5.053,2507,3.369,2508,3.369,2509,3.369,2510,3.369,2511,3.369,2512,3.369,2513,3.369,2514,3.369,2515,3.369,2516,3.369,2517,3.369,2518,3.369,2519,3.369,2520,3.369]],["title/modules/UsersModule.html",[69,1.007,100,2.668]],["body/modules/UsersModule.html",[0,0.122,3,0.066,4,0.066,5,0.066,14,0.007,20,0.262,24,0.074,26,0.005,27,0.005,29,4.406,38,1.832,56,1.843,62,0.572,69,1.476,71,1.757,72,2.719,86,5.912,100,5.346,101,2.85,102,2.146,103,2.146,105,2.657,106,2.541,124,4.539,310,4.123,379,4.057,557,2.841,558,2.047,649,5.194,652,3.662,2476,5.795,2498,4.539,2521,4.539,2522,4.539,2523,4.539,2524,5.107,2525,5.107,2526,4.539,2527,5.107,2528,5.107,2529,5.107]],["title/injectables/UsersService.html",[255,0.748,310,2.044]],["body/injectables/UsersService.html",[0,0.034,3,0.018,4,0.018,5,0.058,10,0.093,13,0.507,14,0.007,15,1.57,18,0.635,20,0.166,24,0.02,26,0.002,27,0.002,35,1.467,37,1.248,38,2.619,42,2.71,50,0.53,58,0.493,61,1.487,62,0.158,66,0.392,67,1.556,111,1.451,112,1.111,137,1.87,178,1.958,242,2.287,255,0.401,256,0.44,278,2.102,310,1.096,320,0.728,321,1.192,323,2.196,324,2.841,346,2.523,394,1.78,417,5.717,427,1.076,428,1.076,429,2.024,447,1.154,448,0.846,453,0.846,454,0.846,459,2.108,460,1.699,461,2.206,479,1.258,537,0.716,558,0.567,570,2.704,588,0.787,589,2.078,601,1.015,625,1.015,638,3.101,639,1.015,872,3.032,971,2.024,1062,1.888,1095,1.78,1221,2.588,1229,3.663,1243,2.024,1252,4.783,1260,3.798,1262,5.08,1400,2.206,1417,2.206,1599,1.154,1981,4.389,2119,2.206,2368,2.206,2421,4.437,2423,2.947,2424,1.154,2425,1.154,2426,1.154,2427,1.154,2428,3.542,2429,3.542,2430,1.258,2478,2.206,2479,2.206,2480,2.206,2481,2.206,2526,1.258,2530,1.258,2531,2.482,2532,2.482,2533,2.482,2534,2.482,2535,2.482,2536,2.482,2537,2.482,2538,2.482,2539,2.482,2540,2.482,2541,2.482,2542,2.482,2543,1.415,2544,1.415,2545,2.482,2546,2.482,2547,4.993,2548,1.415,2549,2.482,2550,1.415,2551,2.482,2552,1.415,2553,2.482,2554,1.415,2555,2.482,2556,1.415,2557,2.482,2558,1.415,2559,2.482,2560,1.415,2561,2.482,2562,1.415,2563,2.482,2564,1.415,2565,2.482,2566,1.415,2567,1.415,2568,2.482,2569,1.415,2570,2.482,2571,1.415,2572,2.482,2573,1.415,2574,2.482,2575,1.415,2576,2.482,2577,1.415,2578,2.482,2579,1.415,2580,2.482,2581,1.415,2582,2.482,2583,1.415,2584,2.482,2585,1.415,2586,1.415,2587,1.415,2588,1.415,2589,2.482,2590,2.482,2591,1.415,2592,1.415,2593,1.415,2594,2.482,2595,1.415,2596,1.415,2597,3.985,2598,2.482,2599,2.482,2600,2.482,2601,1.415,2602,1.415,2603,5.382,2604,1.415,2605,2.482,2606,3.985,2607,2.482,2608,1.415,2609,1.415,2610,1.415,2611,1.415,2612,2.482,2613,1.415,2614,1.415,2615,1.415,2616,1.415,2617,1.415,2618,1.415,2619,1.415,2620,1.415,2621,1.415,2622,1.415,2623,1.415,2624,1.415,2625,1.415,2626,2.482,2627,1.415,2628,1.415,2629,1.415,2630,1.415]],["title/interfaces/VerificationTokenPayload.html",[490,2.153,1090,3.522]],["body/interfaces/VerificationTokenPayload.html",[3,0.085,4,0.085,5,0.085,10,0.435,11,1.531,13,0.435,14,0.007,15,1.585,24,0.096,25,1.365,26,0.006,27,0.006,137,3.346,345,3.689,490,3.082,492,3.964,786,3.689,1090,6.542,2359,5.406,2631,5.892]],["title/coverage.html",[2632,5.178]],["body/coverage.html",[0,0.208,1,1.081,5,0.018,6,2.386,7,1.263,8,1.619,9,2.032,13,0.093,14,0.007,25,0.293,26,0.002,27,0.002,28,2.564,29,0.923,31,1.263,38,0.894,54,2.087,55,1.081,57,1.263,63,0.968,127,1.081,130,1.341,131,1.787,138,1.787,149,1.019,151,1.019,157,1.081,161,1.787,163,1.619,167,1.787,172,1.081,174,1.081,179,0.923,255,1.383,257,1.263,261,1.081,262,1.263,264,0.923,268,0.968,271,0.699,286,1.019,293,0.857,300,0.819,303,1.081,308,0.627,310,0.627,312,1.081,314,0.923,316,0.923,345,0.791,372,1.019,373,1.019,374,1.019,375,1.019,376,0.968,378,1.081,389,1.696,390,1.896,391,2.161,399,1.263,430,0.923,460,0.532,480,0.741,481,1.263,490,2.664,491,1.081,493,1.263,494,2.032,497,1.081,498,1.263,504,1.081,505,1.263,513,1.019,516,0.819,518,0.968,526,1.019,532,0.968,535,1.019,561,1.263,590,1.081,594,1.263,614,1.263,622,1.263,623,2.032,631,1.081,632,1.263,636,1.081,638,0.819,653,1.081,654,1.263,662,0.968,684,0.765,698,1.263,724,1.081,725,1.263,726,1.159,727,2.032,730,0.85,731,1.263,741,1.081,742,1.263,746,1.019,749,1.081,756,1.019,761,1.019,777,1.081,781,1.081,785,1.081,786,3.188,787,1.263,788,1.263,790,1.263,791,2.532,793,1.263,794,1.263,799,1.263,800,1.263,805,1.263,806,1.263,808,1.019,814,1.263,815,1.263,833,1.081,834,1.263,835,1.263,841,1.019,842,1.263,843,2.032,850,1.081,851,1.263,859,1.019,860,2.721,861,1.263,862,1.019,863,1.263,864,1.263,867,0.968,868,1.263,869,1.263,872,1.081,873,1.263,874,1.263,878,1.081,879,1.263,892,1.081,898,0.923,899,0.968,914,1.019,915,1.263,916,1.263,918,0.968,920,1.551,941,1.159,958,1.081,959,1.263,1014,1.019,1015,1.263,1016,1.081,1017,1.263,1033,1.081,1034,1.263,1054,1.159,1056,1.263,1074,1.263,1079,0.923,1090,1.081,1122,1.019,1123,1.263,1124,1.263,1132,1.081,1133,1.263,1140,0.968,1152,1.263,1182,1.263,1205,1.159,1206,1.263,1207,1.263,1218,1.159,1220,1.159,1221,0.923,1229,0.968,1232,0.968,1235,0.968,1238,1.263,1313,1.263,1314,2.032,1317,1.263,1318,1.263,1321,1.263,1322,1.263,1332,1.263,1333,1.263,1337,1.081,1338,2.386,1339,2.032,1341,1.081,1344,0.968,1358,2.032,1420,1.081,1421,1.263,1422,0.923,1423,1.263,1433,1.081,1434,1.263,1476,1.081,1477,1.263,1478,1.263,1491,1.263,1492,1.263,1506,2.532,1507,2.032,1508,1.263,1509,2.032,1510,1.263,1529,1.263,1535,1.081,1536,1.263,1537,1.263,1541,1.263,1543,1.263,1550,1.263,1566,1.263,1580,1.263,1584,1.263,1585,1.263,1587,1.081,1588,1.263,1634,1.081,1635,1.263,1645,1.263,1687,1.159,1688,1.263,1703,1.081,1704,1.263,1706,1.081,1707,1.263,1725,1.019,1730,0.923,1734,1.081,1767,1.081,1778,2.032,1809,1.081,1810,1.159,1827,1.263,1861,8.553,1890,1.263,1891,2.032,1897,1.263,1898,0.923,1905,1.159,1911,1.081,1912,1.263,1918,0.968,1920,0.923,1929,1.263,1943,1.263,1950,1.081,1951,1.263,1966,1.263,1977,1.159,1978,1.159,1982,1.263,1987,1.263,2003,1.081,2004,2.721,2005,1.263,2006,1.159,2007,1.263,2009,1.263,2010,1.263,2011,1.263,2012,1.081,2013,1.263,2044,1.263,2080,1.019,2081,1.263,2082,1.263,2091,1.263,2157,1.081,2158,1.263,2165,0.968,2186,1.263,2208,1.081,2209,2.386,2210,1.263,2211,1.263,2212,1.081,2213,1.263,2228,1.081,2229,1.263,2235,1.081,2263,1.263,2264,1.263,2292,0.968,2294,1.081,2297,1.263,2313,1.263,2328,1.263,2358,1.263,2359,2.032,2360,1.263,2361,1.263,2363,1.081,2364,2.532,2365,1.263,2410,1.263,2414,1.263,2420,1.263,2476,1.081,2477,1.263,2530,1.263,2631,1.263,2632,1.159,2633,1.421,2634,1.421,2635,8.239,2636,6.018,2637,3.328,2638,8.239,2639,8.293,2640,1.263,2641,5.006,2642,1.263,2643,7.543,2644,4.548,2645,1.421,2646,1.421,2647,2.492,2648,2.492,2649,1.263,2650,4.548,2651,1.263,2652,1.263,2653,1.263,2654,1.263,2655,1.263,2656,1.421,2657,1.421,2658,1.421,2659,1.421,2660,1.263,2661,1.263,2662,1.263,2663,1.263,2664,1.263,2665,1.263,2666,1.263,2667,1.263,2668,1.263,2669,1.263,2670,1.263,2671,1.421,2672,1.421]],["title/dependencies.html",[72,2.235,2259,3.141]],["body/dependencies.html",[0,0.129,3,0.047,14,0.007,23,1.548,26,0.004,27,0.004,50,2.023,62,0.413,72,1.477,117,1.35,118,3.275,136,3.005,142,2.393,147,3.275,155,2.803,160,2.508,166,2.642,179,3.507,243,3.872,299,2.816,343,3.507,384,2.05,386,2.393,429,3.005,558,1.477,657,3.005,679,3.005,680,3.005,711,3.005,754,2.642,812,2.393,998,3.275,999,3.275,1028,2.803,1029,3.275,1192,3.275,1215,3.275,1268,3.275,1269,3.275,1382,3.275,1422,3.507,1518,5.046,1547,3.275,1602,4.403,1606,3.275,1701,3.275,1765,5.212,1766,3.275,1803,4.862,1807,3.275,1808,2.642,1981,3.005,2057,3.275,2220,2.642,2400,3.275,2402,3.275,2673,3.684,2674,3.684,2675,3.684,2676,5.4,2677,3.684,2678,3.684,2679,3.684,2680,3.684,2681,3.684,2682,3.684,2683,5.4,2684,3.684,2685,6.391,2686,6.391,2687,3.684,2688,3.684,2689,3.684,2690,3.684,2691,6.391,2692,3.684,2693,3.684,2694,3.684,2695,3.684,2696,5.4,2697,3.684,2698,3.684,2699,3.684,2700,3.684,2701,3.684,2702,3.684,2703,3.684,2704,3.684,2705,3.684,2706,3.684,2707,3.684,2708,3.684,2709,3.684,2710,3.684,2711,3.684,2712,3.684,2713,3.684,2714,3.684,2715,3.684,2716,3.684,2717,3.684,2718,3.684,2719,3.684,2720,3.684,2721,3.684,2722,3.684,2723,5.4,2724,3.684,2725,3.684,2726,3.684,2727,3.684,2728,3.684,2729,3.684,2730,3.684,2731,3.684,2732,3.684,2733,3.684,2734,3.684,2735,3.275,2736,3.684,2737,3.684,2738,3.684,2739,3.684,2740,3.684,2741,3.684,2742,3.684,2743,3.684,2744,3.684,2745,3.684,2746,3.684,2747,3.684]],["title/miscellaneous/enumerations.html",[2748,2.621,2749,4.956]],["body/miscellaneous/enumerations.html",[10,0.457,14,0.007,26,0.006,27,0.006,416,4.749,2120,7.325,2748,4.737,2749,6.186,2750,6.96,2751,8.242,2752,6.96,2753,6.96,2754,6.96,2755,6.96,2756,6.96]],["title/miscellaneous/functions.html",[2748,2.621,2757,4.956]],["body/miscellaneous/functions.html",[10,0.371,13,0.476,14,0.007,26,0.005,27,0.005,37,1.292,61,1.101,111,1.502,112,1.105,416,3.257,920,4.51,941,5.911,1061,5.514,1174,6.526,1218,5.911,1220,5.911,1221,4.708,1225,5.024,2649,5.024,2651,7.112,2652,5.024,2653,6.442,2660,5.024,2661,6.442,2662,5.024,2663,6.442,2664,7.112,2669,5.024,2670,6.442,2748,3.847,2757,5.024,2758,5.652,2759,5.652,2760,5.652,2761,5.652,2762,5.652,2763,5.652,2764,5.652,2765,5.652,2766,5.652,2767,8.441]],["title/index.html",[10,0.253,2768,3.851,2769,3.851]],["body/index.html",[4,0.067,14,0.007,26,0.005,27,0.005,143,3.951,330,4.616,480,2.708,569,3.951,589,2.708,657,4.235,950,4.616,1102,4.616,1287,4.616,1449,4.616,2336,4.616,2632,4.235,2770,5.193,2771,5.193,2772,6.86,2773,5.193,2774,5.193,2775,5.193,2776,5.193,2777,5.193,2778,6.827,2779,4.616,2780,4.616,2781,5.193,2782,8.9,2783,5.193,2784,5.193,2785,5.193,2786,8.727,2787,5.193,2788,6.86,2789,5.193,2790,5.193,2791,5.193,2792,6.86,2793,6.86,2794,5.193,2795,5.193,2796,5.193,2797,6.097,2798,6.86,2799,5.193,2800,5.193,2801,5.193,2802,5.193,2803,5.193,2804,4.616,2805,5.193,2806,5.193,2807,5.193,2808,5.193,2809,5.193,2810,5.193,2811,5.193,2812,5.193,2813,5.193,2814,5.193,2815,5.193,2816,4.616]],["title/modules.html",[71,2.184]],["body/modules.html",[14,0.005,26,0.005,27,0.005,70,3.511,71,1.588,76,2.998,77,3.309,78,3.309,79,3.309,80,3.309,81,3.309,82,3.309,83,3.141,84,2.998,85,3.309,86,3.141,87,3.309,88,3.309,89,3.309,90,3.309,91,3.309,92,3.309,93,3.309,94,3.309,95,3.141,96,3.309,97,3.309,98,3.309,99,3.309,100,2.659,649,2.76,1464,7.675,2804,8.474,2817,9.535,2818,9.535,2819,9.676,2820,8.635]],["title/overview.html",[2821,5.643]],["body/overview.html",[2,0.682,14,0.007,26,0.003,27,0.003,30,1.133,56,0.608,63,3.167,70,7.216,71,0.77,72,1.469,73,1.99,74,1.99,75,1.99,76,5.723,77,4.254,78,4.254,79,4.823,80,3.337,81,4.254,82,3.337,83,5.212,84,4.559,85,4.823,86,4.578,87,5.21,88,3.337,89,5.033,90,3.337,91,4.254,92,4.254,93,4.254,94,3.337,95,4.946,96,5.21,97,3.337,98,3.337,99,4.823,100,4.716,101,1.54,102,0.94,103,0.94,256,0.696,300,3.876,310,2.969,314,4.369,316,4.369,368,1.99,369,1.99,370,1.99,372,3.337,373,3.337,374,3.337,375,3.337,376,3.167,492,1.339,532,3.167,553,1.99,554,1.99,638,3.876,647,1.99,648,1.99,649,4.471,662,3.167,691,1.99,693,1.99,914,4.823,918,3.167,1054,1.825,1067,1.99,1068,1.99,1070,1.99,1079,4.369,1117,1.99,1118,1.99,1119,1.99,1140,3.167,1147,1.99,1149,1.99,1226,1.99,1227,1.99,1228,1.99,1229,4.578,1344,3.167,1354,1.99,1355,1.99,1411,1.703,1559,1.99,1560,1.99,1561,1.99,1730,3.022,1758,1.99,1759,1.99,1918,3.167,1920,3.022,1924,1.99,1925,1.99,1960,1.99,1961,1.99,2038,1.99,2039,1.99,2041,1.99,2086,1.99,2087,1.99,2088,1.99,2128,1.99,2165,3.167,2178,1.99,2180,1.99,2289,1.99,2290,1.99,2292,3.167,2521,1.99,2522,1.99,2523,1.99,2821,1.99,2822,2.239,2823,2.239,2824,2.239,2825,2.239,2826,2.239]],["title/properties.html",[11,1.067,2259,3.141]],["body/properties.html",[11,1.356,14,0.007,26,0.006,27,0.006,569,5.393,589,3.697,2735,6.3,2778,6.3,2779,6.3,2780,6.3,2797,6.3,2816,6.3,2827,7.089]],["title/miscellaneous/variables.html",[2748,2.621,2828,4.956]],["body/miscellaneous/variables.html",[10,0.306,13,0.555,14,0.007,15,1.441,25,1.741,26,0.005,27,0.005,29,3.025,33,4.139,34,4.139,35,2.063,36,4.139,38,1.671,67,0.977,112,0.643,137,1.745,149,3.34,179,4.141,250,2.591,416,4.872,418,5.605,845,5.199,1025,3.34,1221,4.141,1411,4.85,1413,4.139,1734,4.85,1778,3.798,1779,4.139,1809,5.53,1810,5.199,1977,3.798,1978,5.199,2422,4.139,2424,3.798,2425,3.798,2426,3.798,2427,3.798,2431,4.139,2640,4.139,2642,5.666,2654,4.139,2655,5.666,2665,4.139,2666,5.666,2667,4.139,2668,5.666,2748,3.17,2828,4.139,2829,4.657,2830,4.657,2831,4.657,2832,4.657,2833,4.657,2834,4.657,2835,4.657,2836,4.657,2837,4.657,2838,4.657,2839,4.657,2840,4.657,2841,4.657,2842,4.657,2843,4.657,2844,4.657,2845,4.657,2846,4.657]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1861,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2739,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2715,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":2745,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1468,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.0",{"_index":2716,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2714,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":2732,"title":{},"body":{"dependencies.html":{}}}],["0.5.5",{"_index":2684,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":2702,"title":{},"body":{"dependencies.html":{}}}],["0.6.12",{"_index":2682,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":2706,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2638,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2647,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2657,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2635,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":2659,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2639,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2643,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2644,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2636,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2648,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2637,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":2127,"title":{},"body":{"injectables/StripeService.html":{}}}],["1",{"_index":1411,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2735,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1.1.19",{"_index":2674,"title":{},"body":{"dependencies.html":{}}}],["1.4.3",{"_index":2697,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2717,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2736,"title":{},"body":{"dependencies.html":{}}}],["1.6.7",{"_index":2679,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":447,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["10.0.13",{"_index":2683,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1772,"title":{},"body":{"modules/PostsModule.html":{}}}],["100.0.0",{"_index":2719,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1455,"title":{},"body":{"controllers/HealthController.html":{}}}],["1062",{"_index":455,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["12",{"_index":2823,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":2731,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1776,"title":{},"body":{"modules/PostsModule.html":{}}}],["1586].includes(error?.code",{"_index":456,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["16.5.0",{"_index":2720,"title":{},"body":{"dependencies.html":{}}}],["17.6.0",{"_index":2727,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1414,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["2.0.0",{"_index":2686,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":2692,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2718,"title":{},"body":{"dependencies.html":{}}}],["2.1137.0",{"_index":2710,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":2729,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":2722,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":2126,"title":{},"body":{"injectables/StripeService.html":{}}}],["21",{"_index":2822,"title":{},"body":{"overview.html":{}}}],["24",{"_index":1312,"title":{},"body":{"injectables/FilesService.html":{}}}],["27",{"_index":2128,"title":{},"body":{"injectables/StripeService.html":{},"overview.html":{}}}],["2fa",{"_index":2367,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["3.0.2",{"_index":2741,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":2699,"title":{},"body":{"dependencies.html":{}}}],["3.6.3",{"_index":2713,"title":{},"body":{"dependencies.html":{}}}],["3.77.2",{"_index":2744,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":2708,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1454,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":1450,"title":{},"body":{"controllers/HealthController.html":{}}}],["34",{"_index":2824,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":2840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["37",{"_index":2825,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":2734,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2746,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":2704,"title":{},"body":{"dependencies.html":{}}}],["4.12.0",{"_index":2721,"title":{},"body":{"dependencies.html":{}}}],["4.8.3",{"_index":2712,"title":{},"body":{"dependencies.html":{}}}],["4/7",{"_index":2646,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1505,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["404",{"_index":1409,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["5",{"_index":1771,"title":{},"body":{"modules/PostsModule.html":{}}}],["5.0.1",{"_index":2711,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1463,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1503,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["57",{"_index":2645,"title":{},"body":{"coverage.html":{}}}],["6.7.5",{"_index":2730,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1311,"title":{},"body":{"injectables/FilesService.html":{}}}],["7.0.1",{"_index":2724,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":2742,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":2826,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":2690,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":2694,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":2688,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2693,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":2689,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":2685,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":2676,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2747,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":2691,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":2726,"title":{},"body":{"dependencies.html":{}}}],["9.6.0",{"_index":2743,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{1,14",{"_index":1997,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":1008,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["abortearly",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["access",{"_index":1882,"title":{},"body":{"injectables/PostsService.html":{}}}],["access_token",{"_index":1392,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesskeyid",{"_index":1276,"title":{},"body":{"injectables/FilesService.html":{}}}],["accesstokencookie",{"_index":341,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["account",{"_index":334,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["accountsid",{"_index":2058,"title":{},"body":{"injectables/SmsService.html":{}}}],["acl",{"_index":1286,"title":{},"body":{"injectables/FilesService.html":{}}}],["activate",{"_index":333,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["add",{"_index":2227,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["addavatar",{"_index":2478,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addavatar(@req",{"_index":2503,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(request",{"_index":2482,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(userid",{"_index":2546,"title":{},"body":{"injectables/UsersService.html":{}}}],["addcreditcard",{"_index":881,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(@body",{"_index":903,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(creditcard",{"_index":884,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcarddto",{"_index":1,"title":{"classes/AddCreditCardDto.html":{}},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["addprivatefile",{"_index":2479,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addprivatefile(@req",{"_index":2514,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(request",{"_index":2485,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(userid",{"_index":2549,"title":{},"body":{"injectables/UsersService.html":{}}}],["address",{"_index":29,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"injectables/EmailConfirmationService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":2466,"title":{},"body":{"entities/User.html":{}}}],["address_id",{"_index":2435,"title":{},"body":{"entities/User.html":{}}}],["addresses",{"_index":53,"title":{},"body":{"entities/Address.html":{}}}],["addsubscriber",{"_index":2265,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["addsubscriber(subscriber",{"_index":2267,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["adm",{"_index":2700,"title":{},"body":{"dependencies.html":{}}}],["age=${this.configservice.get('jwt_access_token_expiration_time",{"_index":440,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=${this.configservice.get('jwt_refresh_token_expiration_time",{"_index":444,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":445,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["alias",{"_index":2470,"title":{},"body":{"entities/User.html":{}}}],["allocated",{"_index":1457,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":462,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["amazing",{"_index":2805,"title":{},"body":{"index.html":{}}}],["amount",{"_index":795,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripeService.html":{}}}],["amqp",{"_index":2703,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":2705,"title":{},"body":{"dependencies.html":{}}}],["amqps://${user}:${password}@${host",{"_index":2282,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["another",{"_index":2474,"title":{},"body":{"entities/User.html":{}}}],["anyfilesinterceptor",{"_index":1601,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["apiversion",{"_index":2125,"title":{},"body":{"injectables/StripeService.html":{}}}],["apollo",{"_index":2707,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":2784,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":55,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1100,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["applications",{"_index":2777,"title":{},"body":{"index.html":{}}}],["apply(httplogsmiddleware",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":70,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":2073,"title":{},"body":{"injectables/SmsService.html":{}}}],["appservice",{"_index":63,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":1793,"title":{},"body":{"classes/PostsResolver.html":{}}}],["args('input",{"_index":1823,"title":{},"body":{"classes/PostsResolver.html":{}}}],["asc",{"_index":1869,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attachcreditcard",{"_index":2092,"title":{},"body":{"injectables/StripeService.html":{}}}],["attachcreditcard(paymentmethodid",{"_index":2100,"title":{},"body":{"injectables/StripeService.html":{}}}],["auth",{"_index":1200,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["auth.guard",{"_index":1801,"title":{},"body":{"classes/PostsResolver.html":{}}}],["auth.guard.ts",{"_index":1423,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:7",{"_index":1426,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["auth.oauth2client",{"_index":1381,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["auth_pass",{"_index":1775,"title":{},"body":{"modules/PostsModule.html":{}}}],["authenticate",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@body",{"_index":1348,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(@req",{"_index":367,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":1367,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":1340,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticateuserdata",{"_index":1360,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticateuserdata(name",{"_index":1369,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller",{"_index":382,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":1339,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:17",{"_index":1342,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller.ts:32",{"_index":2373,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:41",{"_index":2377,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:57",{"_index":2370,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.guard",{"_index":305,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1507,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.module",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication.module.ts",{"_index":1357,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["authentication.service",{"_index":301,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":1358,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:10",{"_index":1366,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:105",{"_index":1370,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:17",{"_index":2394,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:26",{"_index":1374,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:30",{"_index":2396,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:37",{"_index":2398,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:40",{"_index":1372,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:55",{"_index":1376,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:72",{"_index":1378,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:81",{"_index":1380,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:87",{"_index":1368,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication/authentication.service",{"_index":710,"title":{},"body":{"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication/dto/token",{"_index":2360,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["authentication/google",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication/guards/graphql",{"_index":1800,"title":{},"body":{"classes/PostsResolver.html":{}}}],["authentication/guards/jwt",{"_index":539,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication/interfaces/request",{"_index":641,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":437,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":261,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":76,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":300,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationtoken",{"_index":720,"title":{},"body":{"injectables/ChatService.html":{}}}],["authenticator",{"_index":2399,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":2403,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri(user.email",{"_index":2404,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":2407,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1427,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":1429,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1542,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":480,"title":{"classes/Author.html":{}},"body":{"classes/Author.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"entities/Message.html":{},"entities/Post.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"index.html":{}}}],["author.posts",{"_index":733,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{}}}],["author.posts)@joincolumn({name",{"_index":1649,"title":{},"body":{"entities/Post.html":{}}}],["author_id",{"_index":1650,"title":{},"body":{"entities/Post.html":{}}}],["authorid",{"_index":1646,"title":{},"body":{"entities/Post.html":{}}}],["authorids",{"_index":1692,"title":{},"body":{"injectables/PostLoader.html":{}}}],["authorids.map(authorid",{"_index":1697,"title":{},"body":{"injectables/PostLoader.html":{}}}],["authors",{"_index":495,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["authtoken",{"_index":2060,"title":{},"body":{"injectables/SmsService.html":{}}}],["autoloadentities",{"_index":1011,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autoschemafile",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1464,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":2421,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":324,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostLoader.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1269,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["backers",{"_index":2806,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1089,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["badrequestexception('bad",{"_index":1116,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('credit",{"_index":2151,"title":{},"body":{"injectables/StripeService.html":{}}}],["badrequestexception('customer",{"_index":2323,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["badrequestexception('email",{"_index":1107,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('missing",{"_index":2169,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["badrequestexception('phone",{"_index":2032,"title":{},"body":{"controllers/SmsController.html":{}}}],["badrequestexception('this",{"_index":2200,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["badrequestexception('wrong",{"_index":2074,"title":{},"body":{"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["based",{"_index":2248,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["batchauthors",{"_index":1689,"title":{},"body":{"injectables/PostLoader.html":{}}}],["bcrypt",{"_index":429,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":479,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":2602,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":446,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":290,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["body.interface",{"_index":2164,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["body.interface.ts",{"_index":2007,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"coverage.html":{}}}],["body.middleware.ts",{"_index":2663,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bookproperties",{"_index":491,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"entities/Product.html":{},"coverage.html":{}}}],["boolean",{"_index":1061,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["boolean(configservice.get('graphql_playground",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["bootstrap",{"_index":2651,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brand",{"_index":499,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["browse",{"_index":2819,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2817,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1284,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":1260,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/RequestWithRawBody.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["buffer.from(job.returnvalue",{"_index":1624,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["building",{"_index":2773,"title":{},"body":{"index.html":{}}}],["buildschemaoptions",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["bull",{"_index":1606,"title":{},"body":{"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1629,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["c",{"_index":1471,"title":{},"body":{"controllers/HealthController.html":{}}}],["cache",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cache.interceptor",{"_index":1738,"title":{},"body":{"controllers/PostsController.html":{}}}],["cache.interceptor.ts",{"_index":1478,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:5",{"_index":1482,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_key_metadata",{"_index":1483,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":1849,"title":{},"body":{"injectables/PostsService.html":{}}}],["cacheinterceptor",{"_index":1479,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey",{"_index":1484,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey(get_posts_cache_key",{"_index":1743,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachemanager",{"_index":1831,"title":{},"body":{"injectables/PostsService.html":{}}}],["cachemodule",{"_index":1761,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemodule.register",{"_index":1769,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemodule.registerasync",{"_index":1773,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachettl",{"_index":1728,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachettl(120",{"_index":1744,"title":{},"body":{"controllers/PostsController.html":{}}}],["callhandler",{"_index":1211,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate",{"_index":1057,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":1058,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["card",{"_index":2141,"title":{},"body":{"injectables/StripeService.html":{}}}],["card.dto",{"_index":896,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["card.dto.ts",{"_index":9,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["card.dto.ts:6",{"_index":19,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/SetDefaultCreditCardDto.html":{}}}],["cards",{"_index":880,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards.controller",{"_index":913,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cards.controller.ts",{"_index":879,"title":{},"body":{"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["cards.controller.ts:17",{"_index":886,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards.controller.ts:24",{"_index":894,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards.controller.ts:30",{"_index":890,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["cards.module.ts",{"_index":912,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cards/credit",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"coverage.html":{}}}],["cards/dto/add",{"_index":7,"title":{},"body":{"classes/AddCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/set",{"_index":2011,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["carproperties",{"_index":497,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"entities/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":2433,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":2838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":453,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["categories",{"_index":506,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/ProductCategoriesController.html":{}}}],["categories.controller",{"_index":556,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/ProductCategoriesModule.html":{}}}],["categories.controller.ts",{"_index":1912,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"coverage.html":{}}}],["categories.controller.ts:14",{"_index":1917,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["categories.controller.ts:21",{"_index":1916,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["categories.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["categories.module.ts",{"_index":1926,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["categories.service",{"_index":533,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{}}}],["categories.service.ts",{"_index":1929,"title":{},"body":{"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["categories.service.ts:15",{"_index":1937,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["categories.service.ts:19",{"_index":1936,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["categories.service.ts:8",{"_index":1933,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["categories/categories.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["categories/dto/create",{"_index":861,"title":{},"body":{"classes/CreateProductCategoryDto.html":{},"coverage.html":{}}}],["categories/entities/category.entity",{"_index":1677,"title":{},"body":{"entities/Post.html":{}}}],["categories/entities/product",{"_index":1905,"title":{},"body":{"entities/Product.html":{},"entities/ProductCategory.html":{},"coverage.html":{}}}],["categories/product",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["categoriescontroller",{"_index":504,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":77,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesrepository",{"_index":597,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesservice",{"_index":532,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["categoriesservice.getcategorybyid(1",{"_index":582,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category",{"_index":516,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateProductDto.html":{},"entities/Post.html":{},"entities/Product.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["category.dto",{"_index":538,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{}}}],["category.dto.ts",{"_index":791,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":2413,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:6",{"_index":792,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.entity",{"_index":1906,"title":{},"body":{"entities/Product.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{}}}],["category.entity.ts",{"_index":1943,"title":{},"body":{"entities/ProductCategory.html":{},"coverage.html":{}}}],["category.entity.ts:10",{"_index":1945,"title":{},"body":{"entities/ProductCategory.html":{}}}],["category.entity.ts:13",{"_index":1947,"title":{},"body":{"entities/ProductCategory.html":{}}}],["category.entity.ts:7",{"_index":1944,"title":{},"body":{"entities/ProductCategory.html":{}}}],["category.posts",{"_index":1683,"title":{},"body":{"entities/Post.html":{}}}],["category.posts)@jointable({name",{"_index":1655,"title":{},"body":{"entities/Post.html":{}}}],["category.products",{"_index":1899,"title":{},"body":{"entities/Product.html":{}}}],["category_id",{"_index":1686,"title":{},"body":{"entities/Post.html":{}}}],["categorynotfoundexception",{"_index":590,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":602,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["change",{"_index":2473,"title":{},"body":{"entities/User.html":{}}}],["channel",{"_index":2069,"title":{},"body":{"injectables/SmsService.html":{}}}],["charge",{"_index":633,"title":{},"body":{"controllers/ChargeController.html":{},"injectables/StripeService.html":{}}}],["charge(amount",{"_index":2103,"title":{},"body":{"injectables/StripeService.html":{}}}],["charge.controller",{"_index":651,"title":{},"body":{"modules/ChargeModule.html":{}}}],["charge.dto",{"_index":640,"title":{},"body":{"controllers/ChargeController.html":{}}}],["charge.dto.ts",{"_index":794,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["charge.dto.ts:6",{"_index":798,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["charge.dto.ts:9",{"_index":797,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["charge.paymentmethodid",{"_index":645,"title":{},"body":{"controllers/ChargeController.html":{}}}],["charge/charge.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["chargecontroller",{"_index":631,"title":{"controllers/ChargeController.html":{}},"body":{"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"coverage.html":{}}}],["chargemodule",{"_index":78,"title":{"modules/ChargeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChargeModule.html":{},"modules.html":{},"overview.html":{}}}],["chat.gateway",{"_index":696,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":681,"title":{},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["chatgateway",{"_index":653,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":79,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":662,"title":{"injectables/ChatService.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":1435,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkverificationcode",{"_index":2015,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(@req",{"_index":2034,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(request",{"_index":2017,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcodedto",{"_index":724,"title":{"classes/CheckVerificationCodeDto.html":{}},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["chosen",{"_index":2147,"title":{},"body":{"injectables/StripeService.html":{}}}],["city",{"_index":33,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AddCreditCardDto.html":{},"classes/Author.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/ObjectWithId.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Author.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/ObjectWithId.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":291,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["clearcache",{"_index":1828,"title":{},"body":{"injectables/PostsService.html":{}}}],["click",{"_index":1101,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["client",{"_index":2241,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["clientgrpc",{"_index":2238,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["clientid",{"_index":1383,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientproxy",{"_index":2219,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["clientproxyfactory",{"_index":2254,"title":{},"body":{"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["clientproxyfactory.create",{"_index":2257,"title":{},"body":{"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["clientsecret",{"_index":1385,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":368,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":369,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":371,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":370,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":553,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":554,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_chargemodule",{"_index":647,"title":{},"body":{"modules/ChargeModule.html":{},"overview.html":{}}}],["cluster_chargemodule_imports",{"_index":648,"title":{},"body":{"modules/ChargeModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":691,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":692,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":693,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_creditcardsmodule",{"_index":910,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_creditcardsmodule_imports",{"_index":911,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_emailconfirmationmodule",{"_index":1067,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":1070,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":1069,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":1068,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1117,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1118,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1119,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1147,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1148,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1149,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1226,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1227,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1228,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule",{"_index":1354,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule_imports",{"_index":1356,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["cluster_googleauthenticationmodule_providers",{"_index":1355,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1559,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1560,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1561,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1758,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":1759,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productcategoriesmodule",{"_index":1924,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"overview.html":{}}}],["cluster_productcategoriesmodule_providers",{"_index":1925,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1960,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1961,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_smsmodule",{"_index":2038,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_exports",{"_index":2041,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_imports",{"_index":2040,"title":{},"body":{"modules/SmsModule.html":{}}}],["cluster_smsmodule_providers",{"_index":2039,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":2086,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":2087,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":2088,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2178,"title":{},"body":{"modules/StripeWebhookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2179,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["cluster_stripewebhookmodule_providers",{"_index":2180,"title":{},"body":{"modules/StripeWebhookModule.html":{},"overview.html":{}}}],["cluster_subscriptionmodule",{"_index":2289,"title":{},"body":{"modules/SubscriptionModule.html":{},"overview.html":{}}}],["cluster_subscriptionmodule_imports",{"_index":2291,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["cluster_subscriptionmodule_providers",{"_index":2290,"title":{},"body":{"modules/SubscriptionModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2521,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2523,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2524,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2522,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":2226,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["code",{"_index":728,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["code')@useguards(jwtauthenticationguard",{"_index":2020,"title":{},"body":{"controllers/SmsController.html":{}}}],["code.dto",{"_index":2028,"title":{},"body":{"controllers/SmsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto.ts",{"_index":727,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["code.dto.ts:6",{"_index":729,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["column",{"_index":39,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column({default",{"_index":2448,"title":{},"body":{"entities/User.html":{}}}],["column({name",{"_index":2456,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1660,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["column({type",{"_index":1557,"title":{},"body":{"entities/Log.html":{},"entities/Post.html":{},"entities/Product.html":{}}}],["column({unique",{"_index":2443,"title":{},"body":{"entities/User.html":{}}}],["command",{"_index":823,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.author",{"_index":831,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.comment",{"_index":830,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandbus",{"_index":752,"title":{},"body":{"controllers/CommentsController.html":{}}}],["commandhandler",{"_index":824,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":826,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commands/handlers/create",{"_index":778,"title":{},"body":{"modules/CommentsModule.html":{}}}],["commands/implementations/create",{"_index":757,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comment",{"_index":730,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"coverage.html":{}}}],["comment.command",{"_index":758,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{}}}],["comment.command.ts",{"_index":800,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["comment.command.ts:4",{"_index":802,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:6",{"_index":804,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:7",{"_index":803,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.dto",{"_index":755,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{}}}],["comment.dto.ts",{"_index":806,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:12",{"_index":810,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":807,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.handler",{"_index":779,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":815,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:13",{"_index":822,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:8",{"_index":819,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.post",{"_index":1664,"title":{},"body":{"entities/Post.html":{}}}],["comments",{"_index":740,"title":{},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"entities/Post.html":{}}}],["comments.controller",{"_index":775,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.dto",{"_index":760,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.dto.ts",{"_index":1318,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["comments.dto.ts:7",{"_index":1320,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["comments.handler",{"_index":783,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.handler.ts",{"_index":1322,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["comments.handler.ts:12",{"_index":1326,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.handler.ts:8",{"_index":1324,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.query",{"_index":763,"title":{},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{}}}],["comments.query.ts",{"_index":1333,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["comments.query.ts:1",{"_index":1334,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:2",{"_index":1335,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments/comments.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["comments/entities/comment.entity",{"_index":1678,"title":{},"body":{"entities/Post.html":{}}}],["commentscontroller",{"_index":741,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":80,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":820,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["compodoc/compodoc",{"_index":2673,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/StripeModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{}}}],["configmodule.forroot",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["configservice.get('db_database",{"_index":1007,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_host",{"_index":1003,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password",{"_index":1006,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port",{"_index":1004,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_username",{"_index":1005,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('grpc_connection_url",{"_index":2262,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["configservice.get('jwt_access_token_expiration_time')}s",{"_index":398,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":395,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":1525,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('mail_host",{"_index":1196,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('mail_password",{"_index":1203,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('mail_port",{"_index":1197,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('mail_service",{"_index":1195,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('mail_username",{"_index":1201,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('node_env",{"_index":946,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('rabbitmq_host",{"_index":2277,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('rabbitmq_password",{"_index":2276,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('rabbitmq_queue_name",{"_index":2279,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('rabbitmq_user",{"_index":2275,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('redis_host",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('redis_password",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('redis_port",{"_index":1774,"title":{},"body":{"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('redis_username",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('subscribers_service_host",{"_index":2287,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('subscribers_service_port",{"_index":2288,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('twilio_account_sid",{"_index":2059,"title":{},"body":{"injectables/SmsService.html":{}}}],["configservice.get('twilio_auth_token",{"_index":2061,"title":{},"body":{"injectables/SmsService.html":{}}}],["configure",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":331,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/StripeService.html":{}}}],["confirm(@body",{"_index":1048,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":1037,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":1035,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmation.controller",{"_index":1072,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.controller.ts",{"_index":1034,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmation.controller.ts:13",{"_index":1039,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.controller.ts:20",{"_index":1044,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.guard",{"_index":900,"title":{},"body":{"controllers/CreditCardsController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["confirmation.guard.ts",{"_index":1056,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["confirmation.guard.ts:6",{"_index":1060,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["confirmation.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["confirmation.module.ts",{"_index":1071,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.service",{"_index":315,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["confirmation.service.ts",{"_index":1074,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation.service.ts:18",{"_index":1088,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:37",{"_index":1086,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:45",{"_index":1082,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:53",{"_index":1084,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:9",{"_index":1080,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation/dto/confirm",{"_index":787,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmation/email",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation/guards/email",{"_index":899,"title":{},"body":{"controllers/CreditCardsController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["confirmation/interfaces/verification",{"_index":2631,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["confirmation?token=${token",{"_index":1098,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmationdata",{"_index":1040,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":1108,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{}}}],["confirmemail",{"_index":1075,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":1081,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemaildto",{"_index":785,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmphonenumber",{"_index":2046,"title":{},"body":{"injectables/SmsService.html":{}}}],["confirmphonenumber(userid",{"_index":2049,"title":{},"body":{"injectables/SmsService.html":{}}}],["connectedsocket",{"_index":675,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":1981,"title":{},"body":{"modules/PubSubModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["console.log('called",{"_index":1170,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["console.log('hello",{"_index":1169,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["console.log(cookie",{"_index":719,"title":{},"body":{"injectables/ChatService.html":{}}}],["console.log(credentials",{"_index":1350,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["consolelogger",{"_index":917,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":925,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":323,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"injectables/CustomLogger.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostLoader.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"modules/SubscribersModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants/post",{"_index":1735,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["constructeventfrompayload",{"_index":2093,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructeventfrompayload(signature",{"_index":2105,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor",{"_index":320,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('subscribers_package",{"_index":2240,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["constructor(@inject('subscribers_service",{"_index":2223,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["constructor(@injectqueue('image",{"_index":1608,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["constructor(@injectrepository(category",{"_index":596,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(@injectrepository(comment",{"_index":827,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(@injectrepository(log",{"_index":1574,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(authenticationservice",{"_index":702,"title":{},"body":{"injectables/ChatService.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(chatservice",{"_index":661,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(comment",{"_index":801,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":818,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":1185,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":923,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(elasticsearchservice",{"_index":1020,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["constructor(emailservice",{"_index":1156,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(eventsrepository",{"_index":2189,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["constructor(jwtservice",{"_index":1078,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(logsrepository",{"_index":1568,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(postid",{"_index":626,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1830,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(postsservice",{"_index":1780,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostLoader.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/ProductCategoriesController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(productcategoriesrepository",{"_index":1932,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["constructor(productsrepository",{"_index":1967,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(public",{"_index":1336,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["constructor(publicfilesrepository",{"_index":1246,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(stripeservice",{"_index":2314,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["constructor(usersrepository",{"_index":2543,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":406,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostLoader.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":671,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/EmailScheduleDto.html":{},"entities/Message.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["context",{"_index":836,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"entities/Log.html":{},"classes/PostsResolver.html":{}}}],["context.gethandler",{"_index":1486,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.req.user",{"_index":1825,"title":{},"body":{"classes/PostsResolver.html":{}}}],["context.switchtohttp().getrequest",{"_index":1063,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["controller",{"_index":54,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":2379,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":318,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('categories",{"_index":541,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('charge",{"_index":642,"title":{},"body":{"controllers/ChargeController.html":{}}}],["controller('comments",{"_index":764,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('credit",{"_index":901,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["controller('email",{"_index":1047,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('google",{"_index":1347,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('health",{"_index":1445,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('optimize",{"_index":1607,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('posts",{"_index":1740,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('product",{"_index":1919,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["controller('products",{"_index":1957,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('sms",{"_index":2029,"title":{},"body":{"controllers/SmsController.html":{}}}],["controller('stripe",{"_index":2167,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller('subscribers",{"_index":2222,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["controller('subscriptions",{"_index":2306,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["controller('users",{"_index":2500,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":343,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{}}}],["count",{"_index":1866,"title":{},"body":{"injectables/PostsService.html":{}}}],["countdata",{"_index":1872,"title":{},"body":{"injectables/PostsService.html":{}}}],["country",{"_index":34,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2632,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrsmodule",{"_index":776,"title":{},"body":{"modules/CommentsModule.html":{}}}],["create",{"_index":1417,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["create(userdata",{"_index":2551,"title":{},"body":{"injectables/UsersService.html":{}}}],["create({body",{"_index":2079,"title":{},"body":{"injectables/SmsService.html":{}}}],["create({to",{"_index":2068,"title":{},"body":{"injectables/SmsService.html":{}}}],["createcategory",{"_index":507,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategory(@body",{"_index":545,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(category",{"_index":512,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategorydto",{"_index":513,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcharge",{"_index":634,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(@body",{"_index":643,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(charge",{"_index":635,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createchargedto",{"_index":636,"title":{"classes/CreateChargeDto.html":{}},"body":{"controllers/ChargeController.html":{},"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":743,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(@body",{"_index":765,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(comment",{"_index":745,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentcommand",{"_index":756,"title":{"classes/CreateCommentCommand.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":770,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentdto",{"_index":746,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":777,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcustomer",{"_index":2094,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcustomer(name",{"_index":2108,"title":{},"body":{"injectables/StripeService.html":{}}}],["created_at",{"_index":2422,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":1647,"title":{},"body":{"entities/Post.html":{}}}],["createdatecolumn",{"_index":1553,"title":{},"body":{"entities/Log.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":2439,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn({type",{"_index":1667,"title":{},"body":{"entities/Post.html":{}}}],["createduser",{"_index":449,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":451,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createevent",{"_index":2187,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["createevent(id",{"_index":2192,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["createlog",{"_index":1567,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1571,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":833,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createmonthlysubscription",{"_index":2298,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{}}}],["createmonthlysubscription(@req",{"_index":2308,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createmonthlysubscription(customerid",{"_index":2316,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["createmonthlysubscription(request",{"_index":2300,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createpost",{"_index":1708,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["createpost(@body",{"_index":1751,"title":{},"body":{"controllers/PostsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["createpost(createpostinput",{"_index":1784,"title":{},"body":{"classes/PostsResolver.html":{}}}],["createpost(post",{"_index":1713,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(subscriber",{"_index":2215,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["createpostdto",{"_index":841,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostinput",{"_index":850,"title":{"classes/CreatePostInput.html":{}},"body":{"classes/CreatePostInput.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["createproduct",{"_index":1913,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1922,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["createproduct(product",{"_index":1952,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(productcategory",{"_index":1915,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["createproductcategory",{"_index":1930,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["createproductcategory(category",{"_index":1935,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["createproductcategorydto",{"_index":859,"title":{"classes/CreateProductCategoryDto.html":{}},"body":{"classes/CreateProductCategoryDto.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["createproductdto",{"_index":862,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1308,"title":{},"body":{"injectables/FilesService.html":{}}}],["createsubscriberdto",{"_index":867,"title":{"classes/CreateSubscriberDto.html":{}},"body":{"classes/CreateSubscriberDto.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"coverage.html":{}}}],["createsubscription",{"_index":2095,"title":{},"body":{"injectables/StripeService.html":{}}}],["createsubscription(priceid",{"_index":2110,"title":{},"body":{"injectables/StripeService.html":{}}}],["createtransport",{"_index":1191,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":872,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createwithgoogle",{"_index":2531,"title":{},"body":{"injectables/UsersService.html":{}}}],["createwithgoogle(email",{"_index":2553,"title":{},"body":{"injectables/UsersService.html":{}}}],["creationdate",{"_index":1551,"title":{},"body":{"entities/Log.html":{}}}],["credentials",{"_index":473,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["credentials.email",{"_index":1352,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["credit",{"_index":8,"title":{},"body":{"classes/AddCreditCardDto.html":{},"modules/AppModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["creditcard",{"_index":887,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["creditcardscontroller",{"_index":878,"title":{"controllers/CreditCardsController.html":{}},"body":{"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"coverage.html":{}}}],["creditcardsmodule",{"_index":81,"title":{"modules/CreditCardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CreditCardsModule.html":{},"modules.html":{},"overview.html":{}}}],["cron",{"_index":1159,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob",{"_index":1168,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":1175,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx",{"_index":1430,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["ctx.getcontext().req",{"_index":1432,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["currency",{"_index":2136,"title":{},"body":{"injectables/StripeService.html":{}}}],["currenthashedrefreshtoken",{"_index":2423,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["currentpage",{"_index":1875,"title":{},"body":{"injectables/PostsService.html":{}}}],["custom",{"_index":1563,"title":{},"body":{"modules/LoggerModule.html":{}}}],["customer",{"_index":2134,"title":{},"body":{"injectables/StripeService.html":{}}}],["customer.subscription.created",{"_index":2176,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customer.subscription.updated",{"_index":2175,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":2101,"title":{},"body":{"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["customlogger",{"_index":914,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["customscalar",{"_index":2329,"title":{},"body":{"classes/Timestamp.html":{}}}],["data",{"_index":1578,"title":{},"body":{"injectables/LogsService.html":{},"injectables/StripeWebhookService.html":{}}}],["data.customer",{"_index":2204,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["data.latest_invoice",{"_index":2155,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.latest_invoice.payment_intent",{"_index":2156,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.status",{"_index":2206,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["database",{"_index":568,"title":{},"body":{"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{}}}],["database.logger",{"_index":1000,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["databaselogger",{"_index":958,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["databasemodule",{"_index":82,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":1264,"title":{},"body":{"injectables/FilesService.html":{}}}],["dataloader",{"_index":1701,"title":{},"body":{"injectables/PostLoader.html":{},"dependencies.html":{}}}],["dataloader(async",{"_index":1691,"title":{},"body":{"injectables/PostLoader.html":{}}}],["date",{"_index":854,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"entities/Log.html":{},"entities/Post.html":{},"classes/Timestamp.html":{},"entities/User.html":{}}}],["date(emailschedule.date",{"_index":1173,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date(number",{"_index":2353,"title":{},"body":{"classes/Timestamp.html":{}}}],["datescalarmode",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["db_host",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["db_password",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["db_port",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["db_username",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":919,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":927,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeconfirmationtoken",{"_index":1076,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":1083,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/Author.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"entities/StripeEvent.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":25,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"entities/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"interfaces/SubscribersGrpcService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":2144,"title":{},"body":{"injectables/StripeService.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["definition",{"_index":586,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["delete",{"_index":529,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":550,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete(':id')@useguards(jwtauthenticationguard",{"_index":519,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete('avatar",{"_index":2507,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('avatar')@useguards(jwtauthenticationguard",{"_index":2489,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar",{"_index":2480,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteavatar(@req",{"_index":2508,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(request",{"_index":2488,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(userid",{"_index":2555,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteavatarwithqueryrunner",{"_index":2532,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteavatarwithqueryrunner(userid",{"_index":2557,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletecategory",{"_index":508,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["deletecategory(@param",{"_index":551,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategory(id",{"_index":564,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletecategory(undefined",{"_index":517,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategorybyid",{"_index":562,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletecategorybyid(id",{"_index":572,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletepost",{"_index":1709,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param",{"_index":1756,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1836,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(undefined",{"_index":1716,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepublicfile",{"_index":1240,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfile(fileid",{"_index":1250,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfilewithqueryrunner",{"_index":1241,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfilewithqueryrunner(fileid",{"_index":1253,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteresponse",{"_index":609,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":611,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deletes",{"_index":567,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["dependencies",{"_index":72,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":612,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["description",{"_index":569,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Timestamp.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":2785,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1460,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1438,"title":{},"body":{"controllers/HealthController.html":{}}}],["dist/**/*.entity.js",{"_index":1010,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["documentation",{"_index":594,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["doesn't",{"_index":1415,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["don't",{"_index":1487,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["donecallback",{"_index":2767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["driver",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/add",{"_index":895,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/check",{"_index":2027,"title":{},"body":{"controllers/SmsController.html":{}}}],["dto/confirm",{"_index":1045,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["dto/create",{"_index":537,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"injectables/LogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SubscribersController.html":{},"injectables/UsersService.html":{}}}],["dto/email",{"_index":1142,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/get",{"_index":759,"title":{},"body":{"controllers/CommentsController.html":{}}}],["dto/register.dto",{"_index":302,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/set",{"_index":897,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/token",{"_index":1345,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["dto/two",{"_index":2378,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/update",{"_index":540,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["duplicate",{"_index":2469,"title":{},"body":{"entities/User.html":{}}}],["durable",{"_index":2284,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["e2e",{"_index":2794,"title":{},"body":{"index.html":{}}}],["eager",{"_index":2432,"title":{},"body":{"entities/User.html":{}}}],["efficient",{"_index":2774,"title":{},"body":{"index.html":{}}}],["elastic/elasticsearch",{"_index":2675,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch",{"_index":1443,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["elasticsearchhealthindicator",{"_index":1014,"title":{"injectables/ElasticsearchHealthIndicator.html":{}},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["elasticsearchservice",{"_index":1021,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["emai.dto",{"_index":1046,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["emai.dto.ts",{"_index":788,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["emai.dto.ts:6",{"_index":789,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"injectables/StripeService.html":{},"interfaces/SubscriberGrpc.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":1121,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":1092,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["email_confirmation_url",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationcontroller",{"_index":1033,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":898,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"controllers/CreditCardsController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":83,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":314,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":84,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":1139,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1179,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1176,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1177,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1122,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":1132,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":85,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1140,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":1079,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["endpoint",{"_index":1274,"title":{},"body":{"injectables/FilesService.html":{}}}],["engine",{"_index":500,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["entities",{"_index":30,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/address.entity",{"_index":2527,"title":{},"body":{"modules/UsersModule.html":{}}}],["entities/category.entity",{"_index":559,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/comment.entity",{"_index":780,"title":{},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["entities/log.entity",{"_index":1564,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["entities/message.entity",{"_index":695,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["entities/post.entity",{"_index":1763,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/private",{"_index":1236,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/product",{"_index":1927,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{}}}],["entities/product.entity",{"_index":1964,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["entities/public",{"_index":1233,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["entities/stripe",{"_index":2183,"title":{},"body":{"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{}}}],["entities/user.entity",{"_index":2526,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":28,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity({name",{"_index":52,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{}}}],["entity{.ts,.js",{"_index":1009,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":2749,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":945,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["epoch",{"_index":2338,"title":{},"body":{"classes/Timestamp.html":{}}}],["er_dup_entry",{"_index":458,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["error",{"_index":454,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["error(message",{"_index":930,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.enum",{"_index":2122,"title":{},"body":{"injectables/StripeService.html":{}}}],["error.enum.ts",{"_index":2751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["error.status",{"_index":1408,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":457,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{}}}],["error?.name",{"_index":1113,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["error?.type",{"_index":2145,"title":{},"body":{"injectables/StripeService.html":{}}}],["event",{"_index":2171,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{}}}],["event.data.object",{"_index":2202,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["event.entity",{"_index":2184,"title":{},"body":{"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{}}}],["event.entity.ts",{"_index":2082,"title":{},"body":{"entities/StripeEvent.html":{},"coverage.html":{}}}],["event.entity.ts:6",{"_index":2084,"title":{},"body":{"entities/StripeEvent.html":{}}}],["event.type",{"_index":2174,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["eventsrepository",{"_index":2191,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["example",{"_index":581,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceed",{"_index":1462,"title":{},"body":{"controllers/HealthController.html":{}}}],["exceptions/category",{"_index":591,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceptions/post",{"_index":1851,"title":{},"body":{"injectables/PostsService.html":{}}}],["exclude",{"_index":2465,"title":{},"body":{"entities/User.html":{}}}],["excludenullinterceptor",{"_index":1205,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["execute",{"_index":817,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["execute(command",{"_index":821,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["execute(query",{"_index":1325,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":1059,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["exist",{"_index":570,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["exists",{"_index":463,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expand",{"_index":2154,"title":{},"body":{"injectables/StripeService.html":{}}}],["expired",{"_index":1115,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expires",{"_index":1310,"title":{},"body":{"injectables/FilesService.html":{}}}],["expiresin",{"_index":397,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":24,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":379,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":299,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1596,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["extends",{"_index":624,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{}}}],["extractjwt",{"_index":1516,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors([(request",{"_index":1522,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":391,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["factor.guard",{"_index":1739,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1536,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":392,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1537,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:10",{"_index":1538,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:23",{"_index":1539,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor/dto/two",{"_index":2365,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["factor/two",{"_index":390,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["failed",{"_index":1032,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["false",{"_index":418,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["fetches",{"_index":576,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["field",{"_index":486,"title":{},"body":{"classes/Author.html":{},"classes/CreatePostInput.html":{}}}],["field(undefined",{"_index":482,"title":{},"body":{"classes/Author.html":{},"classes/CreatePostInput.html":{}}}],["field({nullable",{"_index":855,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["file.buffer",{"_index":2505,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.entity",{"_index":1234,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/User.html":{}}}],["file.entity.ts",{"_index":1891,"title":{},"body":{"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"coverage.html":{}}}],["file.entity.ts:10",{"_index":1893,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:12",{"_index":1984,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.entity.ts:13",{"_index":1895,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:6",{"_index":1983,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.entity.ts:7",{"_index":1892,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:9",{"_index":1985,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.info.owner.id",{"_index":2625,"title":{},"body":{"injectables/UsersService.html":{}}}],["file.key",{"_index":1295,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":2506,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.owner",{"_index":2445,"title":{},"body":{"entities/User.html":{}}}],["file.stream.pipe(res",{"_index":2520,"title":{},"body":{"controllers/UsersController.html":{}}}],["file]{@link",{"_index":606,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["fileid",{"_index":1252,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["fileinfo",{"_index":1303,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinfo.key",{"_index":1307,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":2499,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":1262,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["files",{"_index":1599,"title":{},"body":{"controllers/OptimizeController.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["files.service",{"_index":1231,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/entities/private",{"_index":2468,"title":{},"body":{"entities/User.html":{}}}],["files/entities/public",{"_index":2467,"title":{},"body":{"entities/User.html":{}}}],["files/files.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["files/files.service",{"_index":2587,"title":{},"body":{"injectables/UsersService.html":{}}}],["filesmodule",{"_index":86,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1229,"title":{"injectables/FilesService.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finally",{"_index":2621,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmanyoptions",{"_index":1841,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions['where",{"_index":1859,"title":{},"body":{"injectables/PostsService.html":{}}}],["findoneparams",{"_index":518,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["first",{"_index":1066,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["flag",{"_index":1412,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["forroutes",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":630,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/PostNotFoundException.html":{}}}],["found.exception",{"_index":592,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["found.exception.ts",{"_index":623,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":627,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{}}}],["framework",{"_index":2772,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["fuel",{"_index":502,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["fullname",{"_index":1988,"title":{},"body":{"classes/RegisterDto.html":{}}}],["function",{"_index":2650,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2757,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":1242,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatepresignedurl(key",{"_index":1255,"title":{},"body":{"injectables/FilesService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":2390,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":2393,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get(':id",{"_index":523,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["get('files",{"_index":2510,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files')@useguards(jwtauthenticationguard",{"_index":2492,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id",{"_index":2516,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id')@useguards(jwtauthenticationguard",{"_index":2495,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('image/:id",{"_index":1593,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('me",{"_index":366,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('monthly",{"_index":2310,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('monthly')@useguards(jwtauthenticationguard",{"_index":2304,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get()@healthcheck",{"_index":1436,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@useguards(jwtauthenticationguard",{"_index":889,"title":{},"body":{"controllers/CreditCardsController.html":{},"controllers/SubscribersController.html":{}}}],["get()@useinterceptors(httpcacheinterceptor)@cachekey(get_posts_cache_key)@cachettl(120",{"_index":1721,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(key",{"_index":2836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache",{"_index":2835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache_key",{"_index":1734,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallcategories",{"_index":509,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getallmessages",{"_index":699,"title":{},"body":{"injectables/ChatService.html":{}}}],["getallprivatefiles",{"_index":2481,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getallprivatefiles(@req",{"_index":2511,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(request",{"_index":2491,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(userid",{"_index":2559,"title":{},"body":{"injectables/UsersService.html":{}}}],["getallproductcategories",{"_index":1931,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["getallproducts",{"_index":1914,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getallsubscribers",{"_index":2266,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["getallsubscribers(params",{"_index":2269,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["getauthenticateduser",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":409,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":2533,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":2561,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":2534,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":2563,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyids",{"_index":2535,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyids(ids",{"_index":2565,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcategorybyid",{"_index":510,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcategorybyid(@param",{"_index":543,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategorybyid(id",{"_index":578,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["getcategorybyid(undefined",{"_index":522,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcomments",{"_index":744,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(@query",{"_index":771,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(undefined",{"_index":748,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":749,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":781,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":761,"title":{"classes/GetCommentsQuery.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":773,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcookieforlogout",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiesforuser",{"_index":1361,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiesforuser(user",{"_index":1371,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":413,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":419,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcreditcards",{"_index":882,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(@req",{"_index":908,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(request",{"_index":888,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["gethello",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getjobresult",{"_index":1590,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1616,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1592,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":941,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":949,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":2763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmonthlysubscription",{"_index":2299,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{}}}],["getmonthlysubscription(@req",{"_index":2311,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getmonthlysubscription(customerid",{"_index":2318,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["getmonthlysubscription(request",{"_index":2303,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getpostbyid",{"_index":1710,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1748,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1838,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1718,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":1711,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getposts(page",{"_index":1840,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts(search",{"_index":1720,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithauthors",{"_index":1829,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostswithauthors(offset",{"_index":1843,"title":{},"body":{"injectables/PostsService.html":{}}}],["getprivatefile",{"_index":1243,"title":{},"body":{"injectables/FilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprivatefile(@req",{"_index":2517,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprivatefile(fileid",{"_index":1257,"title":{},"body":{"injectables/FilesService.html":{}}}],["getprivatefile(request",{"_index":2494,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprivatefile(userid",{"_index":2568,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrequest",{"_index":1424,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["getrequest(context",{"_index":1425,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["getsubscribers",{"_index":2214,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["getting",{"_index":2768,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":1362,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":1373,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserfromauthenticationtoken",{"_index":404,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getuserfromauthenticationtoken(token",{"_index":421,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getuserfromsocket",{"_index":700,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserfromsocket(socket",{"_index":706,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":2536,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":2570,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":580,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["global",{"_index":1979,"title":{},"body":{"modules/PubSubModule.html":{}}}],["google",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["google.auth.oauth2",{"_index":1388,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":1390,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google_auth_client_id",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_secret",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["googleapis",{"_index":1382,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":1337,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"coverage.html":{}}}],["googleauthenticationmodule",{"_index":87,"title":{"modules/GoogleAuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleauthenticationservice",{"_index":1344,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["gqlexecutioncontext",{"_index":1428,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":1431,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["graph",{"_index":2820,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1803,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"classes/Timestamp.html":{},"dependencies.html":{}}}],["graphql_playground",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqljwtauthguard",{"_index":1420,"title":{"injectables/GraphqlJwtAuthGuard.html":{}},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forrootasync",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlresolveinfo",{"_index":1790,"title":{},"body":{"classes/PostsResolver.html":{}}}],["grow",{"_index":2801,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2230,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["grpc.controller",{"_index":2253,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["grpc.controller.ts",{"_index":2229,"title":{},"body":{"controllers/SubscribersGrpcController.html":{},"coverage.html":{}}}],["grpc.controller.ts:24",{"_index":2234,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["grpc.controller.ts:30",{"_index":2233,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["grpc.controller.ts:37",{"_index":2232,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["grpc.interface",{"_index":2271,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["grpc.interface.ts",{"_index":2211,"title":{},"body":{"interfaces/SubscriberGrpc.html":{},"coverage.html":{}}}],["grpc.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["grpc.module.ts",{"_index":2252,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["grpc.service.interface",{"_index":2237,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["grpc.service.interface.ts",{"_index":2264,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{},"coverage.html":{}}}],["grpc.service.interface.ts:5",{"_index":2268,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["grpc.service.interface.ts:6",{"_index":2270,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{}}}],["grpc/grpc",{"_index":2677,"title":{},"body":{"dependencies.html":{}}}],["grpc/interfaces/subscriber",{"_index":2210,"title":{},"body":{"interfaces/SubscriberGrpc.html":{},"coverage.html":{}}}],["grpc/interfaces/subscribers",{"_index":2263,"title":{},"body":{"interfaces/SubscribersGrpcService.html":{},"coverage.html":{}}}],["grpc/proto",{"_index":2680,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto/subscribers.proto",{"_index":2261,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["grpc/subscribers",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"coverage.html":{}}}],["guard",{"_index":1054,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1055,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["guards/jwt",{"_index":309,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["guards/local",{"_index":304,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["handle",{"_index":1223,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["handleconnection",{"_index":658,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(socket",{"_index":665,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleincomingevents",{"_index":2160,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleincomingevents(signature",{"_index":2161,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleregistereduser",{"_index":1363,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":1375,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hash",{"_index":2843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":425,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["header",{"_index":2170,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers",{"_index":2163,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers('stripe",{"_index":2168,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["health",{"_index":1016,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["health.controller",{"_index":1474,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1439,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckerror",{"_index":1027,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthcheckservice",{"_index":1440,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1433,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicator",{"_index":1018,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthindicatorresult",{"_index":1026,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthmodule",{"_index":88,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":1453,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello",{"_index":259,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1102,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["host",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SubscribersModule.html":{}}}],["html",{"_index":1099,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["httpcacheinterceptor",{"_index":1476,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["httpcode",{"_index":292,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":335,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":427,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["httpexception('something",{"_index":465,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpexception('user",{"_index":461,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpexception('wrong",{"_index":472,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httplogsmiddleware",{"_index":172,"title":{"injectables/HttpLogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLogsMiddleware.html":{},"coverage.html":{}}}],["httponly",{"_index":438,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":2813,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":428,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":464,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":468,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":2590,"title":{},"body":{"injectables/UsersService.html":{}}}],["icommandhandler",{"_index":816,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["id",{"_index":35,"title":{},"body":{"entities/Address.html":{},"classes/Author.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsHandler.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id.ts",{"_index":1585,"title":{},"body":{"classes/ObjectWithId.html":{},"coverage.html":{}}}],["id.ts:5",{"_index":1586,"title":{},"body":{"classes/ObjectWithId.html":{}}}],["identifier",{"_index":2633,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":2567,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignore",{"_index":595,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["image",{"_index":1630,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["image.processor.js",{"_index":1633,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["imagebuffer",{"_index":2547,"title":{},"body":{"injectables/UsersService.html":{}}}],["imagemin",{"_index":2723,"title":{},"body":{"dependencies.html":{}}}],["imageprocessor",{"_index":2653,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["imageprocessor(job",{"_index":2766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imagequeue",{"_index":1609,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implementations/create",{"_index":825,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["implementations/get",{"_index":1328,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implements",{"_index":655,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateCommentHandler.html":{},"classes/DatabaseLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/GetCommentsHandler.html":{},"injectables/HttpLogsMiddleware.html":{},"controllers/SubscribersGrpcController.html":{},"classes/Timestamp.html":{}}}],["import",{"_index":20,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{}}}],["in(ids",{"_index":2592,"title":{},"body":{"injectables/UsersService.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1680,"title":{},"body":{"entities/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1648,"title":{},"body":{"entities/Post.html":{}}}],["indicator",{"_index":1444,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["indicator.ts",{"_index":1017,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"coverage.html":{}}}],["indicator.ts:11",{"_index":1024,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["indicator.ts:6",{"_index":1022,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"dependencies.html":{}}}],["info.returntype",{"_index":1816,"title":{},"body":{"classes/PostsResolver.html":{}}}],["initiatephonenumberverification",{"_index":2016,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["initiatephonenumberverification(@req",{"_index":2030,"title":{},"body":{"controllers/SmsController.html":{}}}],["initiatephonenumberverification(phonenumber",{"_index":2052,"title":{},"body":{"injectables/SmsService.html":{}}}],["initiatephonenumberverification(request",{"_index":2022,"title":{},"body":{"controllers/SmsController.html":{}}}],["inject",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"modules/PubSubModule.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["inject(cache_manager",{"_index":1853,"title":{},"body":{"injectables/PostsService.html":{}}}],["inject(pub_sub",{"_index":1811,"title":{},"body":{"classes/PostsResolver.html":{}}}],["injectable",{"_index":255,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":256,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1604,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":588,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(message",{"_index":713,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectrepository(post",{"_index":1852,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1272,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(product",{"_index":1972,"title":{},"body":{"injectables/ProductsService.html":{}}}],["injectrepository(productcategory",{"_index":1938,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["injectrepository(publicfile",{"_index":1271,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(stripeevent",{"_index":2197,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["injectrepository(user",{"_index":2588,"title":{},"body":{"injectables/UsersService.html":{}}}],["inputs/post.input",{"_index":1802,"title":{},"body":{"classes/PostsResolver.html":{}}}],["inputtype",{"_index":858,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["installation",{"_index":2781,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2783,"title":{},"body":{"index.html":{}}}],["installsubscriptionhandlers",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["instanceof",{"_index":2350,"title":{},"body":{"classes/Timestamp.html":{}}}],["instead",{"_index":571,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["int",{"_index":487,"title":{},"body":{"classes/Author.html":{}}}],["integer",{"_index":2333,"title":{},"body":{"classes/Timestamp.html":{}}}],["intercept",{"_index":1208,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(context",{"_index":1209,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interceptors/http",{"_index":1737,"title":{},"body":{"controllers/PostsController.html":{}}}],["interface",{"_index":490,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SubscriberGrpc.html":{},"interfaces/SubscribersGrpcService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SubscriberGrpc.html":{},"interfaces/SubscribersGrpcService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":492,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SubscriberGrpc.html":{},"interfaces/SubscribersGrpcService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["interfaces/request",{"_index":306,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["interfaces/subscribers",{"_index":2236,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["interfaces/token",{"_index":431,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["interfaces/verification",{"_index":1091,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["internalservererrorexception",{"_index":2119,"title":{},"body":{"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["interval",{"_index":1166,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["interval(60000",{"_index":1161,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["invalidrequest",{"_index":2753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["inversejoincolumn",{"_index":1658,"title":{},"body":{"entities/Post.html":{}}}],["invoice_settings",{"_index":2143,"title":{},"body":{"injectables/StripeService.html":{}}}],["invoke",{"_index":2245,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["iqueryhandler",{"_index":1323,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["iscodevalid",{"_index":2385,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscompleted",{"_index":1620,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["iscreatinglogs",{"_index":1579,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":1127,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":1129,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{}}}],["isemailconfirmed",{"_index":2424,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["isglobal",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["ishealthy",{"_index":1019,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["ishealthy(key",{"_index":1023,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["isnotempty",{"_index":22,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber",{"_index":796,"title":{},"body":{"classes/CreateChargeDto.html":{},"classes/ObjectWithId.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber()@isoptional",{"_index":2411,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumberstring",{"_index":1315,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":846,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{},"classes/RegisterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1639,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":478,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isphonenumberconfirmed",{"_index":2425,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["isproduction",{"_index":2764,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":2607,"title":{},"body":{"injectables/UsersService.html":{}}}],["isregisteredwithgoogle",{"_index":2426,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["issecondfactorauthenticated",{"_index":414,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":21,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":17,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":2412,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@isoptional()@maxlength(200",{"_index":2416,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@matches(/^\\+[1",{"_index":1996,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(6",{"_index":1994,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isoptional",{"_index":1991,"title":{},"body":{"classes/RegisterDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":2391,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":2395,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":2427,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["items",{"_index":1865,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StripeService.html":{}}}],["items.length",{"_index":1873,"title":{},"body":{"injectables/PostsService.html":{}}}],["job",{"_index":1174,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"controllers/OptimizeController.html":{},"miscellaneous/functions.html":{}}}],["job.id",{"_index":1615,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1621,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":1181,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1614,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["john",{"_index":2842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().empty",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules/SubscribersGrpcModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1632,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["join(process.cwd",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/SubscribersGrpcModule.html":{}}}],["joincolumn",{"_index":1657,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":2437,"title":{},"body":{"entities/User.html":{}}}],["joincolumn({name",{"_index":1681,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["jointable",{"_index":1673,"title":{},"body":{"entities/Post.html":{}}}],["js",{"_index":2678,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1903,"title":{},"body":{"entities/Product.html":{}}}],["json.stringify(parameters",{"_index":995,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jwt",{"_index":1422,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/PostsResolver.html":{},"coverage.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_access_token_secret",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_expiration_time",{"_index":2839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_secret",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_secret",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":308,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1521,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":385,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["jwtmodule.register",{"_index":1073,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":393,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":312,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":372,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":407,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["jwtstrategy",{"_index":373,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1535,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":374,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2810,"title":{},"body":{"index.html":{}}}],["key",{"_index":1025,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["key.constant",{"_index":1736,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["key.constant.ts",{"_index":2655,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["key.startswith(get_posts_cache_key",{"_index":1857,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys",{"_index":1854,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys.foreach((key",{"_index":1856,"title":{},"body":{"injectables/PostsService.html":{}}}],["kind",{"_index":2348,"title":{},"body":{"classes/Timestamp.html":{}}}],["kind.int",{"_index":2355,"title":{},"body":{"classes/Timestamp.html":{}}}],["kind.string",{"_index":2356,"title":{},"body":{"classes/Timestamp.html":{}}}],["level",{"_index":837,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{}}}],["levels",{"_index":943,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["levels.ts",{"_index":2661,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":2816,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2798,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1636,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":1051,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":1043,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["list",{"_index":577,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["listcreditcards",{"_index":2096,"title":{},"body":{"injectables/StripeService.html":{}}}],["listcreditcards(customerid",{"_index":2113,"title":{},"body":{"injectables/StripeService.html":{}}}],["listenformessages",{"_index":659,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listenformessages(@messagebody",{"_index":683,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listenformessages(content",{"_index":668,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listsubscriptions",{"_index":2097,"title":{},"body":{"injectables/StripeService.html":{}}}],["listsubscriptions(priceid",{"_index":2115,"title":{},"body":{"injectables/StripeService.html":{}}}],["literal",{"_index":501,"title":{},"body":{"interfaces/CarProperties.html":{},"classes/PostsResolver.html":{},"interfaces/SubscribersGrpcService.html":{}}}],["live",{"_index":2247,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["loader",{"_index":2681,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":1547,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":303,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":375,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":920,"title":{"entities/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log(level",{"_index":970,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":933,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1573,"title":{},"body":{"injectables/LogsService.html":{}}}],["log.dto.ts",{"_index":835,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:2",{"_index":838,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:3",{"_index":840,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:4",{"_index":839,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log1",{"_index":1153,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["log2",{"_index":1154,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["log3",{"_index":1155,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["logger",{"_index":961,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/HttpLogsMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/PostsService.html":{}}}],["logger('http",{"_index":1496,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["logger(postsservice.name",{"_index":1848,"title":{},"body":{"injectables/PostsService.html":{}}}],["logger.service",{"_index":940,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":916,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:30",{"_index":934,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:40",{"_index":932,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:50",{"_index":938,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:60",{"_index":928,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:70",{"_index":936,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:9",{"_index":926,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":89,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["login",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["login(@req",{"_index":338,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["loglevel",{"_index":2765,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":948,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":962,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":973,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":362,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":963,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":975,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":964,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":977,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":965,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":979,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpLogsMiddleware.html":{},"entities/Log.html":{},"coverage.html":{}}}],["logs.service",{"_index":944,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":966,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":982,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsrepository",{"_index":1570,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":918,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["mail",{"_index":1190,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":1188,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":1765,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["manytomany",{"_index":620,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":617,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":739,"title":{},"body":{"entities/Comment.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":732,"title":{},"body":{"entities/Comment.html":{},"entities/Message.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["map",{"_index":1216,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["map(users.map(user",{"_index":1696,"title":{},"body":{"injectables/PostLoader.html":{}}}],["markemailasconfirmed",{"_index":2537,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":2572,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed",{"_index":2538,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed(userid",{"_index":2574,"title":{},"body":{"injectables/UsersService.html":{}}}],["matches",{"_index":1999,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":2002,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil((startid",{"_index":1878,"title":{},"body":{"injectables/PostsService.html":{}}}],["max",{"_index":439,"title":{},"body":{"injectables/AuthenticationService.html":{},"modules/PostsModule.html":{}}}],["maxlength",{"_index":2418,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["maxlength(200",{"_index":2419,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["memory",{"_index":1451,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1441,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":684,"title":{"entities/Message.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/HttpLogsMiddleware.html":{},"entities/Log.html":{},"entities/Message.html":{},"injectables/SmsService.html":{},"coverage.html":{}}}],["messagebody",{"_index":676,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messages",{"_index":688,"title":{},"body":{"classes/ChatGateway.html":{},"entities/Message.html":{}}}],["messagesrepository",{"_index":703,"title":{},"body":{"injectables/ChatService.html":{}}}],["metadata",{"_index":2738,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":566,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/HttpLogsMiddleware.html":{},"controllers/SubscribersGrpcController.html":{}}}],["methods",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["microservice",{"_index":2242,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["middleware.service",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware.service.ts",{"_index":1492,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{},"coverage.html":{}}}],["middleware.service.ts:6",{"_index":1497,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["middleware.service.ts:8",{"_index":1495,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["middlewareconsumer",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["milliseconds",{"_index":2335,"title":{},"body":{"classes/Timestamp.html":{}}}],["min",{"_index":1643,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1644,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":2000,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(6",{"_index":2001,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minute",{"_index":1171,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["miscellaneous",{"_index":2748,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2797,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mockedconfigservice",{"_index":2666,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":2668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":2642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2788,"title":{},"body":{"index.html":{}}}],["models/post.model",{"_index":1799,"title":{},"body":{"classes/PostsResolver.html":{}}}],["module",{"_index":69,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":71,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monthly_subscription_price_id",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["monthlysubscriptionstatus",{"_index":2428,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1449,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["morethan",{"_index":1850,"title":{},"body":{"injectables/PostsService.html":{}}}],["morethan(startid",{"_index":1863,"title":{},"body":{"injectables/PostsService.html":{}}}],["moved",{"_index":767,"title":{},"body":{"controllers/CommentsController.html":{}}}],["mutation",{"_index":1794,"title":{},"body":{"classes/PostsResolver.html":{}}}],["mutation(undefined)@useguards(graphqljwtauthguard",{"_index":1785,"title":{},"body":{"classes/PostsResolver.html":{}}}],["mysql",{"_index":1002,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mysql2",{"_index":2728,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2811,"title":{},"body":{"index.html":{}}}],["name",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["naming",{"_index":998,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["namingstrategy",{"_index":1013,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["need",{"_index":2472,"title":{},"body":{"entities/User.html":{}}}],["nest",{"_index":2778,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestframework",{"_index":2815,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1214,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nestjs/apollo",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":939,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2687,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cqrs",{"_index":754,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":1029,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/Author.html":{},"classes/CreatePostInput.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"classes/PostsResolver.html":{},"classes/Timestamp.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":386,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":2220,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":384,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1602,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1028,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":558,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":679,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":986,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":968,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1498,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["new",{"_index":460,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"modules/PubSubModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newcategory",{"_index":603,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["newfile",{"_index":1288,"title":{},"body":{"injectables/FilesService.html":{}}}],["newlog",{"_index":1575,"title":{},"body":{"injectables/LogsService.html":{}}}],["newmessage",{"_index":714,"title":{},"body":{"injectables/ChatService.html":{}}}],["newpost",{"_index":828,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["newproduct",{"_index":1974,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newproductcategory",{"_index":1940,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["newuser",{"_index":2597,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1210,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{}}}],["nextfunction",{"_index":1494,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["node.js",{"_index":2771,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1192,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":1193,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":1183,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":625,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/FilesService.html":{},"classes/PostNotFoundException.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('customer",{"_index":2326,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["notfoundexception('user",{"_index":2630,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":2782,"title":{},"body":{"index.html":{}}}],["null",{"_index":1221,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"entities/Post.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["null.interceptor.ts",{"_index":1207,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["null.interceptor.ts:8",{"_index":1212,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nullable",{"_index":1670,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["number",{"_index":42,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"classes/CreateChargeDto.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"interfaces/SubscriberGrpc.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["number(configservice.get('redis_port",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["number(id",{"_index":2519,"title":{},"body":{"controllers/UsersController.html":{}}}],["number(page",{"_index":1876,"title":{},"body":{"injectables/PostsService.html":{}}}],["number(value",{"_index":2352,"title":{},"body":{"classes/Timestamp.html":{}}}],["number(valuenode.value",{"_index":2357,"title":{},"body":{"classes/Timestamp.html":{}}}],["numberofcylinders",{"_index":503,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["oauth20",{"_index":2733,"title":{},"body":{"dependencies.html":{}}}],["oauthclient",{"_index":1359,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":845,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/EmailConfirmationService.html":{},"miscellaneous/variables.html":{}}}],["objecttype",{"_index":488,"title":{},"body":{"classes/Author.html":{}}}],["objectwithid",{"_index":808,"title":{"classes/ObjectWithId.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/ObjectWithId.html":{},"coverage.html":{}}}],["observable",{"_index":1213,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["off_session",{"_index":2138,"title":{},"body":{"injectables/StripeService.html":{}}}],["offset",{"_index":1845,"title":{},"body":{"injectables/PostsService.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2376,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["once",{"_index":1172,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["one",{"_index":535,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onetomany",{"_index":1674,"title":{},"body":{"entities/Post.html":{},"entities/ProductCategory.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1663,"title":{},"body":{"entities/Post.html":{},"entities/ProductCategory.html":{},"entities/User.html":{}}}],["onetoone",{"_index":49,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":46,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["ongatewayconnection",{"_index":656,"title":{},"body":{"classes/ChatGateway.html":{}}}],["onmoduleinit",{"_index":2231,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["open",{"_index":2799,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":1589,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{}}}],["optimize.controller",{"_index":1628,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize/optimize.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["optimizecontroller",{"_index":1587,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizemodule",{"_index":90,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules.html":{},"overview.html":{}}}],["optional",{"_index":37,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":924,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/EmailService.html":{},"injectables/PostsService.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["order",{"_index":1868,"title":{},"body":{"injectables/PostsService.html":{}}}],["original",{"_index":1488,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["originalurl",{"_index":1500,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["otpauthurl",{"_index":2382,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":2400,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":2821,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1301,"title":{},"body":{"injectables/FilesService.html":{},"entities/PrivateFile.html":{}}}],["owner.files",{"_index":1894,"title":{},"body":{"entities/PrivateFile.html":{}}}],["ownerid",{"_index":1261,"title":{},"body":{"injectables/FilesService.html":{}}}],["package",{"_index":2259,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/SubscribersGrpcModule.html":{}}}],["page",{"_index":1637,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["paginationparams",{"_index":1634,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["param",{"_index":530,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":1617,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":536,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/UsersController.html":{}}}],["params.ts",{"_index":1314,"title":{},"body":{"classes/FindOneParams.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["params.ts:15",{"_index":1641,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.ts:21",{"_index":1640,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.ts:5",{"_index":1316,"title":{},"body":{"classes/FindOneParams.html":{}}}],["params.ts:9",{"_index":1642,"title":{},"body":{"classes/PaginationParams.html":{}}}],["parent",{"_index":1795,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parse",{"_index":711,"title":{},"body":{"injectables/ChatService.html":{},"classes/PostsResolver.html":{},"dependencies.html":{}}}],["parse(cookie",{"_index":721,"title":{},"body":{"injectables/ChatService.html":{}}}],["parsedinfo",{"_index":1813,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseliteral",{"_index":2330,"title":{},"body":{"classes/Timestamp.html":{}}}],["parseliteral(valuenode",{"_index":2340,"title":{},"body":{"classes/Timestamp.html":{}}}],["parser",{"_index":2696,"title":{},"body":{"dependencies.html":{}}}],["parseresolveinfo",{"_index":1804,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseresolveinfo(info",{"_index":1814,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parsevalue",{"_index":2331,"title":{},"body":{"classes/Timestamp.html":{}}}],["parsevalue(value",{"_index":2343,"title":{},"body":{"classes/Timestamp.html":{}}}],["pass",{"_index":1202,"title":{},"body":{"injectables/EmailService.html":{}}}],["passing",{"_index":353,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["passport",{"_index":1518,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":383,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1519,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1520,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1526,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["passthrough",{"_index":339,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["password",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"modules/PubSubModule.html":{},"classes/RegisterDto.html":{},"modules/SubscribersModule.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":531,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["patch(':id",{"_index":547,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["patch(':id')@useguards(jwtauthenticationguard",{"_index":527,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["path",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"modules/OptimizeModule.html":{},"modules/SubscribersGrpcModule.html":{}}}],["payload",{"_index":433,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/StripeService.html":{}}}],["payload.email",{"_index":1112,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.interface",{"_index":432,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":2359,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1540,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":476,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["payment_method",{"_index":2135,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentmethodid",{"_index":12,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CreateChargeDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/StripeService.html":{}}}],["phone_number",{"_index":2457,"title":{},"body":{"entities/User.html":{}}}],["phonenumber",{"_index":1989,"title":{},"body":{"classes/RegisterDto.html":{},"injectables/SmsService.html":{},"entities/User.html":{}}}],["pipe(map(value",{"_index":1224,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":2392,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":2397,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":410,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["playground",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":330,"title":{},"body":{"controllers/AuthenticationController.html":{},"index.html":{}}}],["pngquant",{"_index":2725,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SubscribersModule.html":{}}}],["post",{"_index":293,"title":{"entities/Post.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('authenticate",{"_index":2389,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2369,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":2501,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2483,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('check",{"_index":2019,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('confirm",{"_index":1038,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('default",{"_index":905,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('default')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":893,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('files",{"_index":2513,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2486,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('generate",{"_index":2380,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":2372,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('image",{"_index":1610,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":1597,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('initiate",{"_index":2023,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('login",{"_index":337,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":361,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('monthly",{"_index":2307,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('monthly')@useguards(jwtauthenticationguard",{"_index":2301,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('refresh",{"_index":357,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":287,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":1042,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":1144,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":1137,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('turn",{"_index":2375,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":885,"title":{},"body":{"controllers/CreditCardsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["post()@useguards(emailconfirmationguard)@useguards(jwttwofactorguard",{"_index":1714,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":514,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["post.author",{"_index":1653,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["post.categories",{"_index":618,"title":{},"body":{"entities/Category.html":{}}}],["post.comments",{"_index":737,"title":{},"body":{"entities/Comment.html":{}}}],["post.dto",{"_index":1732,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":843,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":849,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":2415,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:13",{"_index":847,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:17",{"_index":2417,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:6",{"_index":848,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["post_added_event",{"_index":1810,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["post_categories",{"_index":1656,"title":{},"body":{"entities/Post.html":{}}}],["post_id",{"_index":1684,"title":{},"body":{"entities/Post.html":{}}}],["postadded",{"_index":1779,"title":{},"body":{"classes/PostsResolver.html":{},"miscellaneous/variables.html":{}}}],["postid",{"_index":628,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["postloader",{"_index":1687,"title":{"injectables/PostLoader.html":{}},"body":{"injectables/PostLoader.html":{},"coverage.html":{}}}],["postnotfoundexception",{"_index":1703,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1883,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":599,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"entities/User.html":{}}}],["posts(@info",{"_index":1812,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts(info",{"_index":1789,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.controller",{"_index":1762,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.items",{"_index":1820,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.resolver",{"_index":1768,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1731,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{}}}],["posts/entities/post.entity",{"_index":621,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/User.html":{}}}],["posts/posts.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":1706,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":91,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1833,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsresolver",{"_index":1767,"title":{"classes/PostsResolver.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postsservice",{"_index":1730,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["presented",{"_index":593,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["price",{"_index":2149,"title":{},"body":{"injectables/StripeService.html":{}}}],["priceid",{"_index":2112,"title":{},"body":{"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{}}}],["primarycolumn",{"_index":2083,"title":{},"body":{"entities/StripeEvent.html":{}}}],["primarygeneratedcolumn",{"_index":43,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["private",{"_index":321,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["private_files",{"_index":1896,"title":{},"body":{"entities/PrivateFile.html":{}}}],["privatefile",{"_index":1235,"title":{"entities/PrivateFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PrivateFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["privatefilesrepository",{"_index":1247,"title":{},"body":{"injectables/FilesService.html":{}}}],["process",{"_index":1448,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.platform",{"_index":1469,"title":{},"body":{"controllers/HealthController.html":{}}}],["processed",{"_index":2201,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["processimage",{"_index":1591,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1612,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1595,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processors",{"_index":1631,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["processsubscriptionupdate",{"_index":2188,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["processsubscriptionupdate(event",{"_index":2194,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["product",{"_index":130,"title":{"entities/Product.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateProductCategoryDto.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["product.category",{"_index":1946,"title":{},"body":{"entities/ProductCategory.html":{}}}],["product.dto",{"_index":1956,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["product.dto.ts",{"_index":864,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:12",{"_index":865,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":866,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product_categories",{"_index":1949,"title":{},"body":{"entities/ProductCategory.html":{}}}],["productcategoriescontroller",{"_index":1911,"title":{"controllers/ProductCategoriesController.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"coverage.html":{}}}],["productcategoriesmodule",{"_index":92,"title":{"modules/ProductCategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductCategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["productcategoriesrepository",{"_index":1934,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["productcategoriesservice",{"_index":1918,"title":{"injectables/ProductCategoriesService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["productcategory",{"_index":1898,"title":{"entities/ProductCategory.html":{}},"body":{"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"coverage.html":{}}}],["production",{"_index":950,"title":{},"body":{"injectables/CustomLogger.html":{},"index.html":{}}}],["products",{"_index":1910,"title":{},"body":{"entities/Product.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{}}}],["products.controller",{"_index":1963,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.service",{"_index":1955,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/entities/product.entity",{"_index":1948,"title":{},"body":{"entities/ProductCategory.html":{}}}],["products/products.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1950,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":93,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":1969,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsservice",{"_index":1920,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":2770,"title":{},"body":{"index.html":{}}}],["project",{"_index":2800,"title":{},"body":{"index.html":{}}}],["promise",{"_index":574,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/FilesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/SubscribersGrpcService.html":{}}}],["promise.all",{"_index":2627,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpLogsMiddleware.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"interfaces/SubscriberGrpc.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["properties.interface",{"_index":1908,"title":{},"body":{"entities/Product.html":{}}}],["properties.interface.ts",{"_index":494,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"coverage.html":{}}}],["proto",{"_index":2249,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["protopath",{"_index":2260,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["provide",{"_index":1980,"title":{},"body":{"modules/PubSubModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["provided",{"_index":474,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SmsService.html":{}}}],["providers",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{}}}],["pub",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"classes/PostsResolver.html":{}}}],["pub_sub",{"_index":1809,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":32,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsQuery.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{}}}],["public_files",{"_index":1986,"title":{},"body":{"entities/PublicFile.html":{}}}],["publicationyear",{"_index":496,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["publicfile",{"_index":1232,"title":{"entities/PublicFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["publicfilesrepository",{"_index":1249,"title":{},"body":{"injectables/FilesService.html":{}}}],["pubsub",{"_index":1781,"title":{},"body":{"classes/PostsResolver.html":{}}}],["pubsubmodule",{"_index":94,"title":{"modules/PubSubModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{},"modules.html":{},"overview.html":{}}}],["put",{"_index":1729,"title":{},"body":{"controllers/PostsController.html":{}}}],["put(':id",{"_index":1753,"title":{},"body":{"controllers/PostsController.html":{}}}],["put(':id')@useguards(jwtauthenticationguard",{"_index":1726,"title":{},"body":{"controllers/PostsController.html":{}}}],["qrcode",{"_index":2402,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["queries/handlers/get",{"_index":782,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementations/get",{"_index":762,"title":{},"body":{"controllers/CommentsController.html":{}}}],["query",{"_index":751,"title":{},"body":{"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"classes/GetCommentsHandler.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{}}}],["query('search",{"_index":1745,"title":{},"body":{"controllers/PostsController.html":{}}}],["query(undefined",{"_index":1791,"title":{},"body":{"classes/PostsResolver.html":{}}}],["query.postid",{"_index":1330,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["querybus",{"_index":753,"title":{},"body":{"controllers/CommentsController.html":{}}}],["queryhandler",{"_index":1327,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":1329,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":971,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":2619,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":2615,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.delete(publicfile",{"_index":1299,"title":{},"body":{"injectables/FilesService.html":{}}}],["queryrunner.manager.findone(publicfile",{"_index":1297,"title":{},"body":{"injectables/FilesService.html":{}}}],["queryrunner.manager.update(user",{"_index":2617,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":2622,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":2620,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":2616,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":987,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["queue",{"_index":1605,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/SubscribersModule.html":{}}}],["queuename",{"_index":2278,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["queueoptions",{"_index":2283,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["rabbitmq_host",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_password",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_queue_name",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmq_user",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["raw",{"_index":2006,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["rawbody",{"_index":2008,"title":{},"body":{"interfaces/RequestWithRawBody.html":{}}}],["rawbodymiddleware",{"_index":2664,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["read",{"_index":1287,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["readable",{"_index":1603,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readable.from(result",{"_index":1625,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentCommand.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/OptimizeController.html":{},"injectables/PostLoader.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receiverphonenumber",{"_index":2056,"title":{},"body":{"injectables/SmsService.html":{}}}],["recipient",{"_index":1125,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["recursively",{"_index":1219,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["recursivelystripnullvalues",{"_index":1218,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":1225,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_username",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["redispubsub",{"_index":1782,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{}}}],["redisstore",{"_index":1764,"title":{},"body":{"modules/PostsModule.html":{}}}],["referencedcolumnname",{"_index":1685,"title":{},"body":{"entities/Post.html":{}}}],["reflect",{"_index":2737,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":358,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":313,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1508,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":443,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":346,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":344,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["region",{"_index":1280,"title":{},"body":{"injectables/FilesService.html":{}}}],["register",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":322,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":2381,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":285,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(response",{"_index":2371,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registerdto",{"_index":286,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registered",{"_index":1398,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser",{"_index":1364,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":1377,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruserdirect",{"_index":1365,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruserdirect(name",{"_index":1379,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":289,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["relation",{"_index":2471,"title":{},"body":{"entities/User.html":{}}}],["relationid",{"_index":1675,"title":{},"body":{"entities/Post.html":{}}}],["relationid((post",{"_index":1682,"title":{},"body":{"entities/Post.html":{}}}],["relationid(post",{"_index":1652,"title":{},"body":{"entities/Post.html":{}}}],["relations",{"_index":601,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/FilesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["remotely",{"_index":2246,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["removerefreshtoken",{"_index":2539,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":2576,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":589,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["represents",{"_index":2334,"title":{},"body":{"classes/Timestamp.html":{}}}],["req",{"_index":294,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":766,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["request",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request._parsedurl.query",{"_index":1490,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":1527,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.rawbody",{"_index":2173,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request.res.setheader('set",{"_index":350,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":340,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.isphonenumberconfirmed",{"_index":2031,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.phonenumber",{"_index":2036,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.stripecustomerid",{"_index":646,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{}}}],["request.user?.isemailconfirmed",{"_index":1064,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":1533,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1523,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestallmessages",{"_index":660,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(@connectedsocket",{"_index":687,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(socket",{"_index":672,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestwithrawbody",{"_index":2003,"title":{"interfaces/RequestWithRawBody.html":{}},"body":{"interfaces/RequestWithRawBody.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["requestwithuser",{"_index":271,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["required",{"_index":587,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["requiretls",{"_index":1199,"title":{},"body":{"injectables/EmailService.html":{}}}],["res",{"_index":295,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["resendconfirmationlink",{"_index":1036,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":1052,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":1041,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":1085,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":1807,"title":{},"body":{"classes/PostsResolver.html":{},"dependencies.html":{}}}],["resolvefield",{"_index":1796,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resolver",{"_index":1797,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resolvetree",{"_index":1805,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resource_missing",{"_index":2756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resourcemissing",{"_index":2755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["response",{"_index":298,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpLogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["response.on('finish",{"_index":1499,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["response.send(user",{"_index":352,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response.sendstatus(200",{"_index":364,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response.sendstatus(202",{"_index":1622,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1619,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.setheader('set",{"_index":351,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["result",{"_index":1623,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/SmsService.html":{}}}],["result.status",{"_index":2072,"title":{},"body":{"injectables/SmsService.html":{}}}],["result.valid",{"_index":2071,"title":{},"body":{"injectables/SmsService.html":{}}}],["results",{"_index":26,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2740,"title":{},"body":{"dependencies.html":{}}}],["rss",{"_index":1456,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":2786,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1215,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1217,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s3",{"_index":1239,"title":{},"body":{"injectables/FilesService.html":{}}}],["s3.deleteobject",{"_index":1298,"title":{},"body":{"injectables/FilesService.html":{}}}],["s3_access_key_id",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["s3_bucket",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["s3_default_region",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["s3_endpoint",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["s3_secret_access_key",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["savemessage",{"_index":701,"title":{},"body":{"injectables/ChatService.html":{}}}],["savemessage(content",{"_index":708,"title":{},"body":{"injectables/ChatService.html":{}}}],["scalable",{"_index":2775,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":2347,"title":{},"body":{"classes/Timestamp.html":{}}}],["scalar('timestamp",{"_index":2349,"title":{},"body":{"classes/Timestamp.html":{}}}],["schedule.dto",{"_index":1143,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":1124,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:13",{"_index":1126,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:16",{"_index":1128,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:5",{"_index":1130,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:9",{"_index":1131,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["scheduleddate",{"_index":852,"title":{},"body":{"classes/CreatePostInput.html":{},"entities/Post.html":{}}}],["scheduleemail",{"_index":1135,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1145,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1136,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1157,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":1134,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.controller",{"_index":1151,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.controller.ts",{"_index":1133,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["scheduling.controller.ts:13",{"_index":1138,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduling.module.ts",{"_index":1150,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.service",{"_index":1141,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["scheduling.service.ts",{"_index":1152,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["scheduling.service.ts:15",{"_index":1160,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:20",{"_index":1162,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:25",{"_index":1164,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:29",{"_index":1165,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:8",{"_index":1158,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling/dto/email",{"_index":1123,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["scheduling/email",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["scope",{"_index":1700,"title":{},"body":{"injectables/PostLoader.html":{}}}],["scope.request",{"_index":1702,"title":{},"body":{"injectables/PostLoader.html":{}}}],["sdk",{"_index":2709,"title":{},"body":{"dependencies.html":{}}}],["sdk/clients/s3",{"_index":1270,"title":{},"body":{"injectables/FilesService.html":{}}}],["search",{"_index":1723,"title":{},"body":{"controllers/PostsController.html":{}}}],["secret",{"_index":394,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["secretaccesskey",{"_index":1278,"title":{},"body":{"injectables/FilesService.html":{}}}],["secretorkey",{"_index":1524,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["secure",{"_index":1198,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":585,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["senderphonenumber",{"_index":2076,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmail",{"_index":1184,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1187,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmessage",{"_index":2047,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmessage(receiverphonenumber",{"_index":2054,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendverificationlink",{"_index":1077,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(email",{"_index":1087,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["separatecount",{"_index":1860,"title":{},"body":{"injectables/PostsService.html":{}}}],["serialize",{"_index":2332,"title":{},"body":{"classes/Timestamp.html":{}}}],["serialize(value",{"_index":2345,"title":{},"body":{"classes/Timestamp.html":{}}}],["server",{"_index":657,"title":{},"body":{"classes/ChatGateway.html":{},"dependencies.html":{},"index.html":{}}}],["service",{"_index":768,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/EmailService.html":{},"controllers/SubscribersGrpcController.html":{}}}],["servicesid",{"_index":2064,"title":{},"body":{"injectables/SmsService.html":{}}}],["set",{"_index":1418,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{}}}],["setcurrentrefreshtoken",{"_index":2540,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":2578,"title":{},"body":{"injectables/UsersService.html":{}}}],["setdefaultcard",{"_index":883,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(@body",{"_index":906,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(creditcard",{"_index":891,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcreditcard",{"_index":2098,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcard(paymentmethodid",{"_index":2117,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcarddto",{"_index":892,"title":{"classes/SetDefaultCreditCardDto.html":{}},"body":{"controllers/CreditCardsController.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["settwofactorauthenticationsecret",{"_index":2541,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":2580,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":2776,"title":{},"body":{"index.html":{}}}],["sign",{"_index":1413,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["signature",{"_index":2107,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["signoptions",{"_index":396,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["simplifiedinfo",{"_index":1815,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifiedinfo.fields",{"_index":1817,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifyparsedresolveinfofragmentwithtype",{"_index":1806,"title":{},"body":{"classes/PostsResolver.html":{}}}],["skip",{"_index":1870,"title":{},"body":{"injectables/PostsService.html":{}}}],["sms",{"_index":2014,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["sms.controller",{"_index":2043,"title":{},"body":{"modules/SmsModule.html":{}}}],["sms.service",{"_index":2026,"title":{},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{}}}],["sms/sms.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["sms/sms.service",{"_index":317,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["smscontroller",{"_index":2012,"title":{"controllers/SmsController.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["smsmodule",{"_index":95,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/SmsModule.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":316,"title":{"injectables/SmsService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"coverage.html":{},"overview.html":{}}}],["snakenamingstrategy",{"_index":997,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["socket",{"_index":666,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["socket.emit('send_all_messages",{"_index":690,"title":{},"body":{"classes/ChatGateway.html":{}}}],["socket.handshake.headers.cookie",{"_index":718,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":680,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["space",{"_index":1465,"title":{},"body":{"controllers/HealthController.html":{}}}],["sponsors",{"_index":2803,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":2830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2759,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.processor.ts",{"_index":2760,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":2831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2758,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":2829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../posts.resolver.ts",{"_index":2833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pub",{"_index":2834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../raw",{"_index":2761,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../recursively",{"_index":2762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../stripe",{"_index":2750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.mock.ts",{"_index":2832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:146",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":257,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":258,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:35",{"_index":288,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:45",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:70",{"_index":284,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:81",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:91",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":377,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:10",{"_index":408,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:17",{"_index":415,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:26",{"_index":420,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:39",{"_index":412,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:46",{"_index":423,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:63",{"_index":411,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:74",{"_index":422,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:83",{"_index":426,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1987,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:13",{"_index":1992,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:18",{"_index":1995,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:23",{"_index":1998,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":1990,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:9",{"_index":1993,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/graphql",{"_index":1421,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/jwt",{"_index":1506,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/local",{"_index":1541,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/interfaces/request",{"_index":2009,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/interfaces/token",{"_index":2358,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt",{"_index":1509,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts",{"_index":1529,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:10",{"_index":1530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:23",{"_index":1532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts",{"_index":1543,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/local.strategy.ts:13",{"_index":1546,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts:8",{"_index":1544,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/tests/user.mock.ts",{"_index":2640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/two",{"_index":2364,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts",{"_index":505,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:25",{"_index":521,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:30",{"_index":524,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:36",{"_index":515,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:42",{"_index":528,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:48",{"_index":520,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":555,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":561,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:24",{"_index":575,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:33",{"_index":579,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:41",{"_index":563,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:50",{"_index":584,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:64",{"_index":565,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:74",{"_index":573,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/dto/create",{"_index":790,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":2410,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity.ts",{"_index":614,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity.ts:10",{"_index":616,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:13",{"_index":619,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:7",{"_index":615,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/exceptions/category",{"_index":622,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/charge/charge.controller.ts",{"_index":632,"title":{},"body":{"controllers/ChargeController.html":{},"coverage.html":{}}}],["src/charge/charge.controller.ts:14",{"_index":637,"title":{},"body":{"controllers/ChargeController.html":{}}}],["src/charge/charge.module.ts",{"_index":650,"title":{},"body":{"modules/ChargeModule.html":{}}}],["src/charge/dto/create",{"_index":793,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts",{"_index":654,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:14",{"_index":663,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:19",{"_index":667,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:24",{"_index":670,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:32",{"_index":674,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":694,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":698,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:12",{"_index":704,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:20",{"_index":709,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:29",{"_index":705,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:35",{"_index":707,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/entities/message.entity.ts",{"_index":1580,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/chat/entities/message.entity.ts:10",{"_index":1582,"title":{},"body":{"entities/Message.html":{}}}],["src/chat/entities/message.entity.ts:13",{"_index":1581,"title":{},"body":{"entities/Message.html":{}}}],["src/chat/entities/message.entity.ts:7",{"_index":1583,"title":{},"body":{"entities/Message.html":{}}}],["src/comments/commands/handlers/create",{"_index":814,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/comments/commands/implementations/create",{"_index":799,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts",{"_index":742,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:29",{"_index":747,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:39",{"_index":750,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.module.ts",{"_index":774,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/dto/create",{"_index":805,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/get",{"_index":1317,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/comments/entities/comment.entity.ts",{"_index":731,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/comments/entities/comment.entity.ts:11",{"_index":735,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:14",{"_index":738,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:17",{"_index":734,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:8",{"_index":736,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/queries/handlers/get",{"_index":1321,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/comments/queries/implementations/get",{"_index":1332,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/credit",{"_index":6,"title":{},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["src/database/database.logger.ts",{"_index":959,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/database.logger.ts:13",{"_index":978,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:19",{"_index":980,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:25",{"_index":974,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:28",{"_index":983,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:31",{"_index":972,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:45",{"_index":985,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:5",{"_index":969,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.logger.ts:7",{"_index":976,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/database.module.ts",{"_index":996,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email",{"_index":786,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/email/email.module.ts",{"_index":1120,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1182,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:24",{"_index":1189,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":1186,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/files/entities/private",{"_index":1890,"title":{},"body":{"entities/PrivateFile.html":{},"coverage.html":{}}}],["src/files/entities/public",{"_index":1982,"title":{},"body":{"entities/PublicFile.html":{},"coverage.html":{}}}],["src/files/files.module.ts",{"_index":1230,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":1238,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:12",{"_index":1248,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:29",{"_index":1266,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:45",{"_index":1251,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:54",{"_index":1254,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:64",{"_index":1263,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:82",{"_index":1258,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:98",{"_index":1256,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/google",{"_index":1338,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["src/health/elasticsearch",{"_index":1015,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":1434,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:23",{"_index":1437,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1473,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/custom",{"_index":915,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/dto/create",{"_index":834,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts",{"_index":1550,"title":{},"body":{"entities/Log.html":{},"coverage.html":{}}}],["src/logger/entities/log.entity.ts:12",{"_index":1558,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:15",{"_index":1556,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:18",{"_index":1554,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:6",{"_index":1555,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/entities/log.entity.ts:9",{"_index":1552,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1562,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1566,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:12",{"_index":1572,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1569,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":2649,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/image.processor.ts",{"_index":2652,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/optimize.controller.ts",{"_index":1588,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/optimize/optimize.controller.ts:16",{"_index":1598,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.controller.ts:27",{"_index":1594,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.module.ts",{"_index":1627,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/posts/constants/post",{"_index":2654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/dto/create",{"_index":842,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":2414,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":1645,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts:20",{"_index":1669,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:23",{"_index":1672,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:26",{"_index":1666,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:34",{"_index":1662,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:39",{"_index":1651,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:42",{"_index":1654,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:56",{"_index":1659,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:59",{"_index":1665,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:62",{"_index":1668,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:65",{"_index":1671,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/exceptions/post",{"_index":1704,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/posts/inputs/post.input.ts",{"_index":851,"title":{},"body":{"classes/CreatePostInput.html":{},"coverage.html":{}}}],["src/posts/inputs/post.input.ts:12",{"_index":856,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/inputs/post.input.ts:6",{"_index":857,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/inputs/post.input.ts:9",{"_index":853,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/interceptors/http",{"_index":1477,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/posts/loaders/post.loader.ts",{"_index":1688,"title":{},"body":{"injectables/PostLoader.html":{},"coverage.html":{}}}],["src/posts/loaders/post.loader.ts:10",{"_index":1699,"title":{},"body":{"injectables/PostLoader.html":{}}}],["src/posts/loaders/post.loader.ts:6",{"_index":1690,"title":{},"body":{"injectables/PostLoader.html":{}}}],["src/posts/models/author.model.ts",{"_index":481,"title":{},"body":{"classes/Author.html":{},"coverage.html":{}}}],["src/posts/models/author.model.ts:10",{"_index":483,"title":{},"body":{"classes/Author.html":{}}}],["src/posts/models/author.model.ts:13",{"_index":485,"title":{},"body":{"classes/Author.html":{}}}],["src/posts/models/author.model.ts:7",{"_index":484,"title":{},"body":{"classes/Author.html":{}}}],["src/posts/models/post.model.ts",{"_index":2656,"title":{},"body":{"coverage.html":{}}}],["src/posts/posts.controller.ts",{"_index":1707,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":1722,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":1719,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":1715,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:60",{"_index":1727,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:66",{"_index":1717,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1760,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.resolver.ts",{"_index":1778,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/posts.resolver.ts:16",{"_index":1783,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:21",{"_index":1792,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:36",{"_index":1788,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:42",{"_index":1786,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.service.ts",{"_index":1827,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:14",{"_index":1832,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:21",{"_index":1834,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:30",{"_index":1842,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:57",{"_index":1844,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:63",{"_index":1839,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:72",{"_index":1835,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:84",{"_index":1847,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":1837,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/product",{"_index":860,"title":{},"body":{"classes/CreateProductCategoryDto.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"coverage.html":{}}}],["src/products/dto/create",{"_index":863,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/entities/product.entity.ts",{"_index":1897,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/entities/product.entity.ts:12",{"_index":1902,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:15",{"_index":1900,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:20",{"_index":1904,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:9",{"_index":1901,"title":{},"body":{"entities/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1951,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:16",{"_index":1954,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:23",{"_index":1953,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":1962,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1966,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:15",{"_index":1971,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:19",{"_index":1970,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:8",{"_index":1968,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/types/book",{"_index":493,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/products/types/car",{"_index":498,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/pub",{"_index":1977,"title":{},"body":{"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schema.gql",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["src/sms/dto/check",{"_index":725,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts",{"_index":2013,"title":{},"body":{"controllers/SmsController.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts:14",{"_index":2025,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.controller.ts:23",{"_index":2021,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.module.ts",{"_index":2042,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/sms.service.ts",{"_index":2044,"title":{},"body":{"injectables/SmsService.html":{},"coverage.html":{}}}],["src/sms/sms.service.ts:17",{"_index":2053,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:25",{"_index":2051,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:39",{"_index":2055,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:8",{"_index":2048,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/stripe",{"_index":2004,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"entities/StripeEvent.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["src/stripe/stripe.module.ts",{"_index":2089,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":2091,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:16",{"_index":2106,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:26",{"_index":2109,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:33",{"_index":2104,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:44",{"_index":2102,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:51",{"_index":2114,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:58",{"_index":2118,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:73",{"_index":2111,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":2099,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:91",{"_index":2116,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/subscribers",{"_index":2209,"title":{},"body":{"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"interfaces/SubscribersGrpcService.html":{},"coverage.html":{}}}],["src/subscribers/dto/create",{"_index":868,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts",{"_index":2213,"title":{},"body":{"controllers/SubscribersController.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts:23",{"_index":2218,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:31",{"_index":2216,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.module.ts",{"_index":2272,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/subscriptions/subscription.module.ts",{"_index":2293,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["src/subscriptions/subscriptions.controller.ts",{"_index":2297,"title":{},"body":{"controllers/SubscriptionsController.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.controller.ts:12",{"_index":2302,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.controller.ts:18",{"_index":2305,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.service.ts",{"_index":2313,"title":{},"body":{"injectables/SubscriptionsService.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.service.ts:13",{"_index":2317,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:23",{"_index":2319,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:6",{"_index":2315,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/users/dto/create",{"_index":873,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/address.entity.ts",{"_index":31,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/users/entities/address.entity.ts:10",{"_index":45,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:13",{"_index":40,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:16",{"_index":41,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:19",{"_index":48,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:7",{"_index":44,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2420,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":2447,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":2444,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":2449,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":2454,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2455,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":2442,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":2458,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:42",{"_index":2450,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:45",{"_index":2451,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":2438,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:59",{"_index":2436,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:62",{"_index":2459,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:65",{"_index":2446,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:68",{"_index":2461,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:71",{"_index":2452,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2460,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:77",{"_index":2453,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:80",{"_index":2440,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:83",{"_index":2463,"title":{},"body":{"entities/User.html":{}}}],["src/users/models/user.model.ts",{"_index":2658,"title":{},"body":{"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":2477,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":2484,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:23",{"_index":2490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":2493,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":2487,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:42",{"_index":2496,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2525,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":2530,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:111",{"_index":2581,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:117",{"_index":2583,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:123",{"_index":2548,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:140",{"_index":2556,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:152",{"_index":2558,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:175",{"_index":2550,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:179",{"_index":2569,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":2544,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:187",{"_index":2560,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:203",{"_index":2585,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":2564,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":2566,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":2562,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":2552,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":2554,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:73",{"_index":2579,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:80",{"_index":2577,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:86",{"_index":2573,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":2575,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:98",{"_index":2571,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/get",{"_index":2660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/interceptors/exclude",{"_index":1206,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/middlewares/http",{"_index":1491,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/middlewares/raw",{"_index":2662,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":2665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":2667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/recursively",{"_index":2669,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/scalars/timestamp.scalar.ts",{"_index":2328,"title":{},"body":{"classes/Timestamp.html":{},"coverage.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:12",{"_index":2344,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:21",{"_index":2342,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:6",{"_index":2339,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:8",{"_index":2346,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/stripe",{"_index":2752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/utils/types/find",{"_index":1313,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/types/object",{"_index":1584,"title":{},"body":{"classes/ObjectWithId.html":{},"coverage.html":{}}}],["src/utils/types/pagination",{"_index":1635,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["stack",{"_index":931,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["start",{"_index":2336,"title":{},"body":{"classes/Timestamp.html":{},"index.html":{}}}],["start:dev",{"_index":2789,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2790,"title":{},"body":{"index.html":{}}}],["started",{"_index":2769,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2780,"title":{},"body":{"index.html":{},"properties.html":{}}}],["startid",{"_index":1638,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":2634,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":1501,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["statusmessage",{"_index":1502,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["stay",{"_index":2808,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1461,"title":{},"body":{"controllers/HealthController.html":{}}}],["store",{"_index":1766,"title":{},"body":{"modules/PostsModule.html":{},"dependencies.html":{}}}],["strategies",{"_index":999,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["strategies/jwt",{"_index":387,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/jwt.strategy",{"_index":381,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/local.strategy",{"_index":380,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":1517,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["stream",{"_index":1305,"title":{},"body":{"injectables/FilesService.html":{},"controllers/OptimizeController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["stream.pipe(response",{"_index":1626,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["street",{"_index":36,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"entities/Message.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["stringifyparameters",{"_index":967,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":984,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["strip",{"_index":1220,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stripe",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"dependencies.html":{}}}],["stripe(configservice.get('stripe_secret_key",{"_index":2124,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.event",{"_index":2195,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["stripe.service",{"_index":2090,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2203,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["stripe/stripe.module",{"_index":652,"title":{},"body":{"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{}}}],["stripe/stripe.service",{"_index":639,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{}}}],["stripe_currency",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_events",{"_index":2085,"title":{},"body":{"entities/StripeEvent.html":{}}}],["stripe_secret_key",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_webhook_secret",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["stripecustomer",{"_index":2594,"title":{},"body":{"injectables/UsersService.html":{}}}],["stripecustomer.id",{"_index":2599,"title":{},"body":{"injectables/UsersService.html":{}}}],["stripecustomerid",{"_index":2429,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["stripeerror",{"_index":2120,"title":{},"body":{"injectables/StripeService.html":{},"miscellaneous/enumerations.html":{}}}],["stripeerror.invalidrequest",{"_index":2146,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeerror.resourcemissing",{"_index":2150,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeevent",{"_index":2080,"title":{"entities/StripeEvent.html":{}},"body":{"entities/StripeEvent.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["stripeinvalidrequesterror",{"_index":2754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":649,"title":{"modules/StripeModule.html":{}},"body":{"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":638,"title":{"injectables/StripeService.html":{}},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":2157,"title":{"controllers/StripeWebhookController.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"coverage.html":{}}}],["stripewebhookmodule",{"_index":96,"title":{"modules/StripeWebhookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebhookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripewebhookservice",{"_index":2165,"title":{"injectables/StripeWebhookService.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["sub.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"classes/PostsResolver.html":{}}}],["sub.module.ts",{"_index":1978,"title":{},"body":{"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sub/pub",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1104,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["subscribed",{"_index":2324,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscribemessage",{"_index":677,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('request_all_messages",{"_index":673,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('send_message",{"_index":669,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscriber",{"_index":2217,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{}}}],["subscriber.dto",{"_index":2221,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{}}}],["subscriber.dto.ts",{"_index":869,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["subscriber.dto.ts:2",{"_index":870,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["subscriber.dto.ts:3",{"_index":871,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["subscribergrpc",{"_index":2208,"title":{"interfaces/SubscriberGrpc.html":{}},"body":{"interfaces/SubscriberGrpc.html":{},"interfaces/SubscribersGrpcService.html":{},"coverage.html":{}}}],["subscribers",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{}}}],["subscribers.controller",{"_index":2273,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers/dto/create",{"_index":2239,"title":{},"body":{"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{}}}],["subscribers/subscribers.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_package",{"_index":2256,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["subscribers_service",{"_index":2274,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers_service_host",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_service_port",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriberscontroller",{"_index":2212,"title":{"controllers/SubscribersController.html":{}},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"coverage.html":{}}}],["subscribersgrpccontroller",{"_index":2228,"title":{"controllers/SubscribersGrpcController.html":{}},"body":{"controllers/SubscribersGrpcController.html":{},"modules/SubscribersGrpcModule.html":{},"coverage.html":{}}}],["subscribersgrpcmodule",{"_index":97,"title":{"modules/SubscribersGrpcModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules.html":{},"overview.html":{}}}],["subscribersgrpcservice",{"_index":2235,"title":{"interfaces/SubscribersGrpcService.html":{}},"body":{"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"coverage.html":{}}}],["subscribersmodule",{"_index":98,"title":{"modules/SubscribersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{},"modules.html":{},"overview.html":{}}}],["subscribersservice",{"_index":2224,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{}}}],["subscription",{"_index":1798,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscription(undefined",{"_index":1787,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscriptionmodule",{"_index":99,"title":{"modules/SubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscriptionModule.html":{},"modules.html":{},"overview.html":{}}}],["subscriptions",{"_index":1808,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"dependencies.html":{}}}],["subscriptions.controller",{"_index":2295,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["subscriptions.data.length",{"_index":2322,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscriptions.data[0",{"_index":2327,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscriptions.service",{"_index":2296,"title":{},"body":{"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{}}}],["subscriptions/subscription.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriptionscontroller",{"_index":2294,"title":{"controllers/SubscriptionsController.html":{}},"body":{"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"coverage.html":{}}}],["subscriptionsservice",{"_index":2292,"title":{"injectables/SubscriptionsService.html":{}},"body":{"modules/SubscriptionModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["subscriptionstatus",{"_index":2205,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["super",{"_index":947,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["super(`category",{"_index":629,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`post",{"_index":1705,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super({usernamefield",{"_index":1548,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["super.debug.apply(this",{"_index":957,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":955,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":952,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.trackby(context",{"_index":1489,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["super.warn.apply(this",{"_index":956,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":2804,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2818,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":1012,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":2672,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2671,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1871,"title":{},"body":{"injectables/PostsService.html":{}}}],["tcp",{"_index":2285,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["terminusmodule",{"_index":1475,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":2793,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2796,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2795,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2792,"title":{},"body":{"index.html":{}}}],["text",{"_index":1178,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"entities/Log.html":{}}}],["thanks",{"_index":2802,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1549,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookieforlogout",{"_index":363,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":359,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":342,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":347,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getuserfromauthenticationtoken(authenticationtoken",{"_index":722,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":325,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.cachemanager.del(key",{"_index":1858,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.cachemanager.store.keys",{"_index":1855,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.categoriesrepository.create(category",{"_index":604,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.delete(id",{"_index":610,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.find({relations",{"_index":598,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.findone(id",{"_index":600,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.save(newcategory",{"_index":605,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.update(id",{"_index":607,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesservice.createcategory(category",{"_index":546,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(number(id",{"_index":552,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getallcategories",{"_index":542,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(number(id",{"_index":544,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategory(number(id",{"_index":549,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.chatservice.getallmessages",{"_index":689,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.getuserfromsocket(socket",{"_index":682,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.savemessage(content",{"_index":685,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.clearcache",{"_index":1886,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.client.getservice('subscribersservice",{"_index":2244,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["this.commandbus.execute",{"_index":769,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsrepository.create",{"_index":829,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.find",{"_index":1331,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newpost",{"_index":832,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.configservice.get('email_confirmation_url')}?token=${token",{"_index":1096,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('frontend_url')}/email",{"_index":1097,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('google_auth_client_id",{"_index":1384,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google_auth_client_secret",{"_index":1386,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_expiration_time')}s",{"_index":436,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":435,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration_time')}s",{"_index":442,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":441,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_verification_token_expiration_time')}s",{"_index":1094,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":1093,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('monthly_subscription_price_id",{"_index":2320,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.configservice.get('s3_access_key_id",{"_index":1277,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1285,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('s3_default_region",{"_index":1281,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('s3_endpoint",{"_index":1275,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('s3_secret_access_key",{"_index":1279,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('stripe_currency",{"_index":2137,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('stripe_webhook_secret",{"_index":2130,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('twilio_sender_phone_number",{"_index":2077,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('twilio_verification_service_sid",{"_index":2065,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":2405,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.connection.createqueryrunner",{"_index":2614,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.context",{"_index":954,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.createevent(event.id",{"_index":2199,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.deletecategory(id",{"_index":613,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":1466,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchhealthindicator.ishealthy('elasticsearch",{"_index":1472,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchservice.ping",{"_index":1030,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":1050,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken(confirmationdata.token",{"_index":1049,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":1053,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(registrationdata.email",{"_index":326,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1146,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":1103,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.eventsrepository.insert({id",{"_index":2198,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.filesservice.deletepublicfile(fileid",{"_index":2613,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.deletepublicfile(user.avatar.id",{"_index":2610,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.deletepublicfilewithqueryrunner(fileid",{"_index":2618,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.generatepresignedurl(file.key",{"_index":2629,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.getprivatefile(fileid",{"_index":2624,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.uploadprivatefile(imagebuffer",{"_index":2623,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.uploadpublicfile(imagebuffer",{"_index":2611,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(userid",{"_index":2606,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcookiesforuser(user",{"_index":1399,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getposts(offset",{"_index":1879,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getstatus(key",{"_index":1031,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.getuserdata(token",{"_index":1401,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":1353,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.googleauthenticationservice.authenticateuserdata(credentials.name",{"_index":1351,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":1404,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.healthcheckservice.check",{"_index":1446,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.imagequeue.add('optimize",{"_index":1613,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1618,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.jwtservice.decode(tokendata.token",{"_index":1349,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.jwtservice.sign(payload",{"_index":434,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":475,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.logger.debug(message",{"_index":993,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(`${query",{"_index":990,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1504,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":988,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":992,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/HttpLogsMiddleware.html":{}}}],["this.logger.warn('tried",{"_index":1881,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.logger.warn(`time",{"_index":991,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":994,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/HttpLogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1576,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1577,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":951,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":953,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":1452,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":1458,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagesrepository.create",{"_index":715,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.find",{"_index":717,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.save(newmessage",{"_index":716,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.nodemailertransport",{"_index":1194,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":1204,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":1387,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":1406,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":1391,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postsrepository.count",{"_index":1864,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":1884,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1889,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findandcount",{"_index":1867,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(id",{"_index":1880,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1885,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1887,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostinput",{"_index":1824,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.createpost(post",{"_index":1752,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1757,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1749,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getposts",{"_index":1819,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getposts(page",{"_index":1747,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithauthors",{"_index":1818,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1746,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1755,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.privatefilesrepository.create",{"_index":1300,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.findone({id",{"_index":1304,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.privatefilesrepository.save(newfile",{"_index":1302,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.productcategoriesrepository.create(category",{"_index":1941,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productcategoriesrepository.find",{"_index":1939,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productcategoriesrepository.save(newproductcategory",{"_index":1942,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productsrepository.create(product",{"_index":1975,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.find",{"_index":1973,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.save(newproduct",{"_index":1976,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct(product",{"_index":1959,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.createproductcategory(productcategory",{"_index":1923,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.getallproductcategories",{"_index":1921,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.getallproducts",{"_index":1958,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilesrepository.create",{"_index":1289,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1296,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.findone({id",{"_index":1293,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1292,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.pubsub.asynciterator(post_added_event",{"_index":1821,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.pubsub.publish(post_added_event",{"_index":1826,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.querybus.execute",{"_index":772,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.reflector.get",{"_index":1485,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.registeruser(token",{"_index":1410,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.registeruserdirect(name",{"_index":1419,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.s3",{"_index":1273,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.s3.deleteobject",{"_index":1294,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.s3.getobject",{"_index":1306,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.s3.getsignedurlpromise('getobject",{"_index":1309,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.s3.upload",{"_index":1283,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.schedulerregistry.addcronjob(`${date.now",{"_index":1180,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user.email",{"_index":1109,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.server.sockets.emit('receive_message",{"_index":686,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.smsservice.confirmphonenumber(request.user.id",{"_index":2035,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.initiatephonenumberverification(request.user.phonenumber",{"_index":2033,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.sendmessage(user.phonenumber",{"_index":327,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.stringifyparameters(parameters",{"_index":989,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stripe",{"_index":2123,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":2132,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.update(customerid",{"_index":2142,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentintents.create",{"_index":2133,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentmethods.list",{"_index":2140,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.setupintents.create",{"_index":2139,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.create",{"_index":2148,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.list",{"_index":2153,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.webhooks.constructevent",{"_index":2131,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.attachcreditcard(creditcard.paymentmethodid",{"_index":904,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.charge(charge.amount",{"_index":644,"title":{},"body":{"controllers/ChargeController.html":{}}}],["this.stripeservice.constructeventfrompayload(signature",{"_index":2172,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.createcustomer(name",{"_index":2601,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.stripeservice.createcustomer(userdata.name",{"_index":2595,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.stripeservice.createsubscription(priceid",{"_index":2325,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.stripeservice.listcreditcards(request.user.stripecustomerid",{"_index":909,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.listsubscriptions(priceid",{"_index":2321,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.stripeservice.setdefaultcreditcard(creditcard.paymentmethodid",{"_index":907,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripewebhookservice.processsubscriptionupdate(event",{"_index":2177,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.subscribersservice",{"_index":2243,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["this.subscribersservice.addsubscriber(subscriber",{"_index":2251,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["this.subscribersservice.getallsubscribers",{"_index":2250,"title":{},"body":{"controllers/SubscribersGrpcController.html":{}}}],["this.subscribersservice.send",{"_index":2225,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscriptionsservice.createmonthlysubscription(request.user.stripecustomerid",{"_index":2309,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.subscriptionsservice.getmonthlysubscription(request.user.stripecustomerid",{"_index":2312,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.twilioclient",{"_index":2062,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.messages",{"_index":2078,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.verify.services(servicesid",{"_index":2066,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret(request.user",{"_index":2383,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":2386,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream(response",{"_index":2384,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":1447,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1534,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches(refreshtoken",{"_index":1528,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create",{"_index":2598,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":2591,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone({email",{"_index":2593,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone({id",{"_index":2589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":2600,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":2605,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":2603,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update({email",{"_index":2604,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addavatar(request.user.id",{"_index":2504,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addprivatefile(request.user.id",{"_index":2515,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":450,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.createwithgoogle(email",{"_index":1403,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.deleteavatarwithqueryrunner(request.user.id",{"_index":2509,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallprivatefiles(request.user.id",{"_index":2512,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":469,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":477,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":1105,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getbyids(authorids",{"_index":1694,"title":{},"body":{"injectables/PostLoader.html":{}}}],["this.usersservice.getprivatefile(request.user.id",{"_index":2518,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":1110,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markphonenumberasconfirmed(userid",{"_index":2075,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":365,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":348,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":2406,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":2388,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.updatemonthlysubscriptionstatus(customerid",{"_index":2207,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":470,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":1467,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":459,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":981,"title":{},"body":{"classes/DatabaseLogger.html":{},"classes/Timestamp.html":{}}}],["timeout",{"_index":1167,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["timeout(60000",{"_index":1163,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["timestamp",{"_index":151,"title":{"classes/Timestamp.html":{}},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"classes/Timestamp.html":{},"coverage.html":{}}}],["title",{"_index":844,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":2401,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":2409,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":345,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["token.strategy",{"_index":388,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1510,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":1513,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:24",{"_index":1515,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokendata",{"_index":1343,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":1114,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":1405,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":1407,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":430,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenverificationdto",{"_index":1341,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["totaldata",{"_index":1874,"title":{},"body":{"injectables/PostsService.html":{}}}],["totalpage",{"_index":1877,"title":{},"body":{"injectables/PostsService.html":{}}}],["touch",{"_index":2809,"title":{},"body":{"index.html":{}}}],["trackby",{"_index":1480,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1481,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transform",{"_index":1676,"title":{},"body":{"entities/Post.html":{}}}],["transform(({value",{"_index":1679,"title":{},"body":{"entities/Post.html":{}}}],["transformer",{"_index":812,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":2255,"title":{},"body":{"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["transport.grpc",{"_index":2258,"title":{},"body":{"modules/SubscribersGrpcModule.html":{}}}],["transport.rmq",{"_index":2280,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["transport.tcp",{"_index":2286,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["true",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"classes/CreatePostInput.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"injectables/StripeService.html":{},"modules/SubscribersModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["true})@exclude",{"_index":2441,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":2434,"title":{},"body":{"entities/User.html":{}}}],["true})@transform",{"_index":1661,"title":{},"body":{"entities/Post.html":{}}}],["try",{"_index":448,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":1770,"title":{},"body":{"modules/PostsModule.html":{}}}],["turnontwofactorauthentication",{"_index":2368,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(request",{"_index":2374,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":2582,"title":{},"body":{"injectables/UsersService.html":{}}}],["twilio",{"_index":2057,"title":{},"body":{"injectables/SmsService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":2063,"title":{},"body":{"injectables/SmsService.html":{}}}],["twilio_account_sid",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_auth_token",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_sender_phone_number",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_verification_service_sid",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["twilioclient",{"_index":2045,"title":{},"body":{"injectables/SmsService.html":{}}}],["twitter",{"_index":2814,"title":{},"body":{"index.html":{}}}],["two",{"_index":389,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["two_factor_authentication_app_name",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["twofactorauthenticationcode",{"_index":2366,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":2363,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":378,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":2430,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["twofactorauthenticationservice",{"_index":376,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithId.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/SubscriberGrpc.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"interfaces/SubscribersGrpcService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional",{"_index":1319,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["typeof",{"_index":1111,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":50,"title":{},"body":{"entities/Address.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"injectables/ProductCategoriesService.html":{},"entities/ProductCategory.html":{},"injectables/ProductsService.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":1442,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":960,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":557,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":560,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":784,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1565,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":697,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1777,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1965,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([productcategory",{"_index":1928,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":1237,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([stripeevent",{"_index":2185,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2529,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1001,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/book",{"_index":1909,"title":{},"body":{"entities/Product.html":{}}}],["types/car",{"_index":1907,"title":{},"body":{"entities/Product.html":{}}}],["types/cookie",{"_index":2695,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":2698,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2779,"title":{},"body":{"index.html":{},"properties.html":{}}}],["unauthorized",{"_index":1416,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":1062,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('confirm",{"_index":1065,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('the",{"_index":1397,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception('wrong",{"_index":2387,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":452,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["unit",{"_index":2791,"title":{},"body":{"index.html":{}}}],["unix",{"_index":2337,"title":{},"body":{"classes/Timestamp.html":{}}}],["unknown",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":2152,"title":{},"body":{"injectables/StripeService.html":{}}}],["updatecategory",{"_index":511,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategory(@param",{"_index":548,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategory(id",{"_index":583,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategory(undefined",{"_index":525,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategorydto",{"_index":526,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":2431,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["updatedatecolumn",{"_index":2464,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":2462,"title":{},"body":{"entities/User.html":{}}}],["updatedcategory",{"_index":608,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1888,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatemonthlysubscriptionstatus",{"_index":2542,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatemonthlysubscriptionstatus(stripecustomerid",{"_index":2584,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepost",{"_index":1712,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@param",{"_index":1754,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":1846,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1724,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1725,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2497,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfiles",{"_index":1600,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadprivatefile",{"_index":1244,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadprivatefile(databuffer",{"_index":1259,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile",{"_index":1245,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1265,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":1282,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.key",{"_index":1290,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":1291,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":1095,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"entities/PublicFile.html":{},"modules/SubscribersGrpcModule.html":{},"injectables/UsersService.html":{}}}],["urls",{"_index":2281,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["use",{"_index":354,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/CategoriesService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpLogsMiddleware.html":{}}}],["use(request",{"_index":1493,"title":{},"body":{"injectables/HttpLogsMiddleware.html":{}}}],["used",{"_index":1459,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SubscribersGrpcModule.html":{},"modules/SubscribersModule.html":{}}}],["useguards",{"_index":296,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":902,"title":{},"body":{"controllers/CreditCardsController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["useguards(graphqljwtauthguard",{"_index":1822,"title":{},"body":{"classes/PostsResolver.html":{}}}],["useguards(jwtauthenticationguard",{"_index":360,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get('me",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('logout')@httpcode(200",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":356,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@post('refresh",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1750,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthenticationguard",{"_index":336,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":297,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(anyfilesinterceptor",{"_index":1611,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":1741,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":319,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscribersGrpcController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2502,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":1742,"title":{},"body":{"controllers/PostsController.html":{}}}],["user",{"_index":38,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Author.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestWithUser.html":{},"modules/SubscribersModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":47,"title":{},"body":{"entities/Address.html":{}}}],["user.avatar",{"_index":2609,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.avatar?.id",{"_index":2612,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":2608,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":2586,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":874,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":875,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":876,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":877,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":332,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.entity",{"_index":51,"title":{},"body":{"entities/Address.html":{}}}],["user.id",{"_index":349,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostLoader.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.interface",{"_index":307,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["user.interface.ts",{"_index":2010,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user.isemailconfirmed",{"_index":1106,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisteredwithgoogle",{"_index":1396,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":355,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.name",{"_index":329,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.password",{"_index":471,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":2408,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user@email.com",{"_index":2841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1400,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["userdata.email",{"_index":2596,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.name",{"_index":1402,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userid",{"_index":417,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/SmsService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["userinfoclient",{"_index":1389,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":1394,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":1393,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":1395,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["username",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PubSubModule.html":{}}}],["users",{"_index":1693,"title":{},"body":{"injectables/PostLoader.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":2528,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2498,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":489,"title":{},"body":{"classes/Author.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["users/users.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{}}}],["users/users.service",{"_index":311,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/PostLoader.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["userscontroller",{"_index":2476,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1512,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmap",{"_index":1695,"title":{},"body":{"injectables/PostLoader.html":{}}}],["usersmap.get(authorid",{"_index":1698,"title":{},"body":{"injectables/PostLoader.html":{}}}],["usersmodule",{"_index":100,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":2545,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":310,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/PostLoader.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithfiles",{"_index":2626,"title":{},"body":{"injectables/UsersService.html":{}}}],["userwithfiles.files.map(async",{"_index":2628,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":2475,"title":{},"body":{"entities/User.html":{}}}],["utils/get",{"_index":942,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["utils/middlewares/http",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/scalars/timestamp.scalar",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/stripe",{"_index":2121,"title":{},"body":{"injectables/StripeService.html":{}}}],["utils/types/find",{"_index":534,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["utils/types/object",{"_index":813,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["utils/types/pagination",{"_index":1733,"title":{},"body":{"controllers/PostsController.html":{}}}],["uuid",{"_index":1268,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1267,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1511,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1545,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1531,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":1514,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatenested",{"_index":811,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["validatenested()@type(undefined",{"_index":809,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["validationoptions",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":23,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/ObjectWithId.html":{},"classes/PaginationParams.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["value",{"_index":416,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/HttpLogsMiddleware.html":{},"entities/Post.html":{},"injectables/PostLoader.html":{},"injectables/PostsService.html":{},"classes/Timestamp.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":2351,"title":{},"body":{"classes/Timestamp.html":{}}}],["valuenode",{"_index":2341,"title":{},"body":{"classes/Timestamp.html":{}}}],["valuenode.kind",{"_index":2354,"title":{},"body":{"classes/Timestamp.html":{}}}],["values",{"_index":1222,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["values.ts",{"_index":2670,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":2641,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2828,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":921,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":935,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":726,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["verification')@useguards(jwtauthenticationguard",{"_index":2024,"title":{},"body":{"controllers/SmsController.html":{}}}],["verification.dto",{"_index":1346,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["verification.dto.ts",{"_index":2361,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:6",{"_index":2362,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["verificationchecks",{"_index":2070,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationcode",{"_index":2050,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationdata",{"_index":2018,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationdata.code",{"_index":2037,"title":{},"body":{"controllers/SmsController.html":{}}}],["verifications",{"_index":2067,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationtokenpayload",{"_index":1090,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verifypassword",{"_index":405,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":424,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":2827,"title":{},"body":{"properties.html":{}}}],["void",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"injectables/HttpLogsMiddleware.html":{},"controllers/SubscribersGrpcController.html":{}}}],["warn",{"_index":922,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":937,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2787,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":2159,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller",{"_index":2182,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["webhook.controller.ts",{"_index":2158,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["webhook.controller.ts:17",{"_index":2162,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook.module.ts",{"_index":2181,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["webhook.service",{"_index":2166,"title":{},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{}}}],["webhook.service.ts",{"_index":2186,"title":{},"body":{"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["webhook.service.ts:17",{"_index":2193,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["webhook.service.ts:21",{"_index":2196,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["webhook.service.ts:9",{"_index":2190,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["webhook/entities/stripe",{"_index":2081,"title":{},"body":{"entities/StripeEvent.html":{},"coverage.html":{}}}],["webhook/interfaces/request",{"_index":2005,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"coverage.html":{}}}],["webhook/stripe",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["webhooksecret",{"_index":2129,"title":{},"body":{"injectables/StripeService.html":{}}}],["website",{"_index":2812,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":678,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":664,"title":{},"body":{"classes/ChatGateway.html":{}}}],["welcome",{"_index":328,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":466,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["where.id",{"_index":1862,"title":{},"body":{"injectables/PostsService.html":{}}}],["win32",{"_index":1470,"title":{},"body":{"controllers/HealthController.html":{}}}],["world",{"_index":260,"title":{},"body":{"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{}}}],["wrong",{"_index":467,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsexception",{"_index":712,"title":{},"body":{"injectables/ChatService.html":{}}}],["wsexception('invalid",{"_index":723,"title":{},"body":{"injectables/ChatService.html":{}}}],["yes",{"_index":929,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/GetCommentsQuery.html":{},"injectables/PostsService.html":{}}}],["you'd",{"_index":2807,"title":{},"body":{"index.html":{}}}],["zip",{"_index":2701,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCreditCardDto.html":{"url":"classes/AddCreditCardDto.html","title":"class - AddCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/add-credit-card.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/add-credit-card.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty} from 'class-validator';\n\nexport class AddCreditCardDto {\n    @IsString()\n    @IsNotEmpty()\n    paymentMethodId: string;\n}\n\nexport default AddCreditCardDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {Column, Entity, OneToOne, PrimaryGeneratedColumn} from 'typeorm';\nimport User from \"./user.entity\";\n\n@Entity({name: 'addresses'})\nclass Address {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public street: string;\n\n    @Column()\n    public city: string;\n\n    @Column()\n    public country: string;\n\n    @OneToOne(() => User, (user: User) => user.address)\n    public user?: User;\n}\n\nexport default Address;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscribersGrpcModule\n\nSubscribersGrpcModule\n\nAppModule -->\n\nSubscribersGrpcModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nAppModule -->\n\nSubscriptionModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ChargeModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            CreditCardsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            GoogleAuthenticationModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            OptimizeModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductCategoriesModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            PubSubModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            StripeWebhookModule\n                        \n                        \n                            SubscribersGrpcModule\n                        \n                        \n                            SubscribersModule\n                        \n                        \n                            SubscriptionModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {MiddlewareConsumer, Module} from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport {PostsModule} from \"./posts/posts.module\";\nimport { UsersModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { CategoriesModule } from './categories/categories.module';\nimport { FilesModule } from './files/files.module';\nimport { SubscribersModule } from './subscribers/subscribers.module';\nimport { SubscribersGrpcModule } from './subscribers-grpc/subscribers-grpc.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { ProductCategoriesModule } from './product-categories/product-categories.module';\nimport { ProductsModule } from './products/products.module';\nimport { EmailModule } from './email/email.module';\nimport {ScheduleModule} from \"@nestjs/schedule\";\nimport { EmailSchedulingModule } from './email-scheduling/email-scheduling.module';\nimport { ChatModule } from './chat/chat.module';\nimport {GraphQLModule} from \"@nestjs/graphql\";\nimport { join } from 'path';\nimport {ApolloDriver, ApolloDriverConfig} from \"@nestjs/apollo\";\nimport { PubSubModule } from './pub-sub/pub-sub.module';\nimport {Timestamp} from \"./utils/scalars/timestamp.scalar\";\nimport { OptimizeModule } from './optimize/optimize.module';\nimport {BullModule} from \"@nestjs/bull\";\nimport { ChargeModule } from './charge/charge.module';\nimport { CreditCardsModule } from './credit-cards/credit-cards.module';\nimport { SubscriptionModule } from './subscriptions/subscription.module';\nimport { StripeWebhookModule } from './stripe-webhook/stripe-webhook.module';\nimport { EmailConfirmationModule } from './email-confirmation/email-confirmation.module';\nimport { SmsModule } from './sms/sms.module';\nimport { GoogleAuthenticationModule } from './google-authentication/google-authentication.module';\nimport { DatabaseModule } from './database/database.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { HealthModule } from './health/health.module';\nimport HttpLogsMiddleware from \"./utils/middlewares/http-logs-middleware.service\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      cache: true,\n      validationSchema: Joi.object({\n        DB_HOST: Joi.string().required(),\n        DB_PORT: Joi.number().required(),\n        DB_USERNAME: Joi.string().required(),\n        DB_PASSWORD: Joi.string().empty(''),\n        DB_DATABASE: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        S3_ENDPOINT: Joi.string().empty(''),\n        S3_DEFAULT_REGION: Joi.string().required(),\n        S3_ACCESS_KEY_ID: Joi.string().required(),\n        S3_SECRET_ACCESS_KEY: Joi.string().required(),\n        S3_BUCKET: Joi.string().required(),\n        SUBSCRIBERS_SERVICE_HOST: Joi.string(),\n        SUBSCRIBERS_SERVICE_PORT: Joi.number(),\n        RABBITMQ_USER: Joi.string(),\n        RABBITMQ_PASSWORD: Joi.string(),\n        RABBITMQ_HOST: Joi.string(),\n        RABBITMQ_QUEUE_NAME: Joi.string(),\n        REDIS_HOST: Joi.string(),\n        REDIS_PORT: Joi.string(),\n        REDIS_USERNAME: Joi.string(),\n        REDIS_PASSWORD: Joi.string(),\n        GRAPHQL_PLAYGROUND: Joi.number(),\n        TWO_FACTOR_AUTHENTICATION_APP_NAME: Joi.string(),\n        STRIPE_SECRET_KEY: Joi.string(),\n        STRIPE_CURRENCY: Joi.string(),\n        FRONTEND_URL: Joi.string(),\n        MONTHLY_SUBSCRIPTION_PRICE_ID: Joi.string(),\n        STRIPE_WEBHOOK_SECRET: Joi.string(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        TWILIO_ACCOUNT_SID: Joi.string().required(),\n        TWILIO_AUTH_TOKEN: Joi.string().required(),\n        TWILIO_VERIFICATION_SERVICE_SID: Joi.string().required(),\n        TWILIO_SENDER_PHONE_NUMBER: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n      }),\n      validationOptions: {\n        abortEarly: true,\n      },\n    }),\n    GraphQLModule.forRootAsync({\n      driver: ApolloDriver,\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        playground: Boolean(configService.get('GRAPHQL_PLAYGROUND')),\n        autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n        installSubscriptionHandlers: true,\n        //buildSchemaOptions: {\n        //  dateScalarMode: 'timestamp',\n        //}\n      })\n    }),\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: Number(configService.get('REDIS_PORT')),\n          username: configService.get('REDIS_USERNAME'),\n          password: configService.get('REDIS_PASSWORD'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    ScheduleModule.forRoot(),\n    DatabaseModule,\n    PostsModule,\n    UsersModule,\n    AuthenticationModule,\n    CategoriesModule,\n    FilesModule,\n    SubscribersModule,\n    SubscribersGrpcModule,\n    CommentsModule,\n    ProductCategoriesModule,\n    ProductsModule,\n    EmailModule,\n    EmailSchedulingModule,\n    ChatModule,\n    PubSubModule,\n    OptimizeModule,\n    ChargeModule,\n    CreditCardsModule,\n    SubscriptionModule,\n    StripeWebhookModule,\n    EmailConfirmationModule,\n    SmsModule,\n    GoogleAuthenticationModule,\n    LoggerModule,\n    HealthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, Timestamp],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n        .apply(HttpLogsMiddleware)\n        .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('logout')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Post('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ClassSerializerInterceptor,\n    Controller,\n    Get,\n    HttpCode,\n    Post,\n    Req,\n    Res,\n    UseGuards,\n    UseInterceptors\n} from '@nestjs/common';\nimport {Response} from 'express';\nimport {AuthenticationService} from \"./authentication.service\";\nimport RegisterDto from \"./dto/register.dto\";\nimport {LocalAuthenticationGuard} from \"./guards/local-authentication.guard\";\nimport RequestWithUser from \"./interfaces/request-with-user.interface\";\nimport JwtAuthenticationGuard from \"./guards/jwt-authentication.guard\";\nimport {UsersService} from \"../users/users.service\";\nimport JwtRefreshGuard from \"./guards/jwt-refresh.guard\";\nimport {EmailConfirmationService} from \"../email-confirmation/email-confirmation.service\";\nimport {SmsService} from \"../sms/sms.service\";\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthenticationController {\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n        private readonly usersService: UsersService,\n        private readonly emailConfirmationService: EmailConfirmationService,\n        private readonly smsService: SmsService,\n    ) {}\n\n    @Post('register')\n    async register(@Body() registrationData: RegisterDto) {\n        const user = await this.authenticationService.register(registrationData);\n        await this.emailConfirmationService.sendVerificationLink(registrationData.email);\n        await this.smsService.sendMessage(user.phoneNumber, `Welcome ${user.name}, please confirm your email ${user.email} to activate the account`);\n        return user;\n    }\n\n    @HttpCode(200)\n    @UseGuards(LocalAuthenticationGuard)\n    @Post('login')\n    async login(@Req() request: RequestWithUser/*, @Res({ passthrough: true }) response: Response*/) {\n        const user = request.user;\n\n        const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(user.id);\n        const {\n            cookie: refreshTokenCookie,\n            token: refreshToken\n        } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n        await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n        request.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n\n        // response.setHeader('Set-Cookie', cookie);\n        // return response.send(user); if not passing { passthrough: true } then use this response\n\n        if (user.isTwoFactorAuthenticationEnabled) {\n            return;\n        }\n\n        return user;\n    }\n\n    @UseGuards(JwtRefreshGuard)\n    @Post('refresh')\n    refresh(@Req() request: RequestWithUser) {\n        const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n        request.res.setHeader('Set-Cookie', accessTokenCookie);\n\n        return request.user;\n    }\n\n    @UseGuards(JwtAuthenticationGuard)\n    @Post('logout')\n    @HttpCode(200)\n    async logout(@Req() request: RequestWithUser/*, @Res() response: Response*/) {\n        //response.setHeader('Set-Cookie', this.authenticationService.getCookieForLogOut());\n        //return response.sendStatus(200);\n\n        await this.usersService.removeRefreshToken(request.user.id);\n        request.res.setHeader('Set-Cookie', this.authenticationService.getCookieForLogOut());\n    }\n\n    @UseGuards(JwtAuthenticationGuard)\n    @Get('me')\n    authenticate(@Req() request: RequestWithUser) {\n        return request.user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthenticationModule -->\n\nSmsModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {AuthenticationService} from './authentication.service';\nimport {UsersModule} from \"../users/users.module\";\nimport {LocalStrategy} from \"./strategies/local.strategy\";\nimport {JwtStrategy} from \"./strategies/jwt.strategy\";\nimport {AuthenticationController} from './authentication.controller';\nimport {PassportModule} from \"@nestjs/passport\";\nimport {JwtModule} from \"@nestjs/jwt\";\nimport {ConfigModule, ConfigService} from \"@nestjs/config\";\nimport {JwtRefreshTokenStrategy} from \"./strategies/jwt-refresh-token.strategy\";\nimport {TwoFactorAuthenticationController} from \"./two-factor/two-factor-authentication.controller\";\nimport {TwoFactorAuthenticationService} from \"./two-factor/two-factor-authentication.service\";\nimport {JwtTwoFactorStrategy} from \"./strategies/jwt-two-factor.strategy\";\nimport {EmailConfirmationModule} from \"../email-confirmation/email-confirmation.module\";\nimport {SmsModule} from \"../sms/sms.module\";\n\n@Module({\n    imports: [\n        UsersModule,\n        PassportModule,\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: async (configService: ConfigService) => ({\n                secret: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n                signOptions: {\n                    expiresIn: `${configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}s`,\n                },\n            }),\n        }),\n        EmailConfirmationModule,\n        SmsModule\n    ],\n    providers: [\n        AuthenticationService, LocalStrategy, JwtStrategy, JwtRefreshTokenStrategy,\n        TwoFactorAuthenticationService, JwtTwoFactorStrategy\n    ],\n    controllers: [AuthenticationController, TwoFactorAuthenticationController],\n    exports: [AuthenticationService]\n})\nexport class AuthenticationModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookieForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                getUserFromAuthenticationToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserFromAuthenticationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromAuthenticationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {HttpException, HttpStatus, Injectable} from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport {UsersService} from \"../users/users.service\";\nimport RegisterDto from \"./dto/register.dto\";\nimport {JwtService} from \"@nestjs/jwt\";\nimport {ConfigService} from \"@nestjs/config\";\nimport TokenPayload from \"./interfaces/token-payload.interface\";\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly jwtService: JwtService,\n        private readonly configService: ConfigService) {\n    }\n\n    public getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated = false) {\n        const payload: TokenPayload = {userId, isSecondFactorAuthenticated};\n        const token = this.jwtService.sign(payload, {\n            secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n            expiresIn: `${this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}s`\n        });\n        return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}`;\n    }\n\n    public getCookieWithJwtRefreshToken(userId: number) {\n        const payload: TokenPayload = {userId};\n        const token = this.jwtService.sign(payload, {\n            secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n            expiresIn: `${this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME')}s`\n        });\n        const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME')}`;\n        return {\n            cookie,\n            token\n        }\n    }\n\n    public getCookieForLogOut() {\n        return [\n            'Authentication=; HttpOnly; Path=/; Max-Age=0',\n            'Refresh=; HttpOnly; Path=/; Max-Age=0'\n        ];\n    }\n\n    public async register(registrationData: RegisterDto) {\n        const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n        try {\n            const createdUser = await this.usersService.create({\n                ...registrationData,\n                password: hashedPassword\n            });\n            createdUser.password = undefined;\n            return createdUser;\n        } catch (error) {\n            if ([1062, 1586].includes(error?.code) || error?.code == 'ER_DUP_ENTRY') {\n                throw new HttpException('User with that email already exists', HttpStatus.BAD_REQUEST);\n            }\n            throw new HttpException('Something went wrong', HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n        try {\n            const user = await this.usersService.getByEmail(email);\n            await this.verifyPassword(plainTextPassword, user.password);\n\n            return user;\n        } catch (error) {\n            throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    public async getUserFromAuthenticationToken(token: string) {\n        const payload: TokenPayload = this.jwtService.verify(token, {\n            secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET')\n        });\n        if (payload.userId) {\n            return this.usersService.getById(payload.userId);\n        }\n    }\n\n    private async verifyPassword(plainTextPassword: string, hashedPassword: string) {\n        const isPasswordMatching = await bcrypt.compare(\n            plainTextPassword,\n            hashedPassword\n        );\n        if (!isPasswordMatching) {\n            throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Author.html":{"url":"classes/Author.html","title":"class - Author","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Author\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/models/author.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/author.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/author.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/author.model.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Field, Int, ObjectType} from '@nestjs/graphql';\nimport User from \"../../users/entities/user.entity\";\n\n@ObjectType()\nexport class Author {\n    @Field(() => Int)\n    id: number;\n\n    @Field(() => String)\n    email: string;\n\n    @Field(() => String)\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/book-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicationYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicationYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicationYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n    authors: string[];\n    publicationYear: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/car-properties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n    brand: string;\n    engine: {\n        fuel: string;\n        numberOfCylinders: number;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \ngetCategoryById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ClassSerializerInterceptor,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Patch,\n    Post,\n    UseGuards,\n    UseInterceptors\n} from '@nestjs/common';\nimport {CategoriesService} from \"./categories.service\";\nimport FindOneParams from \"../utils/types/find-one-params\";\nimport CreateCategoryDto from \"./dto/create-category.dto\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport UpdateCategoryDto from \"./dto/update-category.dto\";\n\n@Controller('categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CategoriesController {\n    constructor(private readonly categoriesService: CategoriesService) {}\n\n    @Get()\n    getAllCategories() {\n        return this.categoriesService.getAllCategories();\n    }\n\n    @Get(':id')\n    getCategoryById(@Param() { id }: FindOneParams) {\n        return this.categoriesService.getCategoryById(Number(id));\n    }\n\n    @Post()\n    @UseGuards(JwtAuthenticationGuard)\n    async createCategory(@Body() category: CreateCategoryDto) {\n        return this.categoriesService.createCategory(category);\n    }\n\n    @Patch(':id')\n    @UseGuards(JwtAuthenticationGuard)\n    async updateCategory(@Param() { id }: FindOneParams, @Body() category: UpdateCategoryDto) {\n        return this.categoriesService.updateCategory(Number(id), category);\n    }\n\n    @Delete(':id')\n    @UseGuards(JwtAuthenticationGuard)\n    async deleteCategory(@Param() { id }: FindOneParams) {\n        return this.categoriesService.deleteCategory(Number(id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesController } from './categories.controller';\nimport { CategoriesService } from './categories.service';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport Category from \"./entities/category.entity\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService]\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                deleteCategoryById\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:64\n                \n            \n\n\n            \n                \n                    A method that deletes a category from the database.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a category. A category with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                    Use deleteCategory instead\n                \n            \n            \n                \n                    \n                    deleteCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:24\n                \n            \n\n\n            \n                \n                    A method that fetches the categories from the database.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A promise with the list of categories\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:33\n                \n            \n\n\n            \n                \n                    A method that fetches a category with a given id. Example:\nconst category = await categoriesService.getCategoryById(1);\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const category = await categoriesService.getCategoryById(1);\n                        \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:50\n                \n            \n\n\n            \n                \n                    See the definition of the UpdateCategoryDto file to see a list of required properties.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport Category from \"./entities/category.entity\";\nimport {Repository} from \"typeorm\";\nimport CategoryNotFoundException from \"./exceptions/category-not-found.exception\";\nimport CreateCategoryDto from \"./dto/create-category.dto\";\nimport UpdateCategoryDto from \"./dto/update-category.dto\";\n\n@Injectable()\nexport class CategoriesService {\n    /**\n     * Not presented in documentation.\n     *\n     * @ignore\n     */\n    constructor(@InjectRepository(Category) private categoriesRepository: Repository) {\n    }\n\n    /**\n     * A method that fetches the categories from the database.\n     *\n     * @returns A promise with the list of categories\n     */\n    getAllCategories() {\n        return this.categoriesRepository.find({relations: ['posts']});\n    }\n\n    /**\n     * A method that fetches a category with a given id. Example:\n     * @example\n     * const category = await categoriesService.getCategoryById(1);\n     */\n    async getCategoryById(id: number) {\n        const category = await this.categoriesRepository.findOne(id, {relations: ['posts']});\n        if (category) {\n            return category;\n        }\n        throw new CategoryNotFoundException(id);\n    }\n\n    async createCategory(category: CreateCategoryDto) {\n        const newCategory = await this.categoriesRepository.create(category);\n        await this.categoriesRepository.save(newCategory);\n        return newCategory;\n    }\n\n    /**\n     * See the [definition of the UpdateCategoryDto file]{@link UpdateCategoryDto} to see a list of required properties.\n     */\n    async updateCategory(id: number, category: UpdateCategoryDto) {\n        await this.categoriesRepository.update(id, category);\n        const updatedCategory = await this.categoriesRepository.findOne(id, {relations: ['posts']});\n        if (updatedCategory) {\n            return updatedCategory\n        }\n        throw new CategoryNotFoundException(id);\n    }\n\n    /**\n     * A method that deletes a category from the database.\n     *\n     * @param id An id of a category. A category with this id should exist in the database\n     */\n    async deleteCategory(id: number) {\n        const deleteResponse = await this.categoriesRepository.delete(id);\n        if (!deleteResponse.affected) {\n            throw new CategoryNotFoundException(id);\n        }\n    }\n\n    /**\n     * @deprecated Use deleteCategory instead\n     */\n    async deleteCategoryById(id: number): Promise {\n        return this.deleteCategory(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {Column, Entity, ManyToMany, PrimaryGeneratedColumn} from 'typeorm';\nimport Post from \"../../posts/entities/post.entity\";\n\n@Entity({name: 'categories'})\nclass Category {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public name: string;\n\n    @ManyToMany(() => Post, (post: Post) => post.categories)\n    public posts: Post[];\n}\n\nexport default Category;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/exceptions/category-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/categories/exceptions/category-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass CategoryNotFoundException extends NotFoundException {\n    constructor(postId: number) {\n        super(`Category with id ${postId} not found`);\n    }\n}\n\nexport default CategoryNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChargeController.html":{"url":"controllers/ChargeController.html","title":"controller - ChargeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChargeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/charge.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                charge\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharge(charge: CreateChargeDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/charge/charge.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    charge\n                                    \n                                                CreateChargeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Post, Req, UseGuards} from '@nestjs/common';\nimport {StripeService} from \"../stripe/stripe.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport CreateChargeDto from \"./dto/create-charge.dto\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\n\n@Controller('charge')\nexport class ChargeController {\n    constructor(private readonly stripeService: StripeService) {\n    }\n\n    @Post()\n    @UseGuards(JwtAuthenticationGuard)\n    async createCharge(@Body() charge: CreateChargeDto, @Req() request: RequestWithUser) {\n        return this.stripeService.charge(charge.amount, charge.paymentMethodId, request.user.stripeCustomerId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChargeModule.html":{"url":"modules/ChargeModule.html","title":"module - ChargeModule","body":"\n                   \n\n\n\n\n    Modules\n    ChargeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nChargeModule\n\nChargeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charge/charge.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ChargeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChargeController } from './charge.controller';\nimport {StripeModule} from \"../stripe/stripe.module\";\n\n@Module({\n  imports: [StripeModule],\n  controllers: [ChargeController]\n})\nexport class ChargeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                listenForMessages\n                            \n                            \n                                    Async\n                                requestAllMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listenForMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    listenForMessages(content: string, socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send_message')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestAllMessages(socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('request_all_messages')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ConnectedSocket,\n    MessageBody, OnGatewayConnection,\n    SubscribeMessage,\n    WebSocketGateway,\n    WebSocketServer,\n} from '@nestjs/websockets';\nimport {Server, Socket} from 'socket.io';\nimport {ChatService} from \"./chat.service\";\n\n@WebSocketGateway()\nexport class ChatGateway implements OnGatewayConnection {\n    @WebSocketServer()\n    server: Server;\n\n    constructor(private readonly chatService: ChatService) {\n    }\n\n    async handleConnection(socket: Socket) {\n        await this.chatService.getUserFromSocket(socket);\n    }\n\n    @SubscribeMessage('send_message')\n    async listenForMessages(@MessageBody() content: string, @ConnectedSocket() socket: Socket) {\n        const author = await this.chatService.getUserFromSocket(socket);\n        const message = await this.chatService.saveMessage(content, author);\n\n        this.server.sockets.emit('receive_message', message);\n    }\n\n    @SubscribeMessage('request_all_messages')\n    async requestAllMessages(@ConnectedSocket() socket: Socket) {\n        await this.chatService.getUserFromSocket(socket);\n        const messages = await this.chatService.getAllMessages();\n\n        socket.emit('send_all_messages', messages);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {ChatService} from './chat.service';\nimport {AuthenticationModule} from \"../authentication/authentication.module\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport Message from \"./entities/message.entity\";\nimport {ChatGateway} from \"./chat.gateway\";\n\n@Module({\n    imports: [\n        AuthenticationModule,\n        TypeOrmModule.forFeature([Message]),\n    ],\n    providers: [ChatGateway, ChatService],\n})\nexport class ChatModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getUserFromSocket\n                            \n                            \n                                    Async\n                                saveMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService, messagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSocket(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMessage(content: string, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {AuthenticationService} from \"../authentication/authentication.service\";\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport {Repository} from \"typeorm\";\nimport {Socket} from 'socket.io';\nimport {parse} from 'cookie';\nimport Message from \"./entities/message.entity\";\nimport User from \"../users/entities/user.entity\";\nimport {WsException} from \"@nestjs/websockets\";\n\n@Injectable()\nexport class ChatService {\n    constructor(\n        private readonly authenticationService: AuthenticationService,\n        @InjectRepository(Message)\n        private messagesRepository: Repository,\n    ) {\n    }\n\n    async saveMessage(content: string, author: User) {\n        const newMessage = await this.messagesRepository.create({\n            content,\n            author\n        });\n        await this.messagesRepository.save(newMessage);\n        return newMessage;\n    }\n\n    async getAllMessages() {\n        return this.messagesRepository.find({\n            relations: ['author']\n        });\n    }\n\n    async getUserFromSocket(socket: Socket) {\n        const cookie = socket.handshake.headers.cookie;\n        console.log(cookie);\n        const {Authentication: authenticationToken} = parse(cookie);\n        const user = await this.authenticationService.getUserFromAuthenticationToken(authenticationToken);\n        if (!user) {\n            throw new WsException('Invalid credentials.');\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckVerificationCodeDto.html":{"url":"classes/CheckVerificationCodeDto.html","title":"class - CheckVerificationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckVerificationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/dto/check-verification-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/check-verification-code.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CheckVerificationCodeDto {\n    @IsString()\n    @IsNotEmpty()\n    code: string;\n}\n\nexport default CheckVerificationCodeDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../../users/entities/user.entity';\nimport Post from '../../posts/entities/post.entity';\n\n@Entity({name: \"comments\"})\nclass Comment {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public content: string;\n\n    @ManyToOne(() => Post, (post: Post) => post.comments)\n    public post: Post;\n\n    @ManyToOne(() => User, (author: User) => author.posts)\n    public author: User;\n}\n\nexport default Comment;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ClassSerializerInterceptor,\n    Controller,\n    Get,\n    Post,\n    Query,\n    Req,\n    UseGuards,\n    UseInterceptors\n} from '@nestjs/common';\nimport {CommandBus, QueryBus} from \"@nestjs/cqrs\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport CreateCommentDto from \"./dto/create-comment.dto\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport {CreateCommentCommand} from \"./commands/implementations/create-comment.command\";\nimport GetCommentsDto from \"./dto/get-comments.dto\";\nimport {GetCommentsQuery} from \"./queries/implementations/get-comments.query\";\n\n@Controller('comments')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CommentsController {\n\n    constructor(private commandBus: CommandBus, private queryBus: QueryBus) {\n    }\n\n    @Post()\n    @UseGuards(JwtAuthenticationGuard)\n    async createComment(@Body() comment: CreateCommentDto, @Req() req: RequestWithUser) {\n        const user = req.user;\n\n        // can be moved into a service\n        return this.commandBus.execute(\n            new CreateCommentCommand(comment, user)\n        )\n    }\n\n    @Get()\n    async getComments(@Query() {postId}: GetCommentsDto) {\n\n        // can be moved into a service\n        return this.queryBus.execute(\n            new GetCommentsQuery(postId)\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {CommentsController} from './comments.controller';\nimport {CqrsModule} from \"@nestjs/cqrs\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport {CreateCommentHandler} from \"./commands/handlers/create-comment.handler\";\nimport Comment from \"./entities/comment.entity\";\nimport {GetCommentsHandler} from \"./queries/handlers/get-comments.handler\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([Comment]),\n        CqrsModule\n    ],\n    controllers: [CommentsController],\n    providers: [CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/dto/confirm-emai.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-confirmation/dto/confirm-emai.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n    @IsString()\n    @IsNotEmpty()\n    token: string;\n}\n\nexport default ConfirmEmailDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty} from 'class-validator';\n\nclass CreateCategoryDto {\n    @IsString()\n    @IsNotEmpty()\n    name: string;\n}\n\nexport default CreateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChargeDto.html":{"url":"classes/CreateChargeDto.html","title":"class - CreateChargeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChargeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/dto/create-charge.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/create-charge.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/create-charge.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty, IsNumber} from 'class-validator';\n\nexport class CreateChargeDto {\n    @IsString()\n    @IsNotEmpty()\n    paymentMethodId: string;\n\n    @IsNumber()\n    amount: number;\n}\n\nexport default CreateChargeDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/implementations/create-comment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/implementations/create-comment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementations/create-comment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementations/create-comment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import CreateCommentDto from '../../dto/create-comment.dto';\nimport User from '../../../users/entities/user.entity';\n\nexport class CreateCommentCommand {\n    constructor(\n        public readonly comment: CreateCommentDto,\n        public readonly author: User,\n    ) {\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty, ValidateNested} from 'class-validator';\nimport {Type} from 'class-transformer';\nimport ObjectWithId from \"../../utils/types/object-with-id\";\n\nexport class CreateCommentDto {\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @ValidateNested()\n    @Type(() => ObjectWithId)\n    post: ObjectWithId;\n}\n\nexport default CreateCommentDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/handlers/create-comment.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/commands/handlers/create-comment.handler.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {CommandHandler, ICommandHandler} from '@nestjs/cqrs';\nimport {CreateCommentCommand} from '../implementations/create-comment.command';\nimport {InjectRepository} from '@nestjs/typeorm';\nimport Comment from '../../entities/comment.entity';\nimport {Repository} from 'typeorm';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler implements ICommandHandler {\n\n    constructor(@InjectRepository(Comment) private commentsRepository: Repository) {\n    }\n\n    async execute(command: CreateCommentCommand) {\n        const newPost = await this.commentsRepository.create({\n            ...command.comment,\n            author: command.author\n        });\n        await this.commentsRepository.save(newPost);\n        return newPost;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateLogDto {\n    context: string;\n    message: string;\n    level: string;\n}\n\nexport default CreateLogDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                content\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     object[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty, IsOptional} from 'class-validator';\n\nclass CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  categories?: object[];\n}\n\nexport default CreatePostDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostInput.html":{"url":"classes/CreatePostInput.html","title":"class - CreatePostInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/inputs/post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {InputType, Field} from '@nestjs/graphql';\n\n@InputType()\nexport class CreatePostInput {\n    @Field()\n    title: string;\n\n    @Field(() => String)\n    content: string;\n\n    @Field({nullable: true})\n    scheduledDate?: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCategoryDto.html":{"url":"classes/CreateProductCategoryDto.html","title":"class - CreateProductCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product-categories/dto/create-product-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product-categories/dto/create-product-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateProductCategoryDto {\n    @IsString()\n    @IsNotEmpty()\n    name: string;\n}\n\nexport default CreateProductCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty, ValidateNested} from 'class-validator';\nimport {Type} from 'class-transformer';\nimport ObjectWithId from \"../../utils/types/object-with-id\";\n\nexport class CreateProductDto {\n    @IsString()\n    @IsNotEmpty()\n    name: string;\n\n    @ValidateNested()\n    @Type(() => ObjectWithId)\n    category: ObjectWithId;\n}\n\nexport default CreateProductDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriberDto.html":{"url":"classes/CreateSubscriberDto.html","title":"class - CreateSubscriberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dto/create-subscriber.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSubscriberDto {\n    email: string;\n    name: string;\n}\n\nexport default CreateSubscriberDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n    email: string;\n    name: string;\n    password: string;\n}\n\nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreditCardsController.html":{"url":"controllers/CreditCardsController.html","title":"controller - CreditCardsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreditCardsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/credit-cards.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credit-cards\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCreditCard\n                            \n                            \n                                    Async\n                                getCreditCards\n                            \n                            \n                                    Async\n                                setDefaultCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCreditCard(creditCard: AddCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/credit-cards.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                AddCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCreditCards(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/credit-cards.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setDefaultCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCard(creditCard: SetDefaultCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('default')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/credit-cards.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                SetDefaultCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Get, HttpCode, Post, Req, UseGuards} from '@nestjs/common';\nimport {StripeService} from \"../stripe/stripe.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport AddCreditCardDto from \"./dto/add-credit-card.dto\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport SetDefaultCreditCardDto from \"./dto/set-default-credit-card.dto\";\nimport {EmailConfirmationGuard} from \"../email-confirmation/guards/email-confirmation.guard\";\n\n@Controller('credit-cards')\nexport class CreditCardsController {\n    constructor(private readonly stripeService: StripeService) {\n    }\n\n    @Post()\n    @UseGuards(EmailConfirmationGuard)\n    @UseGuards(JwtAuthenticationGuard)\n    async addCreditCard(@Body() creditCard: AddCreditCardDto, @Req() request: RequestWithUser) {\n        return this.stripeService.attachCreditCard(creditCard.paymentMethodId, request.user.stripeCustomerId);\n    }\n\n    @Post('default')\n    @HttpCode(200)\n    @UseGuards(JwtAuthenticationGuard)\n    async setDefaultCard(@Body() creditCard: SetDefaultCreditCardDto, @Req() request: RequestWithUser) {\n        await this.stripeService.setDefaultCreditCard(creditCard.paymentMethodId, request.user.stripeCustomerId);\n    }\n\n    @Get()\n    @UseGuards(JwtAuthenticationGuard)\n    async getCreditCards(@Req() request: RequestWithUser) {\n        return this.stripeService.listCreditCards(request.user.stripeCustomerId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CreditCardsModule.html":{"url":"modules/CreditCardsModule.html","title":"module - CreditCardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CreditCardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CreditCardsModule\n\n\n\ncluster_CreditCardsModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/credit-cards/credit-cards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CreditCardsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CreditCardsController } from './credit-cards.controller';\nimport {StripeModule} from \"../stripe/stripe.module\";\n\n@Module({\n  imports: [StripeModule],\n  controllers: [CreditCardsController]\n})\nexport class CreditCardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/custom-logger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/custom-logger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, ConsoleLogger} from '@nestjs/common';\nimport {ConsoleLoggerOptions} from '@nestjs/common/services/console-logger.service';\nimport {ConfigService} from '@nestjs/config';\nimport getLogLevels from '../utils/get-log-levels';\nimport LogsService from './logs.service';\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n    private readonly logsService: LogsService;\n\n    constructor(\n        context: string,\n        options: ConsoleLoggerOptions,\n        configService: ConfigService,\n        logsService: LogsService\n    ) {\n        const environment = configService.get('NODE_ENV');\n\n        super(\n            context,\n            {\n                ...options,\n                logLevels: getLogLevels(environment === 'production')\n            }\n        );\n\n        this.logsService = logsService;\n    }\n\n    log(message: string, context?: string) {\n        super.log.apply(this, [message, context]);\n\n        this.logsService.createLog({\n            message,\n            context: context || this.context || 'NO CONTEXT',\n            level: 'log'\n        })\n    }\n\n    error(message: string, stack?: string, context?: string) {\n        super.error.apply(this, [message, stack, context]);\n\n        this.logsService.createLog({\n            message,\n            context: context || this.context || 'NO CONTEXT',\n            level: 'error'\n        })\n    }\n\n    warn(message: string, context?: string) {\n        super.warn.apply(this, [message, context]);\n\n        this.logsService.createLog({\n            message,\n            context: context || this.context || 'NO CONTEXT',\n            level: 'error'\n        })\n    }\n\n    debug(message: string, context?: string) {\n        super.debug.apply(this, [message, context]);\n\n        this.logsService.createLog({\n            message,\n            context: context || this.context || 'NO CONTEXT',\n            level: 'error'\n        })\n    }\n\n    verbose(message: string, context?: string) {\n        super.debug.apply(this, [message, context]);\n\n        this.logsService.createLog({\n            message,\n            context: context || this.context || 'NO CONTEXT',\n            level: 'error'\n        })\n    }\n}\n\nexport default CustomLogger;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/database.logger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.logger.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Logger as TypeOrmLogger, QueryRunner} from 'typeorm';\nimport {Logger as NestLogger} from '@nestjs/common';\n\nclass DatabaseLogger implements TypeOrmLogger {\n    private readonly logger = new NestLogger('SQL');\n\n    logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n        if (queryRunner?.data?.isCreatingLogs) {\n            return;\n        }\n        this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n    }\n    logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n        if (queryRunner?.data?.isCreatingLogs) {\n            return;\n        }\n        this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n    }\n    logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n        if (queryRunner?.data?.isCreatingLogs) {\n            return;\n        }\n        this.logger.warn(`Time: ${time} -- Parameters: ${this.stringifyParameters(parameters)} -- ${query}`);\n    }\n    logMigration(message: string) {\n        this.logger.log(message);\n    }\n    logSchemaBuild(message: string) {\n        this.logger.log(message);\n    }\n    log(level: 'log' | 'info' | 'warn', message: string, queryRunner?: QueryRunner) {\n        if (queryRunner?.data?.isCreatingLogs) {\n            return;\n        }\n        if (level === 'log') {\n            return this.logger.log(message);\n        }\n        if (level === 'info') {\n            return this.logger.debug(message);\n        }\n        if (level === 'warn') {\n            return this.logger.warn(message);\n        }\n    }\n    private stringifyParameters(parameters?: unknown[]) {\n        try {\n            return JSON.stringify(parameters);\n        } catch {\n            return '';\n        }\n    }\n}\n\nexport default DatabaseLogger;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport {ConfigModule, ConfigService} from \"@nestjs/config\";\nimport {SnakeNamingStrategy} from \"typeorm-naming-strategies\";\nimport DatabaseLogger from \"./database.logger\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => ({\n                type: 'mysql',\n                host: configService.get('DB_HOST'),\n                port: configService.get('DB_PORT'),\n                username: configService.get('DB_USERNAME'),\n                password: configService.get('DB_PASSWORD'),\n                database: configService.get('DB_DATABASE'),\n                //entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n                //entities: [__dirname + '/../**/*.entity{.ts,.js}', 'dist/**/*.entity.js'],\n                autoLoadEntities: true,\n                synchronize: true,\n                namingStrategy: new SnakeNamingStrategy(),\n                logger: new DatabaseLogger(),\n            })\n        }),\n    ]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElasticsearchHealthIndicator.html":{"url":"injectables/ElasticsearchHealthIndicator.html","title":"injectable - ElasticsearchHealthIndicator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ElasticsearchHealthIndicator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/elasticsearch-health-indicator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HealthIndicator\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isHealthy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/health/elasticsearch-health-indicator.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHealthy(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/elasticsearch-health-indicator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {HealthIndicator, HealthIndicatorResult, HealthCheckError} from '@nestjs/terminus';\nimport {ElasticsearchService} from '@nestjs/elasticsearch';\n\n@Injectable()\nexport class ElasticsearchHealthIndicator extends HealthIndicator {\n    constructor(private readonly elasticsearchService: ElasticsearchService) {\n        super();\n    }\n\n    async isHealthy(key: string): Promise {\n        try {\n            await this.elasticsearchService.ping();\n            return this.getStatus(key, true);\n        } catch (error) {\n            throw new HealthCheckError(\n                'ElasticsearchHealthIndicator failed',\n                this.getStatus(key, false)\n            );\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/email-confirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Post, Req, UseGuards} from '@nestjs/common';\nimport {EmailConfirmationService} from \"./email-confirmation.service\";\nimport ConfirmEmailDto from \"./dto/confirm-emai.dto\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\n\n@Controller('email-confirmation')\nexport class EmailConfirmationController {\n    constructor(private readonly emailConfirmationService: EmailConfirmationService) {\n    }\n\n    @Post('confirm')\n    async confirm(@Body() confirmationData: ConfirmEmailDto) {\n        const email = await this.emailConfirmationService.decodeConfirmationToken(confirmationData.token);\n        await this.emailConfirmationService.confirmEmail(email);\n    }\n\n    @Post('resend-confirmation-link')\n    @UseGuards(JwtAuthenticationGuard)\n    async resendConfirmationLink(@Req() request: RequestWithUser) {\n        await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/email-confirmation/guards/email-confirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/guards/email-confirmation.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport RequestWithUser from '../../authentication/interfaces/request-with-user.interface';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n    canActivate(context: ExecutionContext) {\n        const request: RequestWithUser = context.switchToHttp().getRequest();\n\n        if (!request.user?.isEmailConfirmed) {\n            throw new UnauthorizedException('Confirm your email first');\n        }\n\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-confirmation/email-confirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationService } from './email-confirmation.service';\nimport {ConfigModule} from \"@nestjs/config\";\nimport {EmailModule} from \"../email/email.module\";\nimport {JwtModule} from \"@nestjs/jwt\";\nimport {UsersModule} from \"../users/users.module\";\nimport { EmailConfirmationController } from './email-confirmation.controller';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UsersModule],\n  providers: [EmailConfirmationService],\n  controllers: [EmailConfirmationController],\n  exports: [EmailConfirmationService],\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/email-confirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/email-confirmation/email-confirmation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {BadRequestException, Injectable} from '@nestjs/common';\nimport VerificationTokenPayload from \"./interfaces/verification-token-payload.interface\";\nimport {UsersService} from \"../users/users.service\";\nimport {EmailService} from \"../email/email.service\";\nimport {JwtService} from \"@nestjs/jwt\";\nimport {ConfigService} from \"@nestjs/config\";\n\n@Injectable()\nexport class EmailConfirmationService {\n    constructor(\n        private readonly jwtService: JwtService,\n        private readonly configService: ConfigService,\n        private readonly emailService: EmailService,\n        private readonly usersService: UsersService,\n    ) {\n    }\n\n    public sendVerificationLink(email: string) {\n        const payload: VerificationTokenPayload = {email};\n        const token = this.jwtService.sign(payload, {\n            secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n            expiresIn: `${this.configService.get('JWT_VERIFICATION_TOKEN_EXPIRATION_TIME')}s`\n        });\n\n        const url = `${this.configService.get('EMAIL_CONFIRMATION_URL')}?token=${token}`;\n        //const url = `${this.configService.get('FRONTEND_URL')}/email-confirmation?token=${token}`;\n\n        const html = `Welcome to the application. To confirm the email address, click here: Confirm Email`;\n\n        return this.emailService.sendMail({\n            to: email,\n            subject: 'Email confirmation',\n            html,\n        })\n    }\n\n    public async resendConfirmationLink(userId: number) {\n        const user = await this.usersService.getById(userId);\n        if (user.isEmailConfirmed) {\n            throw new BadRequestException('Email already confirmed');\n        }\n        await this.sendVerificationLink(user.email);\n    }\n\n    public async confirmEmail(email: string) {\n        const user = await this.usersService.getByEmail(email);\n        if (user.isEmailConfirmed) {\n            throw new BadRequestException('Email already confirmed');\n        }\n        await this.usersService.markEmailAsConfirmed(email);\n    }\n\n    public async decodeConfirmationToken(token: string) {\n        try {\n            const payload = await this.jwtService.verify(token, {\n                secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n            });\n\n            if (typeof payload === 'object' && 'email' in payload) {\n                return payload.email;\n            }\n            throw new BadRequestException();\n        } catch (error) {\n            if (error?.name === 'TokenExpiredError') {\n                throw new BadRequestException('Email confirmation token expired');\n            }\n            throw new BadRequestException('Bad confirmation token');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport {ConfigModule} from \"@nestjs/config\";\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService]\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-scheduling/dto/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n    @IsEmail()\n    recipient: string;\n\n    @IsString()\n    @IsNotEmpty()\n    subject: string;\n\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @IsDateString()\n    date: string;\n}\n\nexport default EmailScheduleDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-scheduling/email-scheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Post, UseGuards} from '@nestjs/common';\nimport {EmailSchedulingService} from \"./email-scheduling.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport EmailScheduleDto from \"./dto/email-schedule.dto\";\n\n@Controller('email-scheduling')\nexport class EmailSchedulingController {\n    constructor(private readonly emailSchedulingService: EmailSchedulingService) {\n    }\n\n    @Post('schedule')\n    @UseGuards(JwtAuthenticationGuard)\n    async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n        this.emailSchedulingService.scheduleEmail(emailSchedule);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-scheduling/email-scheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailSchedulingService } from './email-scheduling.service';\nimport {EmailModule} from \"../email/email.module\";\nimport { EmailSchedulingController } from './email-scheduling.controller';\n\n@Module({\n  imports: [EmailModule],\n  providers: [EmailSchedulingService],\n  controllers: [EmailSchedulingController]\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-scheduling/email-scheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log1\n                            \n                            \n                                log2\n                            \n                            \n                                log3\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/email-scheduling/email-scheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log1\n                        \n                    \n                \n            \n            \n                \nlog1()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('* * * * * *')\n                \n            \n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log2\n                        \n                    \n                \n            \n            \n                \nlog2()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval(60000)\n                \n            \n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log3\n                        \n                    \n                \n            \n            \n                \nlog3()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout(60000)\n                \n            \n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {EmailService} from \"../email/email.service\";\nimport EmailScheduleDto from \"./dto/email-schedule.dto\";\nimport {Cron, Interval, SchedulerRegistry, Timeout} from \"@nestjs/schedule\";\nimport {CronJob} from \"cron\";\n\n@Injectable()\nexport class EmailSchedulingService {\n    constructor(\n        private readonly emailService: EmailService,\n        private readonly schedulerRegistry: SchedulerRegistry\n    ) {}\n\n    @Cron('* * * * * *')\n    log1() {\n        //console.log('Hello world!');\n    }\n\n    @Interval(60000)\n    log2() {\n        //console.log('Called every minute');\n    }\n\n    @Timeout(60000)\n    log3() {\n        console.log('Called once after a minute');\n    }\n\n    scheduleEmail(emailSchedule: EmailScheduleDto) {\n        const date = new Date(emailSchedule.date);\n        const job = new CronJob(date, () => {\n            this.emailService.sendMail({\n                to: emailSchedule.recipient,\n                subject: emailSchedule.subject,\n                text: emailSchedule.content\n            })\n        });\n\n        this.schedulerRegistry.addCronJob(`${Date.now()}-${emailSchedule.subject}`, job);\n        job.start();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {createTransport} from 'nodemailer';\nimport {ConfigService} from \"@nestjs/config\";\nimport * as Mail from \"nodemailer/lib/mailer\";\n\n@Injectable()\nexport class EmailService {\n    private nodemailerTransport: Mail;\n\n    constructor(private readonly configService: ConfigService) {\n        this.nodemailerTransport = createTransport({\n            //service: configService.get('MAIL_SERVICE'),\n            host: configService.get('MAIL_HOST'),\n            port: configService.get('MAIL_PORT'),\n            secure: false,\n            requireTLS: true,\n            auth: {\n                user: configService.get('MAIL_USERNAME'),\n                pass: configService.get('MAIL_PASSWORD'),\n            }\n        });\n    }\n\n    sendMail(options: Mail.Options) {\n        return this.nodemailerTransport.sendMail(options);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interceptors/exclude-null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/interceptors/exclude-null.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport recursivelyStripNullValues from '../recursively-strip-null-values';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(map(value => recursivelyStripNullValues(value)));\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesService } from './files.service';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport PublicFile from \"./entities/public-file.entity\";\nimport PrivateFile from \"./entities/private-file.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([PublicFile, PrivateFile]),\n  ],\n  providers: [FilesService],\n  exports: [FilesService]\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                deletePublicFileWithQueryRunner\n                            \n                            \n                                    Public\n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Public\n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                uploadPrivateFile\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, privateFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/files/files.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(dataBuffer: Buffer, ownerId: number, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        s3\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/files/files.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NotFoundException} from '@nestjs/common';\nimport {v4 as uuid} from 'uuid';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport PublicFile from \"./entities/public-file.entity\";\nimport {QueryRunner, Repository} from \"typeorm\";\nimport {ConfigService} from \"@nestjs/config\";\nimport * as S3 from 'aws-sdk/clients/s3';\nimport PrivateFile from \"./entities/private-file.entity\";\n\n@Injectable()\nexport class FilesService {\n    private readonly s3;\n\n    constructor(\n        @InjectRepository(PublicFile)\n        private publicFilesRepository: Repository,\n        @InjectRepository(PrivateFile)\n        private privateFilesRepository: Repository,\n        private readonly configService: ConfigService\n    ) {\n        this.s3 = new S3({\n            endpoint: this.configService.get('S3_ENDPOINT'),\n            accessKeyId: this.configService.get('S3_ACCESS_KEY_ID'),\n            secretAccessKey: this.configService.get('S3_SECRET_ACCESS_KEY'),\n            region: this.configService.get('S3_DEFAULT_REGION'),\n        });\n    }\n\n    async uploadPublicFile(dataBuffer: Buffer, filename: string) {\n        const uploadResult = await this.s3.upload({\n            Bucket: this.configService.get('S3_BUCKET'),\n            Body: dataBuffer,\n            Key: `${uuid()}-${filename}`,\n            ACL: 'public-read',\n        }).promise();\n\n        const newFile = this.publicFilesRepository.create({\n            key: uploadResult.Key,\n            url: uploadResult.Location\n        });\n        await this.publicFilesRepository.save(newFile);\n        return newFile;\n    }\n\n    async deletePublicFile(fileId: number) {\n        const file = await this.publicFilesRepository.findOne({id: fileId});\n        await this.s3.deleteObject({\n            Bucket: this.configService.get('S3_BUCKET'),\n            Key: file.key,\n        }).promise();\n        await this.publicFilesRepository.delete(fileId);\n    }\n\n    async deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner) {\n        const file = await queryRunner.manager.findOne(PublicFile, {id: fileId});\n        const s3 = new S3();\n        await s3.deleteObject({\n            Bucket: this.configService.get('S3_BUCKET'),\n            Key: file.key,\n        }).promise();\n        await queryRunner.manager.delete(PublicFile, fileId);\n    }\n\n    async uploadPrivateFile(dataBuffer: Buffer, ownerId: number, filename: string) {\n        const uploadResult = await this.s3.upload({\n            Bucket: this.configService.get('S3_BUCKET'),\n            Body: dataBuffer,\n            Key: `${uuid()}-${filename}`,\n            ACL: 'private'\n        }).promise();\n\n        const newFile = this.privateFilesRepository.create({\n            key: uploadResult.Key,\n            owner: {\n                id: ownerId\n            }\n        });\n        await this.privateFilesRepository.save(newFile);\n        return newFile;\n    }\n\n    public async getPrivateFile(fileId: number) {\n        const fileInfo = await this.privateFilesRepository.findOne({id: fileId}, {relations: ['owner']});\n        if (fileInfo) {\n            const stream = await this.s3.getObject({\n                Bucket: this.configService.get('S3_BUCKET'),\n                Key: fileInfo.key\n            }).createReadStream();\n\n            return {\n                stream,\n                info: fileInfo,\n            }\n        }\n        throw new NotFoundException();\n    }\n\n    public async generatePresignedUrl(key: string) {\n        return this.s3.getSignedUrlPromise('getObject', {\n            Bucket: this.configService.get('S3_BUCKET'),\n            Key: key,\n            Expires: 60 * 60 * 24\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/find-one-params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/find-one-params.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nclass FindOneParams {\n    @IsNumberString()\n    id: string;\n}\n\nexport default FindOneParams\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/get-comments.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/get-comments.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsOptional} from 'class-validator';\nimport {Type} from 'class-transformer';\n\nclass GetCommentsDto {\n    @Type(() => Number)\n    @IsOptional()\n    postId?: number;\n}\n\nexport default GetCommentsDto\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/handlers/get-comments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/handlers/get-comments.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/queries/handlers/get-comments.handler.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {IQueryHandler, QueryHandler} from '@nestjs/cqrs';\nimport {GetCommentsQuery} from '../implementations/get-comments.query';\nimport {InjectRepository} from '@nestjs/typeorm';\nimport Comment from '../../entities/comment.entity';\nimport {Repository} from 'typeorm';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n    constructor(@InjectRepository(Comment) private commentsRepository: Repository) {\n    }\n\n    async execute(query: GetCommentsQuery) {\n        if (query.postId) {\n            return this.commentsRepository.find({\n                post: {\n                    id: query.postId\n                }\n            });\n        }\n        return this.commentsRepository.find();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/implementations/get-comments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/implementations/get-comments.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/queries/implementations/get-comments.query.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetCommentsQuery {\n    constructor(public readonly postId?: number) {}\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/google-authentication/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/google-authentication/google-authentication.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, ClassSerializerInterceptor, Controller, Post, Req, UseInterceptors} from '@nestjs/common';\nimport {GoogleAuthenticationService} from \"./google-authentication.service\";\nimport TokenVerificationDto from \"./dto/token-verification.dto\";\nimport {Request} from 'express';\nimport {JwtService} from \"@nestjs/jwt\";\n\n@Controller('google-authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class GoogleAuthenticationController {\n    constructor(\n        private readonly googleAuthenticationService: GoogleAuthenticationService,\n        private readonly jwtService: JwtService,\n    ) {\n    }\n\n    @Post()\n    async authenticate(@Body() tokenData: TokenVerificationDto, @Req() request: Request) {\n        const credentials: any = this.jwtService.decode(tokenData.token)!!;\n        console.log(credentials)\n        const {\n            accessTokenCookie,\n            refreshTokenCookie,\n            user\n        } = await this.googleAuthenticationService.authenticateUserData(credentials.name, credentials.email);\n\n        /*\n        const {\n            accessTokenCookie,\n            refreshTokenCookie,\n            user\n        } = await this.googleAuthenticationService.authenticate(tokenData.token);\n         */\n\n        request.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthenticationModule.html":{"url":"modules/GoogleAuthenticationModule.html","title":"module - GoogleAuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_GoogleAuthenticationModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/google-authentication/google-authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './google-authentication.service';\nimport {AuthenticationModule} from \"../authentication/authentication.module\";\nimport {UsersModule} from \"../users/users.module\";\nimport {ConfigModule} from \"@nestjs/config\";\nimport {JwtModule} from \"@nestjs/jwt\";\n\n@Module({\n  imports: [ConfigModule, UsersModule, AuthenticationModule, JwtModule.register({})],\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService]\n})\nexport class GoogleAuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/google-authentication/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                authenticateUserData\n                            \n                            \n                                    Async\n                                getCookiesForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                            \n                                    Async\n                                registerUserDirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/google-authentication/google-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticateUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticateUserData(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookiesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUserDirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUserDirect(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/google-authentication/google-authentication.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/google-authentication/google-authentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, UnauthorizedException} from '@nestjs/common';\nimport {UsersService} from \"../users/users.service\";\nimport {ConfigService} from \"@nestjs/config\";\nimport {google, Auth} from 'googleapis';\nimport {AuthenticationService} from \"../authentication/authentication.service\";\nimport User from \"../users/entities/user.entity\";\n\n@Injectable()\nexport class GoogleAuthenticationService {\n    oauthClient: Auth.OAuth2Client;\n\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly configService: ConfigService,\n        private readonly authenticationService: AuthenticationService\n    ) {\n        const clientID = this.configService.get('GOOGLE_AUTH_CLIENT_ID');\n        const clientSecret = this.configService.get('GOOGLE_AUTH_CLIENT_SECRET');\n\n        this.oauthClient = new google.auth.OAuth2(\n            clientID,\n            clientSecret\n        );\n    }\n\n    async getUserData(token: string) {\n        const userInfoClient = google.oauth2('v2').userinfo;\n\n        this.oauthClient.setCredentials({\n            access_token: token\n        })\n\n        const userInfoResponse = await userInfoClient.get({\n            auth: this.oauthClient\n        });\n\n        return userInfoResponse.data;\n    }\n\n    async getCookiesForUser(user: User) {\n        const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(user.id);\n        const {\n            cookie: refreshTokenCookie,\n            token: refreshToken\n        } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n        await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n        return {\n            accessTokenCookie,\n            refreshTokenCookie\n        }\n    }\n\n    async handleRegisteredUser(user: User) {\n        if (!user.isRegisteredWithGoogle) {\n            throw new UnauthorizedException('The user is registered with password');\n        }\n\n        const {\n            accessTokenCookie,\n            refreshTokenCookie\n        } = await this.getCookiesForUser(user);\n\n        return {\n            accessTokenCookie,\n            refreshTokenCookie,\n            user\n        }\n    }\n\n    async registerUser(token: string, email: string) {\n        const userData = await this.getUserData(token);\n        const name = userData.name;\n\n        const user = await this.usersService.createWithGoogle(email, name);\n\n        return this.handleRegisteredUser(user);\n    }\n\n    async registerUserDirect(name: string, email: string) {\n        const user = await this.usersService.createWithGoogle(email, name);\n\n        return this.handleRegisteredUser(user);\n    }\n\n    async authenticate(token: string) {\n        const tokenInfo = await this.oauthClient.getTokenInfo(token);\n\n        const email = tokenInfo.email;\n\n        try {\n            const user = await this.usersService.getByEmail(email);\n\n            return this.handleRegisteredUser(user);\n        } catch (error) {\n            if (error.status !== 404) {\n                throw new error;\n            }\n\n            return this.registerUser(token, email);\n        }\n    }\n\n    async authenticateUserData(name: string, email: string) {\n        try {\n            const user = await this.usersService.getByEmail(email);\n\n            // handle registered user\n            // 1. user has flag registered with google -> sign in\n            // 2. user doesn't has the flag -> response unauthorized, they should login with password\n            return this.handleRegisteredUser(user);\n        } catch (error) {\n            // if not found then create new user and set flag as registered with google\n            if (error.status !== 404) {\n                throw new error;\n            }\n\n            return this.registerUserDirect(name, email);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GraphqlJwtAuthGuard.html":{"url":"injectables/GraphqlJwtAuthGuard.html","title":"injectable - GraphqlJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GraphqlJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/graphql-jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/guards/graphql-jwt-auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {AuthGuard} from '@nestjs/passport';\nimport {ExecutionContext, Injectable} from '@nestjs/common';\nimport {GqlExecutionContext} from '@nestjs/graphql';\n\n@Injectable()\nexport class GraphqlJwtAuthGuard extends AuthGuard('jwt') {\n    getRequest(context: ExecutionContext) {\n        const ctx = GqlExecutionContext.create(context);\n        return ctx.getContext().req;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get} from '@nestjs/common';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckService,\n    MemoryHealthIndicator,\n    TypeOrmHealthIndicator\n} from \"@nestjs/terminus\";\nimport {ElasticsearchHealthIndicator} from \"./elasticsearch-health-indicator\";\n\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private healthCheckService: HealthCheckService,\n        private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n        private memoryHealthIndicator: MemoryHealthIndicator,\n        private diskHealthIndicator: DiskHealthIndicator,\n        //private elasticsearchHealthIndicator: ElasticsearchHealthIndicator,\n    ) {}\n\n    @Get()\n    @HealthCheck()\n    check() {\n        //return this.healthCheckService.check([]);\n        return this.healthCheckService.check([\n            () => this.typeOrmHealthIndicator.pingCheck('database'),\n            // the process should not use more than 300MB memory\n            () => this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n            // The process should not have more than 300MB RSS memory allocated\n            () => this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n            // the used disk storage should not exceed the 50% of the available space\n            () => this.diskHealthIndicator.checkStorage('disk health', {\n                thresholdPercent: 0.5, path: (process.platform === \"win32\" ? 'C:\\\\' : '/')\n            }),\n            //() => this.elasticsearchHealthIndicator.isHealthy('elasticsearch')\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport {TerminusModule} from \"@nestjs/terminus\";\nimport {ElasticsearchHealthIndicator} from \"./elasticsearch-health-indicator\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n  providers: [/*ElasticsearchHealthIndicator*/]\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/interceptors/http-cache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {CACHE_KEY_METADATA, CacheInterceptor, ExecutionContext, Injectable} from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n    trackBy(context: ExecutionContext): string | undefined {\n        const cacheKey = this.reflector.get(\n            CACHE_KEY_METADATA,\n            context.getHandler(),\n        );\n\n        // if we don't use @CacheKey() then use original super.trackBy(context)\n        if (cacheKey) {\n            const request = context.switchToHttp().getRequest();\n            return `${cacheKey}-${request._parsedUrl.query}`;\n        }\n\n        return super.trackBy(context);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLogsMiddleware.html":{"url":"injectables/HttpLogsMiddleware.html","title":"injectable - HttpLogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/middlewares/http-logs-middleware.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/middlewares/http-logs-middleware.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/middlewares/http-logs-middleware.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, NestMiddleware} from '@nestjs/common';\nimport {Request, Response, NextFunction} from 'express';\n\n@Injectable()\nclass HttpLogsMiddleware implements NestMiddleware {\n    private readonly logger = new Logger('HTTP');\n\n    use(request: Request, response: Response, next: NextFunction) {\n        response.on('finish', () => {\n            const {method, originalUrl} = request;\n            const {statusCode, statusMessage} = response;\n\n            const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n            if (statusCode >= 500) {\n                return this.logger.error(message);\n            }\n\n            if (statusCode >= 400) {\n                return this.logger.warn(message);\n            }\n\n            return this.logger.log(message);\n        });\n\n        next();\n    }\n}\n\nexport default HttpLogsMiddleware;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {ExtractJwt, Strategy} from 'passport-jwt';\nimport {PassportStrategy} from '@nestjs/passport';\nimport {Injectable} from '@nestjs/common';\nimport {ConfigService} from '@nestjs/config';\nimport {Request} from 'express';\nimport {UsersService} from '../../users/users.service';\nimport TokenPayload from '../interfaces/token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refresh-token') {\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly userService: UsersService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n                return request?.cookies?.Refresh;\n            }]),\n            secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n            passReqToCallback: true,\n        });\n    }\n\n    async validate(request: Request, payload: TokenPayload) {\n        const refreshToken = request.cookies?.Refresh;\n        return this.userService.getUserIfRefreshTokenMatches(refreshToken, payload.userId);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport TokenPayload from '../interfaces/token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly userService: UsersService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n                return request?.cookies?.Authentication;\n            }]),\n            secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET')\n        });\n    }\n\n    async validate(payload: TokenPayload) {\n        return this.userService.getById(payload.userId);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {AuthGuard} from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-two-factor.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-two-factor.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {ExtractJwt, Strategy} from 'passport-jwt';\nimport {PassportStrategy} from '@nestjs/passport';\nimport {Injectable} from '@nestjs/common';\nimport {ConfigService} from '@nestjs/config';\nimport {Request} from 'express';\nimport {UsersService} from '../../users/users.service';\nimport TokenPayload from '../interfaces/token-payload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(Strategy, 'jwt-two-factor') {\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly userService: UsersService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n                return request?.cookies?.Authentication;\n            }]),\n            secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET')\n        });\n    }\n\n    async validate(payload: TokenPayload) {\n        const user = await this.userService.getById(payload.userId);\n        if (!user.isTwoFactorAuthenticationEnabled) {\n            return user;\n        }\n        if (payload.isSecondFactorAuthenticated) {\n            return user;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport User from '../../users/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authenticationService: AuthenticationService) {\n        super({usernameField: 'email'});\n    }\n\n    async validate(email: string, password: string): Promise {\n        return this.authenticationService.getAuthenticatedUser(email, password);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Log.html":{"url":"entities/Log.html","title":"entity - Log","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/entities/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/entities/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {Column, CreateDateColumn, Entity, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity({name: 'logs'})\nclass Log {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public context: string;\n\n    @Column({type: \"text\"})\n    public message: string;\n\n    @Column()\n    public level: string;\n\n    @CreateDateColumn()\n    creationDate: Date;\n}\n\nexport default Log;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport LogsService from \"./logs.service\";\nimport {ConfigModule} from \"@nestjs/config\";\nimport CustomLogger from \"./custom-logger\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport Log from \"./entities/log.entity\";\n\n@Module({\n    imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n    providers: [CustomLogger, LogsService],\n    exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport Log from \"./entities/log.entity\";\nimport {Repository} from \"typeorm\";\nimport CreateLogDto from \"./dto/create-log.dto\";\n\n@Injectable()\nexport default class LogsService {\n    constructor(@InjectRepository(Log) private logsRepository: Repository) {\n    }\n\n    async createLog(log: CreateLogDto) {\n        const newLog = await this.logsRepository.create(log);\n        await this.logsRepository.save(newLog, {\n            data: {\n                isCreatingLogs: true\n            }\n        });\n        return newLog;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/entities/message.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/entities/message.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/entities/message.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/entities/message.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../../users/entities/user.entity';\n\n@Entity({name: 'messages'})\nclass Message {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public content: string;\n\n    @ManyToOne(() => User)\n    public author: User;\n}\n\nexport default Message;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithId.html":{"url":"classes/ObjectWithId.html","title":"class - ObjectWithId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/object-with-id.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/object-with-id.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nclass ObjectWithId {\n    @IsNumber()\n    id: number;\n}\n\nexport default ObjectWithId;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getJobResult\n                            \n                            \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get, Param, Post, Res, UploadedFiles, UseInterceptors} from '@nestjs/common';\nimport {AnyFilesInterceptor} from '@nestjs/platform-express';\nimport {Express, Response} from 'express';\n\nimport {Readable} from 'stream';\nimport {InjectQueue} from \"@nestjs/bull\";\nimport {Queue} from \"bull\";\n\n@Controller('optimize')\nexport class OptimizeController {\n    constructor(@InjectQueue('image') private readonly imageQueue: Queue) {\n    }\n\n    @Post('image')\n    @UseInterceptors(AnyFilesInterceptor())\n    async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n        const job = await this.imageQueue.add('optimize', {\n            files\n        });\n\n        return {\n            jobId: job.id\n        }\n    }\n\n    @Get('image/:id')\n    async getJobResult(@Res() response: Response, @Param('id') id: string) {\n        const job = await this.imageQueue.getJob(id);\n\n        if (!job) {\n            return response.sendStatus(404);\n        }\n\n        const isCompleted = await job.isCompleted();\n\n        if (!isCompleted) {\n            return response.sendStatus(202);\n        }\n\n        const result = Buffer.from(job.returnvalue);\n\n        const stream = Readable.from(result);\n\n        stream.pipe(response);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OptimizeController } from './optimize.controller';\nimport {BullModule} from \"@nestjs/bull\";\nimport { join } from 'path';\n\n@Module({\n    imports: [\n        BullModule.registerQueue({\n            name: 'image',\n            processors: [{\n                name: 'optimize',\n                path: join(__dirname, 'image.processor.js')\n            }],\n        })\n    ],\n    controllers: [OptimizeController],\n    providers: [],\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/pagination-params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/pagination-params.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/pagination-params.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/pagination-params.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNumber, Min, IsOptional} from 'class-validator';\nimport {Type} from 'class-transformer';\n\nexport class PaginationParams {\n    @IsOptional()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(1)\n    startId?: number;\n\n    @IsOptional()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(1)\n    page?: number;\n\n    @IsOptional()\n    @Type(() => Number)\n    @IsNumber()\n    @Min(1)\n    limit?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                authorId\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, author => author.posts)@JoinColumn({name: 'author_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts)@JoinTable({name: 'post_categories', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column, CreateDateColumn,\n    Entity,\n    Index,\n    JoinColumn,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    OneToMany,\n    PrimaryGeneratedColumn, RelationId\n} from 'typeorm';\nimport {Transform} from \"class-transformer\";\nimport User from \"../../users/entities/user.entity\";\nimport Category from \"../../categories/entities/category.entity\";\nimport Comment from \"../../comments/entities/comment.entity\";\n\n@Entity({name: 'posts'})\nclass Post {\n    @PrimaryGeneratedColumn()\n    public id?: number;\n\n    @Column()\n    public title: string;\n\n    @Column()\n    public content: string;\n\n    @Column({nullable: true})\n    @Transform(({value}) => {\n        if (value !== null) {\n            return value;\n        }\n    })\n    public category?: string;\n\n    @Index('post_authorId_index')\n    @ManyToOne(() => User, (author: User) => author.posts)\n    @JoinColumn({name: \"author_id\"})\n    public author: User;\n\n    @RelationId((post: Post) => post.author)\n    public authorId: number;\n\n    @ManyToMany(() => Category, (category: Category) => category.posts)\n    @JoinTable({\n        name: \"post_categories\",\n        joinColumn: {\n            name: \"post_id\",\n            referencedColumnName: \"id\"\n        },\n        inverseJoinColumn: {\n            name: \"category_id\",\n            referencedColumnName: \"id\"\n        }\n    })\n    public categories: Category[];\n\n    @OneToMany(() => Comment, (comment: Comment) => comment.post)\n    public comments?: Comment[];\n\n    @CreateDateColumn({type: 'timestamp'})\n    createdAt: Date;\n\n    @Column({type: 'timestamp', nullable: true})\n    scheduledDate?: Date;\n}\n\nexport default Post;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostLoader.html":{"url":"injectables/PostLoader.html","title":"injectable - PostLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/loaders/post.loader.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                batchAuthors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/loaders/post.loader.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        batchAuthors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataLoader(async (authorIds: number[]) => {\n        const users = await this.usersService.getByIds(authorIds);\n        const usersMap = new Map(users.map(user => [user.id, user]));\n        return authorIds.map(authorId => usersMap.get(authorId));\n    })\n                    \n                \n                    \n                        \n                                Defined in src/posts/loaders/post.loader.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope } from '@nestjs/common';\nimport { UsersService } from '../../users/users.service';\nimport * as DataLoader from 'dataloader';\n\n@Injectable({ scope: Scope.REQUEST })\nexport default class PostLoader {\n    constructor(private usersService: UsersService) {\n    }\n\n    public readonly batchAuthors = new DataLoader(async (authorIds: number[]) => {\n        const users = await this.usersService.getByIds(authorIds);\n        const usersMap = new Map(users.map(user => [user.id, user]));\n        return authorIds.map(authorId => usersMap.get(authorId));\n    })\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/exceptions/post-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/posts/exceptions/post-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass PostNotFoundException extends NotFoundException {\n    constructor(postId: number) {\n        super(`Post with id ${postId} not found`);\n    }\n}\n\nexport default PostNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPosts\n                        \n                    \n                \n            \n            \n                \ngetPosts(search: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseInterceptors(HttpCacheInterceptor)@CacheKey(GET_POSTS_CACHE_KEY)@CacheTTL(120)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body, CacheInterceptor, CacheKey, CacheTTL,\n    ClassSerializerInterceptor,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put, Query,\n    Req,\n    UseGuards,\n    UseInterceptors\n} from '@nestjs/common';\nimport PostsService from './posts.service';\nimport CreatePostDto from './dto/create-post.dto';\nimport UpdatePostDto from './dto/update-post.dto';\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport FindOneParams from \"../utils/types/find-one-params\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport {PaginationParams} from \"../utils/types/pagination-params\";\nimport {GET_POSTS_CACHE_KEY} from \"./constants/post-cache-key.constant\";\nimport {HttpCacheInterceptor} from \"./interceptors/http-cache.interceptor\";\nimport JwtTwoFactorGuard from \"../authentication/guards/jwt-two-factor.guard\";\nimport {EmailConfirmationGuard} from \"../email-confirmation/guards/email-confirmation.guard\";\n\n@Controller('posts')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class PostsController {\n    constructor(private readonly postsService: PostsService) {}\n\n    @Get()\n    //@UseInterceptors(CacheInterceptor)\n    @UseInterceptors(HttpCacheInterceptor)\n    @CacheKey(GET_POSTS_CACHE_KEY)\n    @CacheTTL(120)\n    getPosts(\n        @Query('search') search: string,\n        @Query() { page, limit, startId }: PaginationParams\n    ) {\n        if (search) {\n            //return this.postsService.searchForPosts(search, page, limit, startId);\n        }\n        return this.postsService.getPosts(page, limit, startId);\n    }\n\n    @Get(':id')\n    getPostById(@Param() { id }: FindOneParams) {\n        return this.postsService.getPostById(Number(id));\n    }\n\n    @Post()\n    @UseGuards(EmailConfirmationGuard)\n    @UseGuards(JwtTwoFactorGuard)\n    async createPost(@Body() post: CreatePostDto, @Req() req: RequestWithUser) {\n        return this.postsService.createPost(post, req.user);\n    }\n\n    @Put(':id')\n    @UseGuards(JwtAuthenticationGuard)\n    async updatePost(@Param() { id }: FindOneParams, @Body() post: UpdatePostDto) {\n        return this.postsService.updatePost(Number(id), post);\n    }\n\n    @Delete(':id')\n    @UseGuards(JwtAuthenticationGuard)\n    async deletePost(@Param() { id }: FindOneParams) {\n        return this.postsService.deletePost(Number(id));\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CacheModule, Module} from '@nestjs/common';\nimport PostsController from './posts.controller';\nimport PostsService from './posts.service';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport Post from \"./entities/post.entity\";\nimport {ConfigModule, ConfigService} from \"@nestjs/config\";\nimport * as redisStore from 'cache-manager-redis-store';\nimport {PostsResolver} from \"./posts.resolver\";\n\n@Module({\n    imports: [\n        /*CacheModule.register({\n            ttl: 5,\n            max: 100\n        }),*/\n        CacheModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => ({\n                store: redisStore,\n                host: configService.get('REDIS_HOST'),\n                port: configService.get('REDIS_PORT'),\n                auth_pass: configService.get('REDIS_PASSWORD'),\n                ttl: 120\n            }),\n        }),\n        TypeOrmModule.forFeature([Post])\n    ],\n    controllers: [PostsController],\n    providers: [PostsService, PostsResolver],\n})\nexport class PostsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                postAdded\n                            \n                            \n                                    Async\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService, pubSub: RedisPubSub)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.resolver.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    RedisPubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(createPostInput: CreatePostInput, context: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GraphqlJwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostInput\n                                    \n                                                CreatePostInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postAdded\n                        \n                    \n                \n            \n            \n                \npostAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(info: GraphQLResolveInfo)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                            GraphQLResolveInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Args, Context, Info, Mutation, Parent, Query, ResolveField, Resolver, Subscription} from '@nestjs/graphql';\nimport {Post} from './models/post.model';\nimport PostsService from './posts.service';\nimport {Inject, UseGuards} from \"@nestjs/common\";\nimport {GraphqlJwtAuthGuard} from \"../authentication/guards/graphql-jwt-auth.guard\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport {CreatePostInput} from \"./inputs/post.input\";\nimport {GraphQLResolveInfo} from \"graphql\";\nimport {parseResolveInfo, ResolveTree, simplifyParsedResolveInfoFragmentWithType} from \"graphql-parse-resolve-info\";\nimport {RedisPubSub} from \"graphql-redis-subscriptions\";\nimport {PUB_SUB} from \"../pub-sub/pub-sub.module\";\n\nconst POST_ADDED_EVENT = 'postAdded';\n\n@Resolver(() => Post)\nexport class PostsResolver {\n    constructor(private postsService: PostsService, @Inject(PUB_SUB) private pubSub: RedisPubSub) {\n    }\n\n    @Query(() => [Post])\n    async posts(@Info() info: GraphQLResolveInfo) {\n        const parsedInfo = parseResolveInfo(info) as ResolveTree;\n        const simplifiedInfo = simplifyParsedResolveInfoFragmentWithType(\n            parsedInfo,\n            info.returnType\n        );\n\n        const posts = 'author' in simplifiedInfo.fields\n            ? await this.postsService.getPostsWithAuthors()\n            : await this.postsService.getPosts();\n\n        return posts.items;\n    }\n\n    @Subscription(() => Post)\n    postAdded() {\n        return this.pubSub.asyncIterator(POST_ADDED_EVENT);\n    }\n\n    @Mutation(() => Post)\n    @UseGuards(GraphqlJwtAuthGuard)\n    async createPost(\n        @Args('input') createPostInput: CreatePostInput,\n        @Context() context: { req: RequestWithUser },\n    ) {\n        const newPost = await this.postsService.createPost(createPostInput, context.req.user);\n        this.pubSub.publish(POST_ADDED_EVENT, { postAdded: newPost });\n        return newPost;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCache\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                getPostsWithAuthors\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(page: number, limit: number, startId?: number, options?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithAuthors(offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {CACHE_MANAGER, HttpException, HttpStatus, Inject, Injectable, Logger} from '@nestjs/common';\nimport CreatePostDto from './dto/create-post.dto';\nimport Post from './entities/post.entity';\nimport UpdatePostDto from './dto/update-post.dto';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport {FindManyOptions, MoreThan, Repository} from \"typeorm\";\nimport PostNotFoundException from \"./exceptions/post-not-found.exception\";\nimport User from \"../users/entities/user.entity\";\nimport {GET_POSTS_CACHE_KEY} from \"./constants/post-cache-key.constant\";\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport default class PostsService {\n    private readonly logger = new Logger(PostsService.name)\n\n    constructor(\n        @InjectRepository(Post) private postsRepository: Repository,\n        @Inject(CACHE_MANAGER) private cacheManager: Cache\n    ) {}\n\n    async clearCache() {\n        const keys: string[] = await this.cacheManager.store.keys();\n        keys.forEach((key) => {\n            if (key.startsWith(GET_POSTS_CACHE_KEY)) {\n                this.cacheManager.del(key);\n            }\n        })\n    }\n\n    async getPosts(page: number = 1, limit: number = 10, startId?: number, options?: FindManyOptions) {\n        const where: FindManyOptions['where'] = {};\n        let separateCount = 0;\n        if (startId) {\n            where.id = MoreThan(startId);\n            separateCount = await this.postsRepository.count();\n        }\n\n        const offset = (page - 1) * limit;\n        const [items, count] = await this.postsRepository.findAndCount({\n            relations: ['author'],\n            order: {\n                id: 'ASC'\n            },\n            skip: offset,\n            take: limit\n        });\n\n        return {\n            items,\n            countData: items.length,\n            totalData: startId ? separateCount : count,\n            currentPage: Number(page),\n            totalPage: Math.ceil((startId ? separateCount : count) / limit)\n        }\n    }\n\n    async getPostsWithAuthors(offset?: number, limit?: number, startId?: number) {\n        return this.getPosts(offset, limit, startId, {\n            relations: ['author'],\n        })\n    }\n\n    async getPostById(id: number) {\n        const post = await this.postsRepository.findOne(id, { relations: ['author']});\n        if (post) {\n            return post;\n        }\n        this.logger.warn('Tried to access a post that does not exist');\n        throw new PostNotFoundException(id);\n    }\n\n    async createPost(post: CreatePostDto, user: User) {\n        const newPost = await this.postsRepository.create({\n            ...post,\n            author: user\n        });\n        await this.postsRepository.save(newPost);\n\n        await this.clearCache();\n\n        return newPost;\n    }\n\n    async updatePost(id: number, post: UpdatePostDto) {\n        await this.postsRepository.update(id, post);\n        const updatedPost = await this.postsRepository.findOne(id, { relations: ['author']});\n        if (updatedPost) {\n            await this.clearCache();\n\n            return updatedPost;\n        }\n        throw new PostNotFoundException(id);\n    }\n\n    async deletePost(id: number) {\n        const deleteResponse = await this.postsRepository.delete(id);\n        if (!deleteResponse.affected) {\n            throw new PostNotFoundException(id);\n        }\n        await this.clearCache();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/entities/private-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/entities/private-file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/entities/private-file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/entities/private-file.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../../users/entities/user.entity';\n\n@Entity({name: 'private_files'})\nclass PrivateFile {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public key: string;\n\n    @ManyToOne(() => User, (owner: User) => owner.files)\n    public owner: User;\n}\n\nexport default PrivateFile;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.products)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport ProductCategory from '../../product-categories/entities/product-category.entity';\nimport { CarProperties } from '../types/car-properties.interface';\nimport { BookProperties } from '../types/book-properties.interface';\n\n@Entity({name: 'products'})\nclass Product {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public name: string;\n\n    @ManyToOne(() => ProductCategory, (category: ProductCategory) => category.products)\n    public category: ProductCategory;\n\n    @Column({\n        type: 'json'\n    })\n    public properties: CarProperties | BookProperties;\n}\n\nexport default Product;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductCategoriesController.html":{"url":"controllers/ProductCategoriesController.html","title":"controller - ProductCategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductCategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product-categories/product-categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product-categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(productCategory: CreateProductCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/product-categories/product-categories.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    productCategory\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/product-categories/product-categories.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, ClassSerializerInterceptor, Controller, Get, Post, UseGuards, UseInterceptors} from '@nestjs/common';\nimport {ProductCategoriesService} from \"./product-categories.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport CreateProductCategoryDto from \"./dto/create-product-category.dto\";\nimport {EmailConfirmationGuard} from \"../email-confirmation/guards/email-confirmation.guard\";\n\n@Controller('product-categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class ProductCategoriesController {\n    constructor(private readonly productsService: ProductCategoriesService) {\n    }\n\n    @Get()\n    getAllProducts() {\n        return this.productsService.getAllProductCategories();\n    }\n\n    @Post()\n    @UseGuards(EmailConfirmationGuard)\n    @UseGuards(JwtAuthenticationGuard)\n    async createProduct(@Body() productCategory: CreateProductCategoryDto) {\n        return this.productsService.createProductCategory(productCategory);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductCategoriesModule.html":{"url":"modules/ProductCategoriesModule.html","title":"module - ProductCategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductCategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductCategoriesModule\n\n\n\ncluster_ProductCategoriesModule_providers\n\n\n\n\nProductCategoriesService\n\nProductCategoriesService\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nProductCategoriesModule -->\n\nProductCategoriesService->ProductCategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product-categories/product-categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductCategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductCategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductCategoriesController } from './product-categories.controller';\nimport { ProductCategoriesService } from './product-categories.service';\nimport ProductCategory from \"./entities/product-category.entity\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ProductCategory])],\n  controllers: [ProductCategoriesController],\n  providers: [ProductCategoriesService]\n})\nexport class ProductCategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductCategoriesService.html":{"url":"injectables/ProductCategoriesService.html","title":"injectable - ProductCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product-categories/product-categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProductCategory\n                            \n                            \n                                getAllProductCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productCategoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/product-categories/product-categories.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productCategoriesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProductCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProductCategory(category: CreateProductCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/product-categories/product-categories.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProductCategories\n                        \n                    \n                \n            \n            \n                \ngetAllProductCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/product-categories/product-categories.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport ProductCategory from \"./entities/product-category.entity\";\nimport {Repository} from \"typeorm\";\nimport CreateProductCategoryDto from \"./dto/create-product-category.dto\";\n\n@Injectable()\nexport class ProductCategoriesService {\n    constructor(\n        @InjectRepository(ProductCategory)\n        private productCategoriesRepository: Repository\n    ) {\n    }\n\n    getAllProductCategories() {\n        return this.productCategoriesRepository.find();\n    }\n\n    async createProductCategory(category: CreateProductCategoryDto) {\n        const newProductCategory = await this.productCategoriesRepository.create(category);\n        await this.productCategoriesRepository.save(newProductCategory);\n        return newProductCategory;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ProductCategory.html":{"url":"entities/ProductCategory.html","title":"entity - ProductCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ProductCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product-categories/entities/product-category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product-categories/entities/product-category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product-categories/entities/product-category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product-categories/entities/product-category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport Product from '../../products/entities/product.entity';\n\n@Entity({name: 'product_categories'})\nclass ProductCategory {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public name: string;\n\n    @OneToMany(() => Product, (product: Product) => product.category)\n    public products: Product[];\n}\n\nexport default ProductCategory;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, ClassSerializerInterceptor, Controller, Get, Post, UseGuards, UseInterceptors} from '@nestjs/common';\nimport {ProductsService} from \"./products.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport CreateProductDto from \"./dto/create-product.dto\";\nimport {EmailConfirmationGuard} from \"../email-confirmation/guards/email-confirmation.guard\";\n\n@Controller('products')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class ProductsController {\n    constructor(\n        private readonly productsService: ProductsService\n    ) {\n    }\n\n    @Get()\n    getAllProducts() {\n        return this.productsService.getAllProducts();\n    }\n\n    @Post()\n    @UseGuards(EmailConfirmationGuard)\n    @UseGuards(JwtAuthenticationGuard)\n    async createProduct(@Body() product: CreateProductDto) {\n        return this.productsService.createProduct(product);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\nimport Product from \"./entities/product.entity\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  providers: [ProductsService],\n  controllers: [ProductsController]\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport Product from \"./entities/product.entity\";\nimport {Repository} from \"typeorm\";\nimport CreateProductDto from \"./dto/create-product.dto\";\n\n@Injectable()\nexport class ProductsService {\n    constructor(\n        @InjectRepository(Product)\n        private productsRepository: Repository\n    ) {\n    }\n\n    getAllProducts() {\n        return this.productsRepository.find();\n    }\n\n    async createProduct(product: CreateProductDto) {\n        const newProduct = await this.productsRepository.create(product);\n        await this.productsRepository.save(newProduct);\n        return newProduct;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PubSubModule.html":{"url":"modules/PubSubModule.html","title":"module - PubSubModule","body":"\n                   \n\n\n\n\n    Modules\n    PubSubModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pub-sub/pub-sub.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {Global, Module} from '@nestjs/common';\nimport {ConfigModule, ConfigService} from \"@nestjs/config\";\nimport {RedisPubSub} from \"graphql-redis-subscriptions\";\n\nexport const PUB_SUB = 'PUB_SUB';\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [\n        {\n            provide: PUB_SUB,\n            useFactory: (configService: ConfigService) => new RedisPubSub({\n                connection: {\n                    host: configService.get('REDIS_HOST'),\n                    port: configService.get('REDIS_PORT'),\n                    username: configService.get('REDIS_USERNAME'),\n                    password: configService.get('REDIS_PASSWORD'),\n                }\n            }),\n            inject: [ConfigService]\n        }\n    ],\n    exports: [PUB_SUB],\n})\nexport class PubSubModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/entities/public-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/entities/public-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/entities/public-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/entities/public-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({name: 'public_files'})\nclass PublicFile {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column()\n    public url: string;\n\n    @Column()\n    public key: string;\n}\n\nexport default PublicFile;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MinLength} from \"class-validator\";\n\nexport class RegisterDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    name: string;\n\n    @IsString()\n    @IsOptional()\n    fullName: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(6)\n    password: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @Matches(/^\\+[1-9]\\d{1,14}$/)\n    phoneNumber: string;\n}\n\nexport default RegisterDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithRawBody.html":{"url":"interfaces/RequestWithRawBody.html","title":"interface - RequestWithRawBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithRawBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/interfaces/request-with-raw-body.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            rawBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rawBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawBody:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Request} from 'express';\n\ninterface RequestWithRawBody extends Request {\n    rawBody: Buffer;\n}\n\nexport default RequestWithRawBody;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from '../../users/entities/user.entity';\n\ninterface RequestWithUser extends Request {\n    user: User;\n}\n\nexport default RequestWithUser;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDefaultCreditCardDto.html":{"url":"classes/SetDefaultCreditCardDto.html","title":"class - SetDefaultCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDefaultCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/set-default-credit-card.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/set-default-credit-card.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class SetDefaultCreditCardDto {\n    @IsString()\n    @IsNotEmpty()\n    paymentMethodId: string;\n}\n\nexport default SetDefaultCreditCardDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SmsController.html":{"url":"controllers/SmsController.html","title":"controller - SmsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SmsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkVerificationCode\n                            \n                            \n                                    Async\n                                initiatePhoneNumberVerification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVerificationCode(request: RequestWithUser, verificationData: CheckVerificationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('check-verification-code')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationData\n                                    \n                                                CheckVerificationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    initiatePhoneNumberVerification(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('initiate-verification')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {BadRequestException, Body, Controller, Post, Req, UseGuards} from '@nestjs/common';\nimport {SmsService} from \"./sms.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport CheckVerificationCodeDto from \"./dto/check-verification-code.dto\";\n\n@Controller('sms')\nexport class SmsController {\n    constructor(private readonly smsService: SmsService) {\n    }\n\n    @Post('initiate-verification')\n    @UseGuards(JwtAuthenticationGuard)\n    async initiatePhoneNumberVerification(@Req() request: RequestWithUser) {\n        if (request.user.isPhoneNumberConfirmed) {\n            throw new BadRequestException('Phone number already confirmed');\n        }\n        await this.smsService.initiatePhoneNumberVerification(request.user.phoneNumber);\n    }\n\n    @Post('check-verification-code')\n    @UseGuards(JwtAuthenticationGuard)\n    async checkVerificationCode(@Req() request: RequestWithUser, @Body() verificationData: CheckVerificationCodeDto) {\n        if (request.user.isPhoneNumberConfirmed) {\n            throw new BadRequestException('Phone number already confirmed');\n        }\n        await this.smsService.confirmPhoneNumber(request.user.id, request.user.phoneNumber, verificationData.code);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_SmsModule_imports\n\n\n\ncluster_SmsModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SmsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {SmsController} from './sms.controller';\nimport {SmsService} from './sms.service';\nimport {UsersModule} from \"../users/users.module\";\n\n@Module({\n    imports: [UsersModule],\n    controllers: [SmsController],\n    providers: [SmsService],\n    exports: [SmsService]\n})\nexport class SmsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmsService.html":{"url":"injectables/SmsService.html","title":"injectable - SmsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmPhoneNumber\n                            \n                            \n                                initiatePhoneNumberVerification\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/sms.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \ninitiatePhoneNumberVerification(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(receiverPhoneNumber: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiverPhoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/sms.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {BadRequestException, Injectable} from '@nestjs/common';\nimport {ConfigService} from \"@nestjs/config\";\nimport {UsersService} from \"../users/users.service\";\nimport {Twilio} from \"twilio\";\n\n@Injectable()\nexport class SmsService {\n    private twilioClient: Twilio;\n\n    constructor(private readonly configService: ConfigService, private readonly usersService: UsersService) {\n        const accountSid = configService.get('TWILIO_ACCOUNT_SID');\n        const authToken = configService.get('TWILIO_AUTH_TOKEN');\n\n        this.twilioClient = new Twilio(accountSid, authToken);\n    }\n\n    initiatePhoneNumberVerification(phoneNumber: string) {\n        const serviceSid = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n        return this.twilioClient.verify.services(serviceSid)\n            .verifications\n            .create({to: phoneNumber, channel: 'sms'})\n    }\n\n    async confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string) {\n        const serviceSid = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n        const result = await this.twilioClient.verify.services(serviceSid)\n            .verificationChecks\n            .create({to: phoneNumber, code: verificationCode})\n\n        if (!result.valid || result.status !== 'approved') {\n            throw new BadRequestException('Wrong code provided');\n        }\n\n        await this.usersService.markPhoneNumberAsConfirmed(userId)\n    }\n\n    async sendMessage(receiverPhoneNumber: string, message: string) {\n        const senderPhoneNumber = this.configService.get('TWILIO_SENDER_PHONE_NUMBER');\n\n        return this.twilioClient.messages\n            .create({body: message, from: senderPhoneNumber, to: receiverPhoneNumber})\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StripeEvent.html":{"url":"entities/StripeEvent.html","title":"entity - StripeEvent","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StripeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/entities/stripe-event.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripe-webhook/entities/stripe-event.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {Entity, PrimaryColumn} from 'typeorm';\n\n@Entity({name: 'stripe_events'})\nclass StripeEvent {\n    @PrimaryColumn()\n    public id: string;\n}\n\nexport default StripeEvent;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeService } from './stripe.service';\nimport {ConfigModule} from \"@nestjs/config\";\n\n@Module({\n  imports: [ConfigModule],\n  providers: [StripeService],\n  exports: [StripeService]\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                attachCreditCard\n                            \n                            \n                                    Public\n                                    Async\n                                charge\n                            \n                            \n                                    Public\n                                    Async\n                                constructEventFromPayload\n                            \n                            \n                                    Public\n                                    Async\n                                createCustomer\n                            \n                            \n                                    Public\n                                    Async\n                                createSubscription\n                            \n                            \n                                    Public\n                                    Async\n                                listCreditCards\n                            \n                            \n                                    Public\n                                    Async\n                                listSubscriptions\n                            \n                            \n                                    Public\n                                    Async\n                                setDefaultCreditCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        attachCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                    \n                    charge(amount: number, paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        constructEventFromPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    constructEventFromPayload(signature: string, payload: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSubscription(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    listCreditCards(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listSubscriptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    listSubscriptions(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setDefaultCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {BadRequestException, Injectable, InternalServerErrorException} from '@nestjs/common';\nimport Stripe from 'stripe';\nimport {ConfigService} from \"@nestjs/config\";\nimport StripeError from \"../utils/stripe-error.enum\";\n\n@Injectable()\nexport class StripeService {\n    private stripe: Stripe;\n\n    constructor(private configService: ConfigService) {\n        this.stripe = new Stripe(configService.get('STRIPE_SECRET_KEY'), {\n            apiVersion: '2020-08-27',\n        });\n    }\n\n    public async constructEventFromPayload(signature: string, payload: Buffer) {\n        const webhookSecret = this.configService.get('STRIPE_WEBHOOK_SECRET');\n\n        return this.stripe.webhooks.constructEvent(\n            payload,\n            signature,\n            webhookSecret\n        );\n    }\n\n    public async createCustomer(name: string, email: string) {\n        return this.stripe.customers.create({\n            name,\n            email\n        });\n    }\n\n    public async charge(amount: number, paymentMethodId: string, customerId: string) {\n        return this.stripe.paymentIntents.create({\n            amount,\n            customer: customerId,\n            payment_method: paymentMethodId,\n            currency: this.configService.get('STRIPE_CURRENCY'),\n            off_session: true,\n            confirm: true\n        });\n    }\n\n    public async attachCreditCard(paymentMethodId: string, customerId: string) {\n        return this.stripe.setupIntents.create({\n            customer: customerId,\n            payment_method: paymentMethodId,\n        })\n    }\n\n    public async listCreditCards(customerId: string) {\n        return this.stripe.paymentMethods.list({\n            customer: customerId,\n            type: 'card',\n        });\n    }\n\n    public async setDefaultCreditCard(paymentMethodId: string, customerId: string) {\n        try {\n            return await this.stripe.customers.update(customerId, {\n                invoice_settings: {\n                    default_payment_method: paymentMethodId\n                }\n            })\n        } catch (error) {\n            if (error?.type === StripeError.InvalidRequest) {\n                throw new BadRequestException('Wrong credit card chosen');\n            }\n            throw new InternalServerErrorException();\n        }\n    }\n\n    public async createSubscription(priceId: string, customerId: string,) {\n        try {\n            return await this.stripe.subscriptions.create({\n                customer: customerId,\n                items: [\n                    {\n                        price: priceId\n                    }\n                ]\n            })\n        } catch (error) {\n            if (error?.code === StripeError.ResourceMissing) {\n                throw new BadRequestException('Credit card not set up');\n            }\n            throw new InternalServerErrorException();\n        }\n    }\n\n    public async listSubscriptions(priceId: string, customerId: string,) {\n        return this.stripe.subscriptions.list({\n            customer: customerId,\n            price: priceId,\n            expand: ['data.latest_invoice', 'data.latest_invoice.payment_intent']\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe-webhook\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleIncomingEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleIncomingEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleIncomingEvents(signature: string, request: RequestWithRawBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithRawBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Post, Req, Headers, BadRequestException} from '@nestjs/common';\nimport {StripeService} from \"../stripe/stripe.service\";\nimport RequestWithRawBody from \"./interfaces/request-with-raw-body.interface\";\nimport {UsersService} from \"../users/users.service\";\nimport StripeWebhookService from './stripe-webhook.service';\n\n@Controller('stripe-webhook')\nexport class StripeWebhookController {\n    constructor(\n        private readonly stripeService: StripeService,\n        private readonly usersService: UsersService,\n        private readonly stripeWebhookService: StripeWebhookService\n    ) {\n    }\n\n    @Post()\n    async handleIncomingEvents(\n        @Headers('stripe-signature') signature: string,\n        @Req() request: RequestWithRawBody\n    ) {\n        if (!signature) {\n            throw new BadRequestException('Missing stripe-signature header');\n        }\n\n        const event = await this.stripeService.constructEventFromPayload(signature, request.rawBody);\n\n        if (event.type === 'customer.subscription.updated' || event.type === 'customer.subscription.created') {\n            return this.stripeWebhookService.processSubscriptionUpdate(event);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebhookModule.html":{"url":"modules/StripeWebhookModule.html","title":"module - StripeWebhookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebhookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_imports\n\n\n\ncluster_StripeWebhookModule_providers\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nStripeWebhookModule -->\n\nUsersModule->StripeWebhookModule\n\n\n\n\n\nStripeWebhookService\n\nStripeWebhookService\n\nStripeWebhookModule -->\n\nStripeWebhookService->StripeWebhookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeWebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeWebhookController } from './stripe-webhook.controller';\nimport {StripeModule} from \"../stripe/stripe.module\";\nimport {UsersModule} from \"../users/users.module\";\nimport StripeWebhookService from './stripe-webhook.service';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport StripeEvent from \"./entities/stripe-event.entity\";\n\n@Module({\n  imports: [StripeModule, UsersModule, TypeOrmModule.forFeature([StripeEvent])],\n  controllers: [StripeWebhookController],\n  providers: [StripeWebhookService]\n})\nexport class StripeWebhookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeWebhookService.html":{"url":"injectables/StripeWebhookService.html","title":"injectable - StripeWebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeWebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                    Async\n                                processSubscriptionUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: Repository, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe-webhook/stripe-webhook.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createEvent\n                        \n                    \n                \n            \n            \n                \ncreateEvent(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processSubscriptionUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    processSubscriptionUpdate(event: Stripe.Event)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            Stripe.Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {BadRequestException, HttpException, HttpStatus, Injectable} from '@nestjs/common';\nimport {InjectRepository} from '@nestjs/typeorm';\nimport StripeEvent from './entities/stripe-event.entity';\nimport {Repository} from 'typeorm';\nimport Stripe from 'stripe';\nimport {UsersService} from '../users/users.service';\n\n@Injectable()\nexport default class StripeWebhookService {\n    constructor(\n        @InjectRepository(StripeEvent)\n        private eventsRepository: Repository,\n        private readonly usersService: UsersService,\n    ) {\n    }\n\n    createEvent(id: string) {\n        return this.eventsRepository.insert({id});\n    }\n\n    async processSubscriptionUpdate(event: Stripe.Event) {\n        try {\n            await this.createEvent(event.id);\n        } catch (error) {\n            if ([1062, 1586].includes(error?.code) || error?.code == 'ER_DUP_ENTRY') {\n                throw new BadRequestException('This event was already processed');\n            }\n        }\n\n        const data = event.data.object as Stripe.Subscription;\n\n        const customerId: string = data.customer as string;\n        const subscriptionStatus = data.status;\n\n        await this.usersService.updateMonthlySubscriptionStatus(customerId, subscriptionStatus);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriberGrpc.html":{"url":"interfaces/SubscriberGrpc.html","title":"interface - SubscriberGrpc","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscriberGrpc\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers-grpc/interfaces/subscriber-grpc.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SubscriberGrpc {\n    id: number;\n    email: string;\n    name: string;\n}\n\nexport default SubscriberGrpc;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersController.html":{"url":"controllers/SubscribersController.html","title":"controller - SubscribersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                getSubscribers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(subscriber: CreateSubscriberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSubscribers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSubscribers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ClassSerializerInterceptor,\n    Controller,\n    Get,\n    Inject,\n    Post,\n    UseGuards,\n    UseInterceptors\n} from '@nestjs/common';\nimport {ClientProxy} from \"@nestjs/microservices\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport CreateSubscriberDto from \"./dto/create-subscriber.dto\";\n\n@Controller('subscribers')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class SubscribersController {\n    constructor(@Inject('SUBSCRIBERS_SERVICE') private subscribersService: ClientProxy) {\n    }\n\n    @Get()\n    @UseGuards(JwtAuthenticationGuard)\n    async getSubscribers() {\n        return this.subscribersService.send({\n            cmd: 'get-all-subscribers'\n        }, '')\n    }\n\n    @Post()\n    @UseGuards(JwtAuthenticationGuard)\n    async createPost(@Body() subscriber: CreateSubscriberDto) {\n        return this.subscribersService.send({\n            cmd: 'add-subscriber'\n        }, subscriber)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersGrpcController.html":{"url":"controllers/SubscribersGrpcController.html","title":"controller - SubscribersGrpcController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersGrpcController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers-grpc/subscribers-grpc.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers-grpc\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                getSubscribers\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(subscriber: CreateSubscriberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscribers-grpc/subscribers-grpc.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSubscribers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSubscribers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/subscribers-grpc/subscribers-grpc.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers-grpc/subscribers-grpc.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ClassSerializerInterceptor,\n    Controller,\n    Get,\n    Inject,\n    OnModuleInit,\n    Post,\n    UseGuards,\n    UseInterceptors\n} from '@nestjs/common';\nimport SubscribersGrpcService from \"./interfaces/subscribers-grpc.service.interface\";\nimport {ClientGrpc} from \"@nestjs/microservices\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport CreateSubscriberDto from \"../subscribers/dto/create-subscriber.dto\";\n\n@Controller('subscribers-grpc')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class SubscribersGrpcController implements OnModuleInit {\n    private subscribersService: SubscribersGrpcService;\n\n    constructor(@Inject('SUBSCRIBERS_PACKAGE') private client: ClientGrpc) {}\n\n    onModuleInit() {\n        // get service name in microservice\n        this.subscribersService = this.client.getService('SubscribersService');\n    }\n\n    @Get()\n    async getSubscribers() {\n        // invoke remotely method that live in other service, based on .proto file\n        return this.subscribersService.getAllSubscribers({});\n    }\n\n    @Post()\n    @UseGuards(JwtAuthenticationGuard)\n    async createPost(@Body() subscriber: CreateSubscriberDto) {\n        return this.subscribersService.addSubscriber(subscriber);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscribersGrpcModule.html":{"url":"modules/SubscribersGrpcModule.html","title":"module - SubscribersGrpcModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscribersGrpcModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers-grpc/subscribers-grpc.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            SubscribersGrpcController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SubscribersGrpcController } from './subscribers-grpc.controller';\nimport {join} from \"path\";\nimport {ConfigService} from \"@nestjs/config\";\nimport {ClientProxyFactory, Transport} from \"@nestjs/microservices\";\n\n@Module({\n  controllers: [SubscribersGrpcController],\n  providers: [\n    {\n      provide: 'SUBSCRIBERS_PACKAGE',\n      useFactory: (configService: ConfigService) => {\n        return ClientProxyFactory.create({\n          transport: Transport.GRPC,\n          options: {\n            package: 'subscribers',\n            protoPath: join(process.cwd(), 'src/subscribers-grpc/proto/subscribers.proto'),\n            url: configService.get('GRPC_CONNECTION_URL')\n          },\n        })\n      },\n      inject: [ConfigService],\n    },\n  ],\n})\nexport class SubscribersGrpcModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscribersGrpcService.html":{"url":"interfaces/SubscribersGrpcService.html","title":"interface - SubscribersGrpcService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscribersGrpcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers-grpc/interfaces/subscribers-grpc.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addSubscriber\n                                    \n                                \n                                \n                                    \n                                        getAllSubscribers\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSubscriber\n                        \n                    \n                \n            \n            \n                \naddSubscriber(subscriber: CreateSubscriberDto)\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers-grpc/interfaces/subscribers-grpc.service.interface.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSubscribers\n                        \n                    \n                \n            \n            \n                \ngetAllSubscribers(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers-grpc/interfaces/subscribers-grpc.service.interface.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import CreateSubscriberDto from '../../subscribers/dto/create-subscriber.dto';\nimport SubscriberGrpc from './subscriber-grpc.interface';\n\ninterface SubscribersGrpcService {\n    addSubscriber(subscriber: CreateSubscriberDto): Promise\n    getAllSubscribers(params: {}): Promise\n}\n\nexport default SubscribersGrpcService;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscribersModule.html":{"url":"modules/SubscribersModule.html","title":"module - SubscribersModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscribersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers/subscribers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            SubscribersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {SubscribersController} from './subscribers.controller';\nimport {ConfigModule, ConfigService} from \"@nestjs/config\";\nimport {Transport, ClientProxyFactory} from '@nestjs/microservices';\n\n@Module({\n    imports: [ConfigModule],\n    controllers: [SubscribersController],\n    providers: [\n        {\n            provide: 'SUBSCRIBERS_SERVICE',\n            useFactory: (configService: ConfigService) => {\n                const user = configService.get('RABBITMQ_USER');\n                const password = configService.get('RABBITMQ_PASSWORD');\n                const host = configService.get('RABBITMQ_HOST');\n                const queueName = configService.get('RABBITMQ_QUEUE_NAME');\n\n                return ClientProxyFactory.create({\n                    transport: Transport.RMQ,\n                    options: {\n                        urls: [`amqps://${user}:${password}@${host}`],\n                        queue: queueName,\n                        queueOptions: {\n                            durable: true,\n                        },\n                    },\n                })\n\n                /* TCP transport\n                return ClientProxyFactory.create({\n                    transport: Transport.TCP,\n                    options: {\n                        host: configService.get('SUBSCRIBERS_SERVICE_HOST'),\n                        port: configService.get('SUBSCRIBERS_SERVICE_PORT'),\n                    },\n                })\n                */\n            },\n            inject: [ConfigService],\n        }\n    ]\n})\nexport class SubscribersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscriptionModule.html":{"url":"modules/SubscriptionModule.html","title":"module - SubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubscriptionModule\n\n\n\ncluster_SubscriptionModule_providers\n\n\n\ncluster_SubscriptionModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nSubscriptionModule -->\n\nStripeModule->SubscriptionModule\n\n\n\n\n\nSubscriptionsService\n\nSubscriptionsService\n\nSubscriptionModule -->\n\nSubscriptionsService->SubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscriptions/subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubscriptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubscriptionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SubscriptionsController } from './subscriptions.controller';\nimport { SubscriptionsService } from './subscriptions.service';\nimport {StripeModule} from \"../stripe/stripe.module\";\nimport {ConfigModule} from \"@nestjs/config\";\n\n@Module({\n  imports: [StripeModule, ConfigModule],\n  controllers: [SubscriptionsController],\n  providers: [SubscriptionsService]\n})\nexport class SubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscriptionsController.html":{"url":"controllers/SubscriptionsController.html","title":"controller - SubscriptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscriptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscriptions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get, Post, Req, UseGuards} from '@nestjs/common';\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport {SubscriptionsService} from \"./subscriptions.service\";\n\n@Controller('subscriptions')\nexport class SubscriptionsController {\n    constructor(private readonly subscriptionsService: SubscriptionsService) {}\n\n    @Post('monthly')\n    @UseGuards(JwtAuthenticationGuard)\n    async createMonthlySubscription(@Req() request: RequestWithUser) {\n        return this.subscriptionsService.createMonthlySubscription(request.user.stripeCustomerId);\n    }\n\n    @Get('monthly')\n    @UseGuards(JwtAuthenticationGuard)\n    async getMonthlySubscription(@Req() request: RequestWithUser) {\n        return this.subscriptionsService.getMonthlySubscription(request.user.stripeCustomerId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscriptionsService.html":{"url":"injectables/SubscriptionsService.html","title":"injectable - SubscriptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubscriptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Public\n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripeService: StripeService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/subscriptions/subscriptions.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {BadRequestException, Injectable, NotFoundException} from '@nestjs/common';\nimport {StripeService} from \"../stripe/stripe.service\";\nimport {ConfigService} from \"@nestjs/config\";\n\n@Injectable()\nexport class SubscriptionsService {\n    constructor(\n        private readonly stripeService: StripeService,\n        private readonly configService: ConfigService\n    ) {\n    }\n\n    public async createMonthlySubscription(customerId: string) {\n        const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n\n        const subscriptions = await this.stripeService.listSubscriptions(priceId, customerId);\n        if (subscriptions.data.length) {\n            throw new BadRequestException('Customer already subscribed');\n        }\n        return this.stripeService.createSubscription(priceId, customerId);\n    }\n\n    public async getMonthlySubscription(customerId: string) {\n        const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n        const subscriptions = await this.stripeService.listSubscriptions(priceId, customerId);\n\n        if (!subscriptions.data.length) {\n            return new NotFoundException('Customer not subscribed');\n        }\n        return subscriptions.data[0];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timestamp.html":{"url":"classes/Timestamp.html","title":"class - Timestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/scalars/timestamp.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.'\n                    \n                \n                    \n                        \n                                Defined in src/utils/scalars/timestamp.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(valueNode: ValueNode)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    valueNode\n                                    \n                                            ValueNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: string | number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Scalar, CustomScalar} from '@nestjs/graphql';\nimport {Kind, ValueNode} from 'graphql';\n\n@Scalar('Timestamp', () => Date)\nexport class Timestamp implements CustomScalar {\n    description = '`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.';\n\n    serialize(value: Date) {\n        return value instanceof Date ? value.getTime() : null;\n    }\n\n    parseValue(value: string | number | null) {\n        try {\n            const number = Number(value);\n            return value !== null ? new Date(number) : null;\n        } catch {\n            return null;\n        }\n    }\n\n    parseLiteral(valueNode: ValueNode) {\n        if (valueNode.kind === Kind.INT || valueNode.kind === Kind.STRING) {\n            try {\n                const number = Number(valueNode.value);\n                return new Date(number);\n            } catch {\n                return null;\n            }\n        }\n        return null;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n    userId: number;\n    isSecondFactorAuthenticated?: boolean;\n}\n\nexport default TokenPayload;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/google-authentication/dto/token-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/google-authentication/dto/token-verification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty} from 'class-validator';\n\nexport class TokenVerificationDto {\n    @IsString()\n    @IsNotEmpty()\n    token: string;\n}\n\nexport default TokenVerificationDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n    @IsString()\n    @IsNotEmpty()\n    twoFactorAuthenticationCode: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    ClassSerializerInterceptor,\n    Controller,\n    Post,\n    UseInterceptors,\n    Res,\n    UseGuards,\n    Req,\n    Body,\n    UnauthorizedException, HttpCode,\n} from '@nestjs/common';\nimport {TwoFactorAuthenticationService} from './two-factor-authentication.service';\nimport {Response} from 'express';\nimport JwtAuthenticationGuard from '../guards/jwt-authentication.guard';\nimport RequestWithUser from '../interfaces/request-with-user.interface';\nimport {UsersService} from '../../users/users.service';\nimport {TwoFactorAuthenticationCodeDto} from './dto/two-factor-authentication-code.dto';\nimport {AuthenticationService} from '../authentication.service';\n\n@Controller('2fa')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TwoFactorAuthenticationController {\n    constructor(\n        private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n        private readonly usersService: UsersService,\n        private readonly authenticationService: AuthenticationService\n    ) {\n    }\n\n    @Post('generate')\n    @UseGuards(JwtAuthenticationGuard)\n    async register(@Res() response: Response, @Req() request: RequestWithUser) {\n        const {otpAuthUrl} = await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(request.user);\n\n        return this.twoFactorAuthenticationService.pipeQrCodeStream(response, otpAuthUrl);\n    }\n\n    @Post('turn-on')\n    @HttpCode(200)\n    @UseGuards(JwtAuthenticationGuard)\n    async turnOnTwoFactorAuthentication(\n        @Req() request: RequestWithUser,\n        @Body() {twoFactorAuthenticationCode}: TwoFactorAuthenticationCodeDto\n    ) {\n        const isCodeValid = this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n            twoFactorAuthenticationCode, request.user\n        );\n        if (!isCodeValid) {\n            throw new UnauthorizedException('Wrong authentication code');\n        }\n        await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n    }\n\n    @Post('authenticate')\n    @HttpCode(200)\n    @UseGuards(JwtAuthenticationGuard)\n    async authenticate(\n        @Req() request: RequestWithUser,\n        @Body() {twoFactorAuthenticationCode}: TwoFactorAuthenticationCodeDto\n    ) {\n        const isCodeValid = this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n            twoFactorAuthenticationCode, request.user\n        );\n        if (!isCodeValid) {\n            throw new UnauthorizedException('Wrong authentication code');\n        }\n\n        const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(request.user.id, true);\n\n        request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n        return request.user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor/two-factor-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor/two-factor-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpAuthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor/two-factor-authentication.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpAuthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {authenticator} from 'otplib';\nimport User from '../../users/entities/user.entity';\nimport {UsersService} from '../../users/users.service';\nimport {ConfigService} from \"@nestjs/config\";\nimport {toFileStream} from \"qrcode\";\nimport {Response} from 'express';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly configService: ConfigService\n    ) {\n    }\n\n    public async generateTwoFactorAuthenticationSecret(user: User) {\n        const secret = authenticator.generateSecret();\n\n        const otpAuthUrl = authenticator.keyuri(user.email, this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'), secret);\n\n        await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n        return {\n            secret,\n            otpAuthUrl\n        }\n    }\n\n    public isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User) {\n        return authenticator.verify({\n            token: twoFactorAuthenticationCode,\n            secret: user.twoFactorAuthenticationSecret\n        })\n    }\n\n    public async pipeQrCodeStream(stream: Response, otpAuthUrl: string) {\n        return toFileStream(stream, otpAuthUrl);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/update-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/update-category.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString, IsNotEmpty, IsNumber, IsOptional} from 'class-validator';\n\nclass UpdateCategoryDto {\n    @IsNumber()\n    @IsOptional()\n    id: number;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsOptional()\n    name: string;\n}\n\nexport default UpdateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()@MaxLength(200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsNumber, IsOptional, IsString, MaxLength} from \"class-validator\";\n\nclass UpdatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  content: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  @MaxLength(200)\n  title: string;\n}\n\nexport default UpdatePostDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                files\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isPhoneNumberConfirmed\n                            \n                            \n                                    Public\n                                isRegisteredWithGoogle\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                    Optional\n                                monthlySubscriptionStatus\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                    Optional\n                                stripeCustomerId\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn({name: 'address_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PublicFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isPhoneNumberConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isRegisteredWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        monthlySubscriptionStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinColumn, OneToMany,\n    OneToOne,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn\n} from 'typeorm';\nimport {Exclude} from \"class-transformer\";\nimport Address from \"./address.entity\";\nimport Post from \"../../posts/entities/post.entity\";\nimport PublicFile from \"../../files/entities/public-file.entity\";\nimport PrivateFile from \"../../files/entities/private-file.entity\";\n\n@Entity({name: 'users'})\nclass User {\n    @PrimaryGeneratedColumn()\n    public id?: number;\n\n    @Column({unique: true})\n    public email: string;\n\n    @Column({default: false})\n    public isEmailConfirmed: boolean;\n\n    @Column()\n    public name: string;\n\n    @Column({nullable: true})\n    @Exclude()\n    public password?: string;\n\n    @Column({nullable: true})\n    @Exclude()\n    public currentHashedRefreshToken?: string;\n\n    @Column({name: \"phone_number\", nullable: true})\n    public phoneNumber?: string;\n\n    @Column({default: false})\n    public isPhoneNumberConfirmed: boolean;\n\n    @Column({default: false})\n    public isRegisteredWithGoogle: boolean;\n\n    @JoinColumn()\n    @OneToOne(() => PublicFile, {\n        eager: true,\n        nullable: true\n    })\n    public avatar?: PublicFile;\n\n    @OneToOne(() => Address, {\n        eager: true, // duplicate alias relation address_id need to be change another or using strategy\n        cascade: true\n    })\n    @JoinColumn({name: \"address_id\"})\n    public address: Address;\n\n    @OneToMany(() => Post, (post: Post) => post.author)\n    public posts?: Post[];\n\n    @OneToMany(() => PrivateFile, (file: PrivateFile) => file.owner)\n    public files?: PrivateFile[];\n\n    @Column({nullable: true})\n    public twoFactorAuthenticationSecret?: string;\n\n    @Column({default: false})\n    public isTwoFactorAuthenticationEnabled: boolean;\n\n    @Column({nullable: true})\n    public stripeCustomerId?: string;\n\n    @Column({nullable: true})\n    public monthlySubscriptionStatus?: string;\n\n    @CreateDateColumn({name: 'created_at'})\n    created_at: Date;\n\n    @UpdateDateColumn({name: 'updated_at'})\n    updated_at: Date;\n}\n\nexport default User;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('avatar')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestWithUser, undefined: FindOneParams, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Delete, Get, Param, Post, Req, Res, UploadedFile, UseGuards, UseInterceptors} from '@nestjs/common';\nimport {UsersService} from \"./users.service\";\nimport JwtAuthenticationGuard from \"../authentication/guards/jwt-authentication.guard\";\nimport RequestWithUser from \"../authentication/interfaces/request-with-user.interface\";\nimport {FileInterceptor} from \"@nestjs/platform-express\";\nimport {Express, Response} from 'express';\nimport FindOneParams from \"../utils/types/find-one-params\";\n\n@Controller('users')\nexport class UsersController {\n    constructor(private readonly usersService: UsersService) {\n    }\n\n    @Post('avatar')\n    @UseGuards(JwtAuthenticationGuard)\n    @UseInterceptors(FileInterceptor('file'))\n    async addAvatar(@Req() request: RequestWithUser, @UploadedFile() file: Express.Multer.File) {\n        return this.usersService.addAvatar(request.user.id, file.buffer, file.originalname);\n    }\n\n    @Delete('avatar')\n    @UseGuards(JwtAuthenticationGuard)\n    async deleteAvatar(@Req() request: RequestWithUser) {\n        return this.usersService.deleteAvatarWithQueryRunner(request.user.id);\n    }\n\n    @Get('files')\n    @UseGuards(JwtAuthenticationGuard)\n    async getAllPrivateFiles(@Req() request: RequestWithUser) {\n        return this.usersService.getAllPrivateFiles(request.user.id);\n    }\n\n    @Post('files')\n    @UseGuards(JwtAuthenticationGuard)\n    @UseInterceptors(FileInterceptor('file'))\n    async addPrivateFile(@Req() request: RequestWithUser, @UploadedFile() file: Express.Multer.File) {\n        return this.usersService.addPrivateFile(request.user.id, file.buffer, file.originalname);\n    }\n\n    @Get('files/:id')\n    @UseGuards(JwtAuthenticationGuard)\n    async getPrivateFile(@Req() request: RequestWithUser, @Param() { id }: FindOneParams, @Res() res: Response) {\n        const file = await this.usersService.getPrivateFile(request.user.id, Number(id));\n        file.stream.pipe(res);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nUsersModule -->\n\nStripeModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                        \n                            StripeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {UsersService} from './users.service';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport User from \"./entities/user.entity\";\nimport Address from \"./entities/address.entity\";\nimport {FilesModule} from \"../files/files.module\";\nimport { UsersController } from './users.controller';\nimport {StripeModule} from \"../stripe/stripe.module\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([User, Address]),\n        FilesModule,\n        StripeModule\n    ],\n    providers: [UsersService],\n    exports: [UsersService],\n    controllers: [UsersController]\n})\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createWithGoogle\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deleteAvatarWithQueryRunner\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByIds\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                markPhoneNumberAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                updateMonthlySubscriptionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, filesService: FilesService, connection: Connection, stripeService: StripeService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWithGoogle(email: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatarWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatarWithQueryRunner(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(userId: number, fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:179\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markPhoneNumberAsConfirmed\n                        \n                    \n                \n            \n            \n                \nmarkPhoneNumberAsConfirmed(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMonthlySubscriptionStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMonthlySubscriptionStatus(stripeCustomerId: string, monthlySubscriptionStatus: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stripeCustomerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    monthlySubscriptionStatus\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpException,\n    HttpStatus,\n    Injectable,\n    InternalServerErrorException,\n    NotFoundException,\n    UnauthorizedException\n} from '@nestjs/common';\nimport User from \"./entities/user.entity\";\nimport {Connection, In, Repository} from \"typeorm\";\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport CreateUserDto from \"./dto/create-user.dto\";\nimport {FilesService} from \"../files/files.service\";\nimport * as bcrypt from 'bcrypt';\nimport {StripeService} from \"../stripe/stripe.service\";\n\n@Injectable()\nexport class UsersService {\n    constructor(\n        @InjectRepository(User)\n        private usersRepository: Repository,\n        private readonly filesService: FilesService,\n        private connection: Connection,\n        private stripeService: StripeService\n    ) {\n    }\n\n    async getById(id: number) {\n        const user = await this.usersRepository.findOne({id});\n        if (user) {\n            return user;\n        }\n        throw new HttpException('User with this id does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    async getByIds(ids: number[]) {\n        return this.usersRepository.find({\n            where: {id: In(ids)},\n        });\n    }\n\n    async getByEmail(email: string) {\n        const user = await this.usersRepository.findOne({email});\n        if (user) {\n            return user;\n        }\n        throw new HttpException('User with this email does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    async create(userData: CreateUserDto) {\n        const stripeCustomer = await this.stripeService.createCustomer(userData.name, userData.email);\n        const newUser = await this.usersRepository.create({\n            ...userData,\n            stripeCustomerId: stripeCustomer.id\n        });\n        await this.usersRepository.save(newUser);\n        return newUser;\n    }\n\n    async createWithGoogle(email: string, name: string) {\n        const stripeCustomer = await this.stripeService.createCustomer(name, email);\n\n        const newUser = await this.usersRepository.create({\n            email,\n            name,\n            isRegisteredWithGoogle: true,\n            stripeCustomerId: stripeCustomer.id\n        });\n        await this.usersRepository.save(newUser);\n        return newUser;\n    }\n\n    async setCurrentRefreshToken(refreshToken: string, userId: number) {\n        const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n        await this.usersRepository.update(userId, {\n            currentHashedRefreshToken\n        });\n    }\n\n    async removeRefreshToken(userId: number) {\n        return this.usersRepository.update(userId, {\n            currentHashedRefreshToken: null\n        });\n    }\n\n    async markEmailAsConfirmed(email: string) {\n        return this.usersRepository.update({email}, {\n            isEmailConfirmed: true\n        });\n    }\n\n    markPhoneNumberAsConfirmed(userId: number) {\n        return this.usersRepository.update({ id: userId }, {\n            isPhoneNumberConfirmed: true\n        });\n    }\n\n    async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n        const user = await this.getById(userId);\n\n        const isRefreshTokenMatching = await bcrypt.compare(\n            refreshToken,\n            user.currentHashedRefreshToken\n        );\n\n        if (isRefreshTokenMatching) {\n            return user;\n        }\n    }\n\n    async setTwoFactorAuthenticationSecret(secret: string, userId: number) {\n        return this.usersRepository.update(userId, {\n            twoFactorAuthenticationSecret: secret\n        });\n    }\n\n    async turnOnTwoFactorAuthentication(userId: number) {\n        return this.usersRepository.update(userId, {\n            isTwoFactorAuthenticationEnabled: true\n        });\n    }\n\n    async addAvatar(userId: number, imageBuffer: Buffer, filename: string) {\n        const user = await this.getById(userId);\n        if (user.avatar) {\n            await this.usersRepository.update(userId, {\n                ...user,\n                avatar: null\n            });\n            await this.filesService.deletePublicFile(user.avatar.id);\n        }\n        const avatar = await this.filesService.uploadPublicFile(imageBuffer, filename);\n        await this.usersRepository.update(userId, {\n            ...user,\n            avatar\n        });\n        return avatar;\n    }\n\n    async deleteAvatar(userId: number) {\n        const user = await this.getById(userId);\n        const fileId = user.avatar?.id;\n        if (fileId) {\n            await this.usersRepository.update(userId, {\n                ...user,\n                avatar: null\n            });\n            await this.filesService.deletePublicFile(fileId)\n        }\n    }\n\n    async deleteAvatarWithQueryRunner(userId: number) {\n        const queryRunner = this.connection.createQueryRunner();\n        const user = await this.getById(userId);\n        const fileId = user.avatar?.id;\n        if (fileId) {\n            await queryRunner.connect();\n            await queryRunner.startTransaction();\n            try {\n                await queryRunner.manager.update(User, userId, {\n                    ...user,\n                    avatar: null\n                });\n                await this.filesService.deletePublicFileWithQueryRunner(fileId, queryRunner);\n                await queryRunner.commitTransaction();\n            } catch (error) {\n                await queryRunner.rollbackTransaction();\n                throw new InternalServerErrorException();\n            } finally {\n                await queryRunner.release();\n            }\n        }\n    }\n\n    async addPrivateFile(userId: number, imageBuffer: Buffer, filename: string) {\n        return this.filesService.uploadPrivateFile(imageBuffer, userId, filename);\n    }\n\n    async getPrivateFile(userId: number, fileId: number) {\n        const file = await this.filesService.getPrivateFile(fileId);\n        if (file.info.owner.id === userId) {\n            return file;\n        }\n        throw new UnauthorizedException();\n    }\n\n    async getAllPrivateFiles(userId: number) {\n        const userWithFiles = await this.usersRepository.findOne({id: userId}, {relations: ['files']});\n        if (userWithFiles) {\n            return Promise.all(\n                userWithFiles.files.map(async (file) => {\n                    const url = await this.filesService.generatePresignedUrl(file.key);\n                    return {\n                        ...file,\n                        url\n                    }\n                })\n            )\n        }\n        throw new NotFoundException('User with this id does not exist');\n    }\n\n    async updateMonthlySubscriptionStatus(stripeCustomerId: string, monthlySubscriptionStatus: string) {\n        return this.usersRepository.update(\n            {stripeCustomerId},\n            {monthlySubscriptionStatus}\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/interfaces/verification-token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface VerificationTokenPayload {\n    email: string;\n}\n\nexport default VerificationTokenPayload;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/guards/graphql-jwt-auth.guard.ts\n            \n            injectable\n            GraphqlJwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/tests/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/dto/two-factor-authentication-code.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/two-factor/two-factor-authentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/exceptions/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/charge.controller.ts\n            \n            controller\n            ChargeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/dto/create-charge.dto.ts\n            \n            class\n            CreateChargeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/entities/message.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/commands/implementations/create-comment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/get-comments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comments/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/queries/handlers/get-comments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/queries/implementations/get-comments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/credit-cards/credit-cards.controller.ts\n            \n            controller\n            CreditCardsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/add-credit-card.dto.ts\n            \n            class\n            AddCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/set-default-credit-card.dto.ts\n            \n            class\n            SetDefaultCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/database.logger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email-confirmation/dto/confirm-emai.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-confirmation/email-confirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-confirmation/email-confirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email-confirmation/guards/email-confirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-confirmation/interfaces/verification-token-payload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-scheduling/dto/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/email-scheduling/email-scheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-scheduling/email-scheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/files/entities/private-file.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/entities/public-file.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/google-authentication/dto/token-verification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/google-authentication/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/google-authentication/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/health/elasticsearch-health-indicator.ts\n            \n            injectable\n            ElasticsearchHealthIndicator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/entities/log.entity.ts\n            \n            entity\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/image.processor.ts\n            \n            function\n            imageProcessor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/constants/post-cache-key.constant.ts\n            \n            variable\n            GET_POSTS_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/exceptions/post-not-found.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/inputs/post.input.ts\n            \n            class\n            CreatePostInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/loaders/post.loader.ts\n            \n            injectable\n            PostLoader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/models/author.model.ts\n            \n            class\n            Author\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/models/post.model.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            variable\n            POST_ADDED_EVENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/product-categories/dto/create-product-category.dto.ts\n            \n            class\n            CreateProductCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/product-categories/entities/product-category.entity.ts\n            \n            entity\n            ProductCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product-categories/product-categories.controller.ts\n            \n            controller\n            ProductCategoriesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/product-categories/product-categories.service.ts\n            \n            injectable\n            ProductCategoriesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/types/book-properties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/types/car-properties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pub-sub/pub-sub.module.ts\n            \n            variable\n            PUB_SUB\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sms/dto/check-verification-code.dto.ts\n            \n            class\n            CheckVerificationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sms/sms.controller.ts\n            \n            controller\n            SmsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/sms.service.ts\n            \n            injectable\n            SmsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stripe-webhook/entities/stripe-event.entity.ts\n            \n            entity\n            StripeEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/interfaces/request-with-raw-body.interface.ts\n            \n            interface\n            RequestWithRawBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.service.ts\n            \n            injectable\n            StripeWebhookService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/subscribers-grpc/interfaces/subscriber-grpc.interface.ts\n            \n            interface\n            SubscriberGrpc\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers-grpc/interfaces/subscribers-grpc.service.interface.ts\n            \n            interface\n            SubscribersGrpcService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscribers-grpc/subscribers-grpc.controller.ts\n            \n            controller\n            SubscribersGrpcController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/dto/create-subscriber.dto.ts\n            \n            class\n            CreateSubscriberDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.controller.ts\n            \n            controller\n            SubscribersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.controller.ts\n            \n            controller\n            SubscriptionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.service.ts\n            \n            injectable\n            SubscriptionsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/models/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/utils/get-log-levels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/interceptors/exclude-null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/middlewares/http-logs-middleware.service.ts\n            \n            injectable\n            HttpLogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/middlewares/raw-body.middleware.ts\n            \n            function\n            rawBodyMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursively-strip-null-values.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/scalars/timestamp.scalar.ts\n            \n            class\n            Timestamp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/types/find-one-params.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/types/object-with-id.ts\n            \n            class\n            ObjectWithId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/types/pagination-params.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @elastic/elasticsearch : ^8.2.1\n        \n            @grpc/grpc-js : ^1.6.7\n        \n            @grpc/proto-loader : ^0.6.12\n        \n            @nestjs/apollo : ^10.0.13\n        \n            @nestjs/bull : ^0.5.5\n        \n            @nestjs/common : ^8.1.1\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.1.1\n        \n            @nestjs/cqrs : ^8.0.4\n        \n            @nestjs/elasticsearch : ^8.1.0\n        \n            @nestjs/graphql : ^10.0.13\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.4.5\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.1.1\n        \n            @nestjs/platform-socket.io : ^8.4.5\n        \n            @nestjs/schedule : ^2.0.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @nestjs/websockets : ^8.4.5\n        \n            @types/cookie-parser : ^1.4.3\n        \n            @types/passport-jwt : ^3.0.6\n        \n            adm-zip : ^0.5.9\n        \n            amqp-connection-manager : ^4.1.3\n        \n            amqplib : ^0.9.1\n        \n            apollo-server-express : ^3.8.1\n        \n            aws-sdk : ^2.1137.0\n        \n            bcrypt : ^5.0.1\n        \n            bull : ^4.8.3\n        \n            cache-manager : ^3.6.3\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            dataloader : ^2.1.0\n        \n            googleapis : ^100.0.0\n        \n            graphql : ^16.5.0\n        \n            graphql-parse-resolve-info : ^4.12.0\n        \n            graphql-redis-subscriptions : ^2.4.2\n        \n            imagemin : ^7.0.1\n        \n            imagemin-pngquant : ^9.0.2\n        \n            joi : ^17.6.0\n        \n            mysql2 : ^2.3.3\n        \n            nodemailer : ^6.7.5\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.5.2\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            qrcode : ^1.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.4.0\n        \n            stripe : ^9.6.0\n        \n            twilio : ^3.77.2\n        \n            typeorm : ^0.2.45\n        \n            typeorm-naming-strategies : ^4.1.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StripeError   (src/.../stripe-error.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/stripe-error.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StripeError\n                    \n                \n                        \n                            \n                                 InvalidRequest\n                            \n                        \n                        \n                            \n                                Value : StripeInvalidRequestError\n                            \n                        \n                        \n                            \n                                 ResourceMissing\n                            \n                        \n                        \n                            \n                                Value : resource_missing\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../get-log-levels.ts)\n                        \n                        \n                            imageProcessor   (src/.../image.processor.ts)\n                        \n                        \n                            rawBodyMiddleware   (src/.../raw-body.middleware.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursively-strip-null-values.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/get-log-levels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/optimize/image.processor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imageProcessor\n                        \n                    \n                \n            \n            \n                \nimageProcessor(job: Job, doneCallback: DoneCallback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    doneCallback\n                                    \n                                            DoneCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/middlewares/raw-body.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rawBodyMiddleware\n                        \n                    \n                \n            \n            \n                \nrawBodyMiddleware()\n                \n            \n\n\n\n\n        \n    \n    src/utils/recursively-strip-null-values.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChargeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CreditCardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductCategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PubSubModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebhookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersGrpcModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductCategoriesModule\n\n\n\ncluster_ProductCategoriesModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_providers\n\n\n\ncluster_SubscriptionModule\n\n\n\ncluster_SubscriptionModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthenticationModule -->\n\nSmsModule->AuthenticationModule\n\n\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscribersGrpcModule\n\nSubscribersGrpcModule\n\nAppModule -->\n\nSubscribersGrpcModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nAppModule -->\n\nSubscriptionModule->AppModule\n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\nStripeWebhookModule -->\n\nUsersModule->StripeWebhookModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\nSubscriptionModule -->\n\nStripeModule->SubscriptionModule\n\n\n\nUsersModule -->\n\nStripeModule->UsersModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductCategoriesService\n\nProductCategoriesService\n\nProductCategoriesModule -->\n\nProductCategoriesService->ProductCategoriesModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeWebhookService\n\nStripeWebhookService\n\nStripeWebhookModule -->\n\nStripeWebhookService->StripeWebhookModule\n\n\n\n\n\nSubscriptionsService\n\nSubscriptionsService\n\nSubscriptionModule -->\n\nSubscriptionsService->SubscriptionModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        27 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    21 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    34 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    37 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_POSTS_CACHE_KEY   (src/.../post-cache-key.constant.ts)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            POST_ADDED_EVENT   (src/.../posts.resolver.ts)\n                        \n                        \n                            PUB_SUB   (src/.../pub-sub.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/constants/post-cache-key.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_POSTS_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_POSTS_CACHE'\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    get(key: string) {\n        switch (key) {\n            case 'JWT_EXPIRATION_TIME':\n                return '3600'\n        }\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sign: () => ''\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/tests/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 1,\n    email: 'user@email.com',\n    name: 'John',\n    password: 'hash',\n    address: {\n        id: 1,\n        street: 'streetName',\n        city: 'cityName',\n        country: 'countryName'\n    },\n    isTwoFactorAuthenticationEnabled: false,\n    isEmailConfirmed: false,\n    isPhoneNumberConfirmed: false,\n    isRegisteredWithGoogle: false,\n    created_at: null,\n    updated_at: null\n}\n                    \n                \n\n\n        \n    \n\n    src/posts/posts.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        POST_ADDED_EVENT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'postAdded'\n                    \n                \n\n\n        \n    \n\n    src/pub-sub/pub-sub.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PUB_SUB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PUB_SUB'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
